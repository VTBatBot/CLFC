
PWM_Default_Setup_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000265c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000028  20000000  0000265c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  00020028  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  00020028  2**0
                  CONTENTS
  4 .bss          000006c0  20000030  00002690  00020030  2**4
                  ALLOC
  5 .stack        00010000  200006f0  00002d50  00020030  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020056  2**0
                  CONTENTS, READONLY
  8 .debug_info   0002db0b  00000000  00000000  000200af  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003b1a  00000000  00000000  0004dbba  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00010142  00000000  00000000  000516d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000e80  00000000  00000000  00061816  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001318  00000000  00000000  00062696  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002f24b  00000000  00000000  000639ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00015ee7  00000000  00000000  00092bf9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00101f10  00000000  00000000  000a8ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00002554  00000000  00000000  001aa9f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	f0 06 01 20 e1 02 00 00 dd 02 00 00 dd 02 00 00     ... ............
      10:	dd 02 00 00 dd 02 00 00 dd 02 00 00 00 00 00 00     ................
	...
      2c:	dd 02 00 00 dd 02 00 00 00 00 00 00 dd 02 00 00     ................
      3c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      4c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      5c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      6c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      7c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      8c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      9c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      ac:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      bc:	8d 16 00 00 99 16 00 00 a5 16 00 00 b1 16 00 00     ................
      cc:	bd 16 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      dc:	dd 02 00 00 dd 02 00 00 dd 02 00 00 00 00 00 00     ................
	...
      f4:	19 18 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     104:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     114:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     124:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     134:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     144:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     154:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     164:	dd 02 00 00 09 1a 00 00 1d 1a 00 00 31 1a 00 00     ............1...
     174:	45 1a 00 00 00 00 00 00 00 00 00 00 dd 02 00 00     E...............
     184:	dd 02 00 00 dd 02 00 00 dd 02 00 00 00 00 00 00     ................
     194:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1a4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1b4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1c4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1d4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1e4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 c5 21 00 00     .............!..
     1f4:	dd 02 00 00 dd 02 00 00 e5 21 00 00 dd 02 00 00     .........!......
     204:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     214:	dd 02 00 00 dd 02 00 00 dd 02 00 00 81 13 00 00     ................
     224:	95 13 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     234:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     244:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     254:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000030 	.word	0x20000030
     280:	00000000 	.word	0x00000000
     284:	0000265c 	.word	0x0000265c

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	0000265c 	.word	0x0000265c
     2c4:	20000034 	.word	0x20000034
     2c8:	0000265c 	.word	0x0000265c
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b508      	push	{r3, lr}
	system_init();
     2d2:	4b01      	ldr	r3, [pc, #4]	; (2d8 <atmel_start_init+0x8>)
     2d4:	4798      	blx	r3
     2d6:	bd08      	pop	{r3, pc}
     2d8:	0000063d 	.word	0x0000063d

000002dc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2dc:	e7fe      	b.n	2dc <Dummy_Handler>
	...

000002e0 <Reset_Handler>:
{
     2e0:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2e2:	4b1c      	ldr	r3, [pc, #112]	; (354 <Reset_Handler+0x74>)
     2e4:	4a1c      	ldr	r2, [pc, #112]	; (358 <Reset_Handler+0x78>)
     2e6:	429a      	cmp	r2, r3
     2e8:	d010      	beq.n	30c <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     2ea:	4b1c      	ldr	r3, [pc, #112]	; (35c <Reset_Handler+0x7c>)
     2ec:	4a19      	ldr	r2, [pc, #100]	; (354 <Reset_Handler+0x74>)
     2ee:	429a      	cmp	r2, r3
     2f0:	d20c      	bcs.n	30c <Reset_Handler+0x2c>
     2f2:	3b01      	subs	r3, #1
     2f4:	1a9b      	subs	r3, r3, r2
     2f6:	f023 0303 	bic.w	r3, r3, #3
     2fa:	3304      	adds	r3, #4
     2fc:	4413      	add	r3, r2
     2fe:	4916      	ldr	r1, [pc, #88]	; (358 <Reset_Handler+0x78>)
                        *pDest++ = *pSrc++;
     300:	f851 0b04 	ldr.w	r0, [r1], #4
     304:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     308:	429a      	cmp	r2, r3
     30a:	d1f9      	bne.n	300 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     30c:	4b14      	ldr	r3, [pc, #80]	; (360 <Reset_Handler+0x80>)
     30e:	4a15      	ldr	r2, [pc, #84]	; (364 <Reset_Handler+0x84>)
     310:	429a      	cmp	r2, r3
     312:	d20a      	bcs.n	32a <Reset_Handler+0x4a>
     314:	3b01      	subs	r3, #1
     316:	1a9b      	subs	r3, r3, r2
     318:	f023 0303 	bic.w	r3, r3, #3
     31c:	3304      	adds	r3, #4
     31e:	4413      	add	r3, r2
                *pDest++ = 0;
     320:	2100      	movs	r1, #0
     322:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     326:	4293      	cmp	r3, r2
     328:	d1fb      	bne.n	322 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     32a:	4b0f      	ldr	r3, [pc, #60]	; (368 <Reset_Handler+0x88>)
     32c:	4a0f      	ldr	r2, [pc, #60]	; (36c <Reset_Handler+0x8c>)
     32e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     332:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     334:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     338:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     33c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     340:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     344:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     348:	4b09      	ldr	r3, [pc, #36]	; (370 <Reset_Handler+0x90>)
     34a:	4798      	blx	r3
        main();
     34c:	4b09      	ldr	r3, [pc, #36]	; (374 <Reset_Handler+0x94>)
     34e:	4798      	blx	r3
     350:	e7fe      	b.n	350 <Reset_Handler+0x70>
     352:	bf00      	nop
     354:	20000000 	.word	0x20000000
     358:	0000265c 	.word	0x0000265c
     35c:	20000028 	.word	0x20000028
     360:	200006f0 	.word	0x200006f0
     364:	20000030 	.word	0x20000030
     368:	e000ed00 	.word	0xe000ed00
     36c:	00000000 	.word	0x00000000
     370:	0000234d 	.word	0x0000234d
     374:	00002241 	.word	0x00002241

00000378 <ADC_0_init>:
 * \brief ADC initialization function
 *
 * Enables ADC peripheral, clocks and initializes ADC driver
 */
void ADC_0_init(void)
{
     378:	b5f0      	push	{r4, r5, r6, r7, lr}
     37a:	b085      	sub	sp, #20
}

static inline void hri_mclk_set_APBDMASK_ADC1_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC1;
     37c:	4a1d      	ldr	r2, [pc, #116]	; (3f4 <ADC_0_init+0x7c>)
     37e:	6a13      	ldr	r3, [r2, #32]
     380:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     384:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     386:	2240      	movs	r2, #64	; 0x40
     388:	4b1b      	ldr	r3, [pc, #108]	; (3f8 <ADC_0_init+0x80>)
     38a:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	hri_mclk_set_APBDMASK_ADC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC1_GCLK_ID, CONF_GCLK_ADC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	adc_async_init(&ADC_0, ADC1, ADC_0_map, ADC_0_CH_MAX, ADC_0_CH_AMOUNT, &ADC_0_ch[0], (void *)NULL);
     38e:	4e1b      	ldr	r6, [pc, #108]	; (3fc <ADC_0_init+0x84>)
     390:	4d1b      	ldr	r5, [pc, #108]	; (400 <ADC_0_init+0x88>)
     392:	2400      	movs	r4, #0
     394:	9402      	str	r4, [sp, #8]
     396:	4b1b      	ldr	r3, [pc, #108]	; (404 <ADC_0_init+0x8c>)
     398:	9301      	str	r3, [sp, #4]
     39a:	2301      	movs	r3, #1
     39c:	9300      	str	r3, [sp, #0]
     39e:	4623      	mov	r3, r4
     3a0:	4632      	mov	r2, r6
     3a2:	4919      	ldr	r1, [pc, #100]	; (408 <ADC_0_init+0x90>)
     3a4:	4628      	mov	r0, r5
     3a6:	4f19      	ldr	r7, [pc, #100]	; (40c <ADC_0_init+0x94>)
     3a8:	47b8      	blx	r7
	adc_async_register_channel_buffer(&ADC_0, 0, ADC_0_buffer, ADC_0_BUFFER_SIZE);
     3aa:	2310      	movs	r3, #16
     3ac:	1d32      	adds	r2, r6, #4
     3ae:	4621      	mov	r1, r4
     3b0:	4628      	mov	r0, r5
     3b2:	4c17      	ldr	r4, [pc, #92]	; (410 <ADC_0_init+0x98>)
     3b4:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     3b6:	4b17      	ldr	r3, [pc, #92]	; (414 <ADC_0_init+0x9c>)
     3b8:	f44f 7280 	mov.w	r2, #256	; 0x100
     3bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3c0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     3c4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     3c8:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     3cc:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3d0:	f893 20c8 	ldrb.w	r2, [r3, #200]	; 0xc8
	tmp &= ~PORT_PINCFG_PMUXEN;
     3d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3d8:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3dc:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3e0:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     3e4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     3e8:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3ec:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4

	// Disable digital pin circuitry
	gpio_set_pin_direction(PB08, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(PB08, PINMUX_PB08B_ADC1_AIN0);
}
     3f0:	b005      	add	sp, #20
     3f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     3f4:	40000800 	.word	0x40000800
     3f8:	40001c00 	.word	0x40001c00
     3fc:	2000004c 	.word	0x2000004c
     400:	20000220 	.word	0x20000220
     404:	2000024c 	.word	0x2000024c
     408:	43002000 	.word	0x43002000
     40c:	00000715 	.word	0x00000715
     410:	000007b9 	.word	0x000007b9
     414:	41008000 	.word	0x41008000

00000418 <USART_0_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     418:	4b10      	ldr	r3, [pc, #64]	; (45c <USART_0_PORT_init+0x44>)
     41a:	f893 20d8 	ldrb.w	r2, [r3, #216]	; 0xd8
	tmp &= ~PORT_PINCFG_PMUXEN;
     41e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     422:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     426:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     42a:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     42e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     432:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     436:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     43a:	f893 20d9 	ldrb.w	r2, [r3, #217]	; 0xd9
	tmp &= ~PORT_PINCFG_PMUXEN;
     43e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     442:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     446:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     44a:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     44e:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     452:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     456:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
     45a:	4770      	bx	lr
     45c:	41008000 	.word	0x41008000

00000460 <USART_0_CLOCK_init>:
     460:	4b06      	ldr	r3, [pc, #24]	; (47c <USART_0_CLOCK_init+0x1c>)
     462:	2240      	movs	r2, #64	; 0x40
     464:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
     468:	2243      	movs	r2, #67	; 0x43
     46a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
     46e:	4a04      	ldr	r2, [pc, #16]	; (480 <USART_0_CLOCK_init+0x20>)
     470:	6953      	ldr	r3, [r2, #20]
     472:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     476:	6153      	str	r3, [r2, #20]
     478:	4770      	bx	lr
     47a:	bf00      	nop
     47c:	40001c00 	.word	0x40001c00
     480:	40000800 	.word	0x40000800

00000484 <USART_0_init>:

	hri_mclk_set_APBAMASK_SERCOM0_bit(MCLK);
}

void USART_0_init(void)
{
     484:	b508      	push	{r3, lr}
	USART_0_CLOCK_init();
     486:	4b05      	ldr	r3, [pc, #20]	; (49c <USART_0_init+0x18>)
     488:	4798      	blx	r3
	usart_sync_init(&USART_0, SERCOM0, (void *)NULL);
     48a:	2200      	movs	r2, #0
     48c:	4904      	ldr	r1, [pc, #16]	; (4a0 <USART_0_init+0x1c>)
     48e:	4805      	ldr	r0, [pc, #20]	; (4a4 <USART_0_init+0x20>)
     490:	4b05      	ldr	r3, [pc, #20]	; (4a8 <USART_0_init+0x24>)
     492:	4798      	blx	r3
	USART_0_PORT_init();
     494:	4b05      	ldr	r3, [pc, #20]	; (4ac <USART_0_init+0x28>)
     496:	4798      	blx	r3
     498:	bd08      	pop	{r3, pc}
     49a:	bf00      	nop
     49c:	00000461 	.word	0x00000461
     4a0:	40003000 	.word	0x40003000
     4a4:	200002ac 	.word	0x200002ac
     4a8:	00000f05 	.word	0x00000f05
     4ac:	00000419 	.word	0x00000419

000004b0 <SPI_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     4b0:	4b2f      	ldr	r3, [pc, #188]	; (570 <SPI_0_PORT_init+0xc0>)
     4b2:	f44f 7280 	mov.w	r2, #256	; 0x100
     4b6:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     4ba:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4be:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     4c2:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
     4c6:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
     4ca:	f8c3 11a8 	str.w	r1, [r3, #424]	; 0x1a8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4ce:	f893 21c8 	ldrb.w	r2, [r3, #456]	; 0x1c8
	tmp &= ~PORT_PINCFG_PMUXEN;
     4d2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     4d6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4da:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4de:	f893 21b4 	ldrb.w	r2, [r3, #436]	; 0x1b4
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     4e2:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     4e6:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4ea:	f883 21b4 	strb.w	r2, [r3, #436]	; 0x1b4
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     4ee:	f44f 7200 	mov.w	r2, #512	; 0x200
     4f2:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     4f6:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4fa:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     4fe:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
     502:	f8c3 11a8 	str.w	r1, [r3, #424]	; 0x1a8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     506:	f893 21c9 	ldrb.w	r2, [r3, #457]	; 0x1c9
	tmp &= ~PORT_PINCFG_PMUXEN;
     50a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     50e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     512:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     516:	f893 21b4 	ldrb.w	r2, [r3, #436]	; 0x1b4
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     51a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     51e:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     522:	f883 21b4 	strb.w	r2, [r3, #436]	; 0x1b4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     526:	f44f 6280 	mov.w	r2, #1024	; 0x400
     52a:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     52e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     532:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
     536:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
     53a:	4a0e      	ldr	r2, [pc, #56]	; (574 <SPI_0_PORT_init+0xc4>)
     53c:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     540:	f893 21ca 	ldrb.w	r2, [r3, #458]	; 0x1ca
     544:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     548:	f883 21ca 	strb.w	r2, [r3, #458]	; 0x1ca
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     54c:	f893 21ca 	ldrb.w	r2, [r3, #458]	; 0x1ca
	tmp &= ~PORT_PINCFG_PMUXEN;
     550:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     554:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     558:	f883 21ca 	strb.w	r2, [r3, #458]	; 0x1ca
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     55c:	f893 21b5 	ldrb.w	r2, [r3, #437]	; 0x1b5
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     560:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     564:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     568:	f883 21b5 	strb.w	r2, [r3, #437]	; 0x1b5
     56c:	4770      	bx	lr
     56e:	bf00      	nop
     570:	41008000 	.word	0x41008000
     574:	c0020000 	.word	0xc0020000

00000578 <SPI_0_CLOCK_init>:
     578:	4b06      	ldr	r3, [pc, #24]	; (594 <SPI_0_CLOCK_init+0x1c>)
     57a:	2240      	movs	r2, #64	; 0x40
     57c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
     580:	2243      	movs	r2, #67	; 0x43
     582:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
     586:	4a04      	ldr	r2, [pc, #16]	; (598 <SPI_0_CLOCK_init+0x20>)
     588:	6a13      	ldr	r3, [r2, #32]
     58a:	f043 0308 	orr.w	r3, r3, #8
     58e:	6213      	str	r3, [r2, #32]
     590:	4770      	bx	lr
     592:	bf00      	nop
     594:	40001c00 	.word	0x40001c00
     598:	40000800 	.word	0x40000800

0000059c <SPI_0_init>:

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
}

void SPI_0_init(void)
{
     59c:	b508      	push	{r3, lr}
	SPI_0_CLOCK_init();
     59e:	4b04      	ldr	r3, [pc, #16]	; (5b0 <SPI_0_init+0x14>)
     5a0:	4798      	blx	r3
	spi_m_async_init(&SPI_0, SERCOM7);
     5a2:	4904      	ldr	r1, [pc, #16]	; (5b4 <SPI_0_init+0x18>)
     5a4:	4804      	ldr	r0, [pc, #16]	; (5b8 <SPI_0_init+0x1c>)
     5a6:	4b05      	ldr	r3, [pc, #20]	; (5bc <SPI_0_init+0x20>)
     5a8:	4798      	blx	r3
	SPI_0_PORT_init();
     5aa:	4b05      	ldr	r3, [pc, #20]	; (5c0 <SPI_0_init+0x24>)
     5ac:	4798      	blx	r3
     5ae:	bd08      	pop	{r3, pc}
     5b0:	00000579 	.word	0x00000579
     5b4:	43000c00 	.word	0x43000c00
     5b8:	20000264 	.word	0x20000264
     5bc:	00000bb5 	.word	0x00000bb5
     5c0:	000004b1 	.word	0x000004b1

000005c4 <PWM_0_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5c4:	4a08      	ldr	r2, [pc, #32]	; (5e8 <PWM_0_PORT_init+0x24>)
     5c6:	f892 30cd 	ldrb.w	r3, [r2, #205]	; 0xcd
	tmp &= ~PORT_PINCFG_PMUXEN;
     5ca:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5ce:	f043 0301 	orr.w	r3, r3, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5d2:	f882 30cd 	strb.w	r3, [r2, #205]	; 0xcd
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5d6:	f892 30b6 	ldrb.w	r3, [r2, #182]	; 0xb6
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     5da:	f003 030f 	and.w	r3, r3, #15
	tmp |= PORT_PMUX_PMUXO(data);
     5de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5e2:	f882 30b6 	strb.w	r3, [r2, #182]	; 0xb6
     5e6:	4770      	bx	lr
     5e8:	41008000 	.word	0x41008000

000005ec <PWM_0_CLOCK_init>:
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
     5ec:	4a04      	ldr	r2, [pc, #16]	; (600 <PWM_0_CLOCK_init+0x14>)
     5ee:	69d3      	ldr	r3, [r2, #28]
     5f0:	f043 0320 	orr.w	r3, r3, #32
     5f4:	61d3      	str	r3, [r2, #28]
     5f6:	2240      	movs	r2, #64	; 0x40
     5f8:	4b02      	ldr	r3, [pc, #8]	; (604 <PWM_0_CLOCK_init+0x18>)
     5fa:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
     5fe:	4770      	bx	lr
     600:	40000800 	.word	0x40000800
     604:	40001c00 	.word	0x40001c00

00000608 <PWM_0_init>:
	hri_mclk_set_APBCMASK_TC4_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TC4_GCLK_ID, CONF_GCLK_TC4_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void PWM_0_init(void)
{
     608:	b508      	push	{r3, lr}
	PWM_0_CLOCK_init();
     60a:	4b06      	ldr	r3, [pc, #24]	; (624 <PWM_0_init+0x1c>)
     60c:	4798      	blx	r3
	PWM_0_PORT_init();
     60e:	4b06      	ldr	r3, [pc, #24]	; (628 <PWM_0_init+0x20>)
     610:	4798      	blx	r3
	pwm_init(&PWM_0, TC4, _tc_get_pwm());
     612:	4b06      	ldr	r3, [pc, #24]	; (62c <PWM_0_init+0x24>)
     614:	4798      	blx	r3
     616:	4602      	mov	r2, r0
     618:	4905      	ldr	r1, [pc, #20]	; (630 <PWM_0_init+0x28>)
     61a:	4806      	ldr	r0, [pc, #24]	; (634 <PWM_0_init+0x2c>)
     61c:	4b06      	ldr	r3, [pc, #24]	; (638 <PWM_0_init+0x30>)
     61e:	4798      	blx	r3
     620:	bd08      	pop	{r3, pc}
     622:	bf00      	nop
     624:	000005ed 	.word	0x000005ed
     628:	000005c5 	.word	0x000005c5
     62c:	00002185 	.word	0x00002185
     630:	42001400 	.word	0x42001400
     634:	20000204 	.word	0x20000204
     638:	00000909 	.word	0x00000909

0000063c <system_init>:
}

void system_init(void)
{
     63c:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     63e:	4b0d      	ldr	r3, [pc, #52]	; (674 <system_init+0x38>)
     640:	4798      	blx	r3
	init_mcu();

	ADC_0_init();
     642:	4b0d      	ldr	r3, [pc, #52]	; (678 <system_init+0x3c>)
     644:	4798      	blx	r3

	USART_0_init();
     646:	4b0d      	ldr	r3, [pc, #52]	; (67c <system_init+0x40>)
     648:	4798      	blx	r3

	SPI_0_init();
     64a:	4b0d      	ldr	r3, [pc, #52]	; (680 <system_init+0x44>)
     64c:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
     64e:	4a0d      	ldr	r2, [pc, #52]	; (684 <system_init+0x48>)
     650:	6953      	ldr	r3, [r2, #20]
     652:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
     656:	6153      	str	r3, [r2, #20]
     658:	2240      	movs	r2, #64	; 0x40
     65a:	4b0b      	ldr	r3, [pc, #44]	; (688 <system_init+0x4c>)
     65c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	timer_init(&TIMER_0, TC1, _tc_get_timer());
     660:	4b0a      	ldr	r3, [pc, #40]	; (68c <system_init+0x50>)
     662:	4798      	blx	r3
     664:	4602      	mov	r2, r0
     666:	490a      	ldr	r1, [pc, #40]	; (690 <system_init+0x54>)
     668:	480a      	ldr	r0, [pc, #40]	; (694 <system_init+0x58>)
     66a:	4b0b      	ldr	r3, [pc, #44]	; (698 <system_init+0x5c>)
     66c:	4798      	blx	r3

	TIMER_0_init();
	PWM_0_init();
     66e:	4b0b      	ldr	r3, [pc, #44]	; (69c <system_init+0x60>)
     670:	4798      	blx	r3
     672:	bd08      	pop	{r3, pc}
     674:	000013c5 	.word	0x000013c5
     678:	00000379 	.word	0x00000379
     67c:	00000485 	.word	0x00000485
     680:	0000059d 	.word	0x0000059d
     684:	40000800 	.word	0x40000800
     688:	40001c00 	.word	0x40001c00
     68c:	00002181 	.word	0x00002181
     690:	40003c00 	.word	0x40003c00
     694:	200002b8 	.word	0x200002b8
     698:	00000d11 	.word	0x00000d11
     69c:	00000609 	.word	0x00000609

000006a0 <adc_async_window_threshold_reached>:
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
	}
}

static void adc_async_window_threshold_reached(struct _adc_async_device *device, const uint8_t channel)
{
     6a0:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.monitor) {
     6a2:	6983      	ldr	r3, [r0, #24]
     6a4:	b103      	cbz	r3, 6a8 <adc_async_window_threshold_reached+0x8>
		descr->adc_async_cb.monitor(descr, channel);
     6a6:	4798      	blx	r3
     6a8:	bd08      	pop	{r3, pc}

000006aa <adc_async_error_occured>:
	}
}

static void adc_async_error_occured(struct _adc_async_device *device, const uint8_t channel)
{
     6aa:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.error) {
     6ac:	69c3      	ldr	r3, [r0, #28]
     6ae:	b103      	cbz	r3, 6b2 <adc_async_error_occured+0x8>
		descr->adc_async_cb.error(descr, channel);
     6b0:	4798      	blx	r3
     6b2:	bd08      	pop	{r3, pc}

000006b4 <adc_async_channel_conversion_done>:
{
     6b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     6b8:	4606      	mov	r6, r0
     6ba:	460f      	mov	r7, r1
     6bc:	4691      	mov	r9, r2
	uint8_t                              index    = descr->channel_map[channel];
     6be:	6a03      	ldr	r3, [r0, #32]
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
     6c0:	5c5c      	ldrb	r4, [r3, r1]
     6c2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
     6c6:	00e4      	lsls	r4, r4, #3
     6c8:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
     6cc:	eb08 0504 	add.w	r5, r8, r4
	ringbuffer_put(&descr_ch->convert, data);
     6d0:	f105 0a04 	add.w	sl, r5, #4
     6d4:	b2d1      	uxtb	r1, r2
     6d6:	4650      	mov	r0, sl
     6d8:	4b0c      	ldr	r3, [pc, #48]	; (70c <adc_async_channel_conversion_done+0x58>)
     6da:	4798      	blx	r3
	if (1 < _adc_async_get_data_size(&descr->device)) {
     6dc:	4630      	mov	r0, r6
     6de:	4b0c      	ldr	r3, [pc, #48]	; (710 <adc_async_channel_conversion_done+0x5c>)
     6e0:	4798      	blx	r3
     6e2:	2801      	cmp	r0, #1
     6e4:	d907      	bls.n	6f6 <adc_async_channel_conversion_done+0x42>
		ringbuffer_put(&descr_ch->convert, data >> 8);
     6e6:	ea4f 2119 	mov.w	r1, r9, lsr #8
     6ea:	4650      	mov	r0, sl
     6ec:	4b07      	ldr	r3, [pc, #28]	; (70c <adc_async_channel_conversion_done+0x58>)
     6ee:	4798      	blx	r3
		++descr_ch->bytes_in_buffer;
     6f0:	8aab      	ldrh	r3, [r5, #20]
     6f2:	3301      	adds	r3, #1
     6f4:	82ab      	strh	r3, [r5, #20]
	++descr_ch->bytes_in_buffer;
     6f6:	8aab      	ldrh	r3, [r5, #20]
     6f8:	3301      	adds	r3, #1
     6fa:	82ab      	strh	r3, [r5, #20]
	if (descr_ch->adc_async_ch_cb.convert_done) {
     6fc:	f858 3004 	ldr.w	r3, [r8, r4]
     700:	b113      	cbz	r3, 708 <adc_async_channel_conversion_done+0x54>
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
     702:	4639      	mov	r1, r7
     704:	4630      	mov	r0, r6
     706:	4798      	blx	r3
     708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     70c:	00001031 	.word	0x00001031
     710:	00001357 	.word	0x00001357

00000714 <adc_async_init>:
{
     714:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     718:	4689      	mov	r9, r1
     71a:	4616      	mov	r6, r2
     71c:	461c      	mov	r4, r3
     71e:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
     722:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
	ASSERT(descr && hw && channel_map && channel_amount && descr_ch);
     724:	4607      	mov	r7, r0
     726:	b140      	cbz	r0, 73a <adc_async_init+0x26>
     728:	b149      	cbz	r1, 73e <adc_async_init+0x2a>
     72a:	b152      	cbz	r2, 742 <adc_async_init+0x2e>
     72c:	f1b8 0f00 	cmp.w	r8, #0
     730:	d009      	beq.n	746 <adc_async_init+0x32>
     732:	1c28      	adds	r0, r5, #0
     734:	bf18      	it	ne
     736:	2001      	movne	r0, #1
     738:	e006      	b.n	748 <adc_async_init+0x34>
     73a:	2000      	movs	r0, #0
     73c:	e004      	b.n	748 <adc_async_init+0x34>
     73e:	2000      	movs	r0, #0
     740:	e002      	b.n	748 <adc_async_init+0x34>
     742:	2000      	movs	r0, #0
     744:	e000      	b.n	748 <adc_async_init+0x34>
     746:	2000      	movs	r0, #0
     748:	f8df b064 	ldr.w	fp, [pc, #100]	; 7b0 <adc_async_init+0x9c>
     74c:	223f      	movs	r2, #63	; 0x3f
     74e:	4659      	mov	r1, fp
     750:	f8df a060 	ldr.w	sl, [pc, #96]	; 7b4 <adc_async_init+0xa0>
     754:	47d0      	blx	sl
	ASSERT(channel_amount <= (channel_max + 1));
     756:	1c60      	adds	r0, r4, #1
     758:	2240      	movs	r2, #64	; 0x40
     75a:	4659      	mov	r1, fp
     75c:	4580      	cmp	r8, r0
     75e:	bfcc      	ite	gt
     760:	2000      	movgt	r0, #0
     762:	2001      	movle	r0, #1
     764:	47d0      	blx	sl
	device = &descr->device;
     766:	2300      	movs	r3, #0
		channel_map[i] = 0xFF;
     768:	21ff      	movs	r1, #255	; 0xff
     76a:	b2da      	uxtb	r2, r3
     76c:	54b1      	strb	r1, [r6, r2]
     76e:	3301      	adds	r3, #1
	for (uint8_t i = 0; i <= channel_max; i++) {
     770:	b2da      	uxtb	r2, r3
     772:	42a2      	cmp	r2, r4
     774:	d9f9      	bls.n	76a <adc_async_init+0x56>
	descr->channel_map    = channel_map;
     776:	623e      	str	r6, [r7, #32]
	descr->channel_max    = channel_max;
     778:	f887 4024 	strb.w	r4, [r7, #36]	; 0x24
	descr->channel_amount = channel_amount;
     77c:	f887 8025 	strb.w	r8, [r7, #37]	; 0x25
	descr->descr_ch       = descr_ch;
     780:	62bd      	str	r5, [r7, #40]	; 0x28
	init_status           = _adc_async_init(device, hw);
     782:	4649      	mov	r1, r9
     784:	4638      	mov	r0, r7
     786:	4b06      	ldr	r3, [pc, #24]	; (7a0 <adc_async_init+0x8c>)
     788:	4798      	blx	r3
	if (init_status) {
     78a:	4603      	mov	r3, r0
     78c:	b928      	cbnz	r0, 79a <adc_async_init+0x86>
	device->adc_async_ch_cb.convert_done = adc_async_channel_conversion_done;
     78e:	4a05      	ldr	r2, [pc, #20]	; (7a4 <adc_async_init+0x90>)
     790:	60ba      	str	r2, [r7, #8]
	device->adc_async_cb.window_cb       = adc_async_window_threshold_reached;
     792:	4a05      	ldr	r2, [pc, #20]	; (7a8 <adc_async_init+0x94>)
     794:	603a      	str	r2, [r7, #0]
	device->adc_async_cb.error_cb        = adc_async_error_occured;
     796:	4a05      	ldr	r2, [pc, #20]	; (7ac <adc_async_init+0x98>)
     798:	607a      	str	r2, [r7, #4]
}
     79a:	4618      	mov	r0, r3
     79c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     7a0:	00001235 	.word	0x00001235
     7a4:	000006b5 	.word	0x000006b5
     7a8:	000006a1 	.word	0x000006a1
     7ac:	000006ab 	.word	0x000006ab
     7b0:	00002394 	.word	0x00002394
     7b4:	00000f79 	.word	0x00000f79

000007b8 <adc_async_register_channel_buffer>:
{
     7b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     7bc:	460e      	mov	r6, r1
     7be:	4617      	mov	r7, r2
     7c0:	4698      	mov	r8, r3
	ASSERT(descr && convert_buffer && convert_buffer_length);
     7c2:	4605      	mov	r5, r0
     7c4:	2800      	cmp	r0, #0
     7c6:	d040      	beq.n	84a <adc_async_register_channel_buffer+0x92>
     7c8:	2a00      	cmp	r2, #0
     7ca:	d040      	beq.n	84e <adc_async_register_channel_buffer+0x96>
     7cc:	1c18      	adds	r0, r3, #0
     7ce:	bf18      	it	ne
     7d0:	2001      	movne	r0, #1
     7d2:	f8df 9098 	ldr.w	r9, [pc, #152]	; 86c <adc_async_register_channel_buffer+0xb4>
     7d6:	2266      	movs	r2, #102	; 0x66
     7d8:	4649      	mov	r1, r9
     7da:	4c22      	ldr	r4, [pc, #136]	; (864 <adc_async_register_channel_buffer+0xac>)
     7dc:	47a0      	blx	r4
	ASSERT(descr->channel_max >= channel);
     7de:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
     7e2:	2267      	movs	r2, #103	; 0x67
     7e4:	4649      	mov	r1, r9
     7e6:	42b0      	cmp	r0, r6
     7e8:	bf34      	ite	cc
     7ea:	2000      	movcc	r0, #0
     7ec:	2001      	movcs	r0, #1
     7ee:	47a0      	blx	r4
	if (descr->channel_map[channel] != 0xFF) {
     7f0:	6a29      	ldr	r1, [r5, #32]
     7f2:	5d8b      	ldrb	r3, [r1, r6]
     7f4:	2bff      	cmp	r3, #255	; 0xff
     7f6:	d12c      	bne.n	852 <adc_async_register_channel_buffer+0x9a>
	for (i = 0; i <= descr->channel_max; i++) {
     7f8:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
     7fc:	2300      	movs	r3, #0
     7fe:	461c      	mov	r4, r3
		if (descr->channel_map[i] != 0xFF) {
     800:	b2da      	uxtb	r2, r3
     802:	5c8a      	ldrb	r2, [r1, r2]
     804:	2aff      	cmp	r2, #255	; 0xff
			index++;
     806:	bf1c      	itt	ne
     808:	3401      	addne	r4, #1
     80a:	b2e4      	uxtbne	r4, r4
     80c:	3301      	adds	r3, #1
	for (i = 0; i <= descr->channel_max; i++) {
     80e:	b2da      	uxtb	r2, r3
     810:	4282      	cmp	r2, r0
     812:	d9f5      	bls.n	800 <adc_async_register_channel_buffer+0x48>
	if (index > descr->channel_amount) {
     814:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
     818:	42a3      	cmp	r3, r4
     81a:	d31d      	bcc.n	858 <adc_async_register_channel_buffer+0xa0>
	if (ERR_NONE != ringbuffer_init(&descr->descr_ch[index].convert, convert_buffer, convert_buffer_length)) {
     81c:	eb04 0944 	add.w	r9, r4, r4, lsl #1
     820:	ea4f 09c9 	mov.w	r9, r9, lsl #3
     824:	6aa8      	ldr	r0, [r5, #40]	; 0x28
     826:	4448      	add	r0, r9
     828:	4642      	mov	r2, r8
     82a:	4639      	mov	r1, r7
     82c:	3004      	adds	r0, #4
     82e:	4b0e      	ldr	r3, [pc, #56]	; (868 <adc_async_register_channel_buffer+0xb0>)
     830:	4798      	blx	r3
     832:	4602      	mov	r2, r0
     834:	b998      	cbnz	r0, 85e <adc_async_register_channel_buffer+0xa6>
	descr->channel_map[channel]            = index;
     836:	6a2b      	ldr	r3, [r5, #32]
     838:	559c      	strb	r4, [r3, r6]
	descr->descr_ch[index].bytes_in_buffer = 0;
     83a:	6aab      	ldr	r3, [r5, #40]	; 0x28
     83c:	4499      	add	r9, r3
     83e:	2300      	movs	r3, #0
     840:	f8a9 3014 	strh.w	r3, [r9, #20]
}
     844:	4610      	mov	r0, r2
     846:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(descr && convert_buffer && convert_buffer_length);
     84a:	2000      	movs	r0, #0
     84c:	e7c1      	b.n	7d2 <adc_async_register_channel_buffer+0x1a>
     84e:	2000      	movs	r0, #0
     850:	e7bf      	b.n	7d2 <adc_async_register_channel_buffer+0x1a>
		return ERR_INVALID_ARG;
     852:	f06f 020c 	mvn.w	r2, #12
     856:	e7f5      	b.n	844 <adc_async_register_channel_buffer+0x8c>
		return ERR_NO_RESOURCE;
     858:	f06f 021b 	mvn.w	r2, #27
     85c:	e7f2      	b.n	844 <adc_async_register_channel_buffer+0x8c>
		return ERR_INVALID_ARG;
     85e:	f06f 020c 	mvn.w	r2, #12
     862:	e7ef      	b.n	844 <adc_async_register_channel_buffer+0x8c>
     864:	00000f79 	.word	0x00000f79
     868:	00000fe1 	.word	0x00000fe1
     86c:	00002394 	.word	0x00002394

00000870 <adc_async_enable_channel>:
{
     870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     872:	460d      	mov	r5, r1
	ASSERT(descr);
     874:	4f0b      	ldr	r7, [pc, #44]	; (8a4 <adc_async_enable_channel+0x34>)
     876:	4604      	mov	r4, r0
     878:	2283      	movs	r2, #131	; 0x83
     87a:	4639      	mov	r1, r7
     87c:	3000      	adds	r0, #0
     87e:	bf18      	it	ne
     880:	2001      	movne	r0, #1
     882:	4e09      	ldr	r6, [pc, #36]	; (8a8 <adc_async_enable_channel+0x38>)
     884:	47b0      	blx	r6
	ASSERT(descr->channel_max >= channel);
     886:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
     88a:	2284      	movs	r2, #132	; 0x84
     88c:	4639      	mov	r1, r7
     88e:	42a8      	cmp	r0, r5
     890:	bf34      	ite	cc
     892:	2000      	movcc	r0, #0
     894:	2001      	movcs	r0, #1
     896:	47b0      	blx	r6
	_adc_async_enable_channel(&descr->device, channel);
     898:	4629      	mov	r1, r5
     89a:	4620      	mov	r0, r4
     89c:	4b03      	ldr	r3, [pc, #12]	; (8ac <adc_async_enable_channel+0x3c>)
     89e:	4798      	blx	r3
}
     8a0:	2000      	movs	r0, #0
     8a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     8a4:	00002394 	.word	0x00002394
     8a8:	00000f79 	.word	0x00000f79
     8ac:	00001341 	.word	0x00001341

000008b0 <adc_async_start_conversion>:
{
     8b0:	b510      	push	{r4, lr}
	ASSERT(descr);
     8b2:	4604      	mov	r4, r0
     8b4:	22d6      	movs	r2, #214	; 0xd6
     8b6:	4905      	ldr	r1, [pc, #20]	; (8cc <adc_async_start_conversion+0x1c>)
     8b8:	3000      	adds	r0, #0
     8ba:	bf18      	it	ne
     8bc:	2001      	movne	r0, #1
     8be:	4b04      	ldr	r3, [pc, #16]	; (8d0 <adc_async_start_conversion+0x20>)
     8c0:	4798      	blx	r3
	_adc_async_convert(&descr->device);
     8c2:	4620      	mov	r0, r4
     8c4:	4b03      	ldr	r3, [pc, #12]	; (8d4 <adc_async_start_conversion+0x24>)
     8c6:	4798      	blx	r3
}
     8c8:	2000      	movs	r0, #0
     8ca:	bd10      	pop	{r4, pc}
     8cc:	00002394 	.word	0x00002394
     8d0:	00000f79 	.word	0x00000f79
     8d4:	00001369 	.word	0x00001369

000008d8 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     8d8:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     8dc:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     8de:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     8e0:	f3bf 8f5f 	dmb	sy
     8e4:	4770      	bx	lr

000008e6 <atomic_leave_critical>:
     8e6:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     8ea:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     8ec:	f383 8810 	msr	PRIMASK, r3
     8f0:	4770      	bx	lr

000008f2 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
     8f2:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.period) {
     8f4:	6943      	ldr	r3, [r0, #20]
     8f6:	b103      	cbz	r3, 8fa <pwm_period_expired+0x8>
		descr->pwm_cb.period(descr);
     8f8:	4798      	blx	r3
     8fa:	bd08      	pop	{r3, pc}

000008fc <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
     8fc:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.error) {
     8fe:	6983      	ldr	r3, [r0, #24]
     900:	b103      	cbz	r3, 904 <pwm_detect_fault+0x8>
		descr->pwm_cb.error(descr);
     902:	4798      	blx	r3
     904:	bd08      	pop	{r3, pc}
	...

00000908 <pwm_init>:
{
     908:	b538      	push	{r3, r4, r5, lr}
     90a:	460d      	mov	r5, r1
	ASSERT(descr && hw);
     90c:	4604      	mov	r4, r0
     90e:	b180      	cbz	r0, 932 <pwm_init+0x2a>
     910:	1c08      	adds	r0, r1, #0
     912:	bf18      	it	ne
     914:	2001      	movne	r0, #1
     916:	2233      	movs	r2, #51	; 0x33
     918:	4907      	ldr	r1, [pc, #28]	; (938 <pwm_init+0x30>)
     91a:	4b08      	ldr	r3, [pc, #32]	; (93c <pwm_init+0x34>)
     91c:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
     91e:	4629      	mov	r1, r5
     920:	4620      	mov	r0, r4
     922:	4b07      	ldr	r3, [pc, #28]	; (940 <pwm_init+0x38>)
     924:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
     926:	4b07      	ldr	r3, [pc, #28]	; (944 <pwm_init+0x3c>)
     928:	6023      	str	r3, [r4, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
     92a:	4b07      	ldr	r3, [pc, #28]	; (948 <pwm_init+0x40>)
     92c:	6063      	str	r3, [r4, #4]
}
     92e:	2000      	movs	r0, #0
     930:	bd38      	pop	{r3, r4, r5, pc}
     932:	2000      	movs	r0, #0
     934:	e7ef      	b.n	916 <pwm_init+0xe>
     936:	bf00      	nop
     938:	000023b0 	.word	0x000023b0
     93c:	00000f79 	.word	0x00000f79
     940:	00001f41 	.word	0x00001f41
     944:	000008f3 	.word	0x000008f3
     948:	000008fd 	.word	0x000008fd

0000094c <pwm_enable>:
{
     94c:	b510      	push	{r4, lr}
	ASSERT(descr);
     94e:	4604      	mov	r4, r0
     950:	224a      	movs	r2, #74	; 0x4a
     952:	4909      	ldr	r1, [pc, #36]	; (978 <pwm_enable+0x2c>)
     954:	3000      	adds	r0, #0
     956:	bf18      	it	ne
     958:	2001      	movne	r0, #1
     95a:	4b08      	ldr	r3, [pc, #32]	; (97c <pwm_enable+0x30>)
     95c:	4798      	blx	r3
	if (_pwm_is_enabled(&descr->device)) {
     95e:	4620      	mov	r0, r4
     960:	4b07      	ldr	r3, [pc, #28]	; (980 <pwm_enable+0x34>)
     962:	4798      	blx	r3
     964:	b920      	cbnz	r0, 970 <pwm_enable+0x24>
	_pwm_enable(&descr->device);
     966:	4620      	mov	r0, r4
     968:	4b06      	ldr	r3, [pc, #24]	; (984 <pwm_enable+0x38>)
     96a:	4798      	blx	r3
	return ERR_NONE;
     96c:	2000      	movs	r0, #0
     96e:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
     970:	f06f 0010 	mvn.w	r0, #16
}
     974:	bd10      	pop	{r4, pc}
     976:	bf00      	nop
     978:	000023b0 	.word	0x000023b0
     97c:	00000f79 	.word	0x00000f79
     980:	0000216f 	.word	0x0000216f
     984:	000020d5 	.word	0x000020d5

00000988 <pwm_disable>:
{
     988:	b510      	push	{r4, lr}
	ASSERT(descr);
     98a:	4604      	mov	r4, r0
     98c:	2258      	movs	r2, #88	; 0x58
     98e:	4909      	ldr	r1, [pc, #36]	; (9b4 <pwm_disable+0x2c>)
     990:	3000      	adds	r0, #0
     992:	bf18      	it	ne
     994:	2001      	movne	r0, #1
     996:	4b08      	ldr	r3, [pc, #32]	; (9b8 <pwm_disable+0x30>)
     998:	4798      	blx	r3
	if (!_pwm_is_enabled(&descr->device)) {
     99a:	4620      	mov	r0, r4
     99c:	4b07      	ldr	r3, [pc, #28]	; (9bc <pwm_disable+0x34>)
     99e:	4798      	blx	r3
     9a0:	b120      	cbz	r0, 9ac <pwm_disable+0x24>
	_pwm_disable(&descr->device);
     9a2:	4620      	mov	r0, r4
     9a4:	4b06      	ldr	r3, [pc, #24]	; (9c0 <pwm_disable+0x38>)
     9a6:	4798      	blx	r3
	return ERR_NONE;
     9a8:	2000      	movs	r0, #0
     9aa:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
     9ac:	f06f 0010 	mvn.w	r0, #16
}
     9b0:	bd10      	pop	{r4, pc}
     9b2:	bf00      	nop
     9b4:	000023b0 	.word	0x000023b0
     9b8:	00000f79 	.word	0x00000f79
     9bc:	0000216f 	.word	0x0000216f
     9c0:	000020e9 	.word	0x000020e9

000009c4 <pwm_set_parameters>:
{
     9c4:	b570      	push	{r4, r5, r6, lr}
     9c6:	460d      	mov	r5, r1
     9c8:	4616      	mov	r6, r2
	ASSERT(descr);
     9ca:	4604      	mov	r4, r0
     9cc:	227c      	movs	r2, #124	; 0x7c
     9ce:	4906      	ldr	r1, [pc, #24]	; (9e8 <pwm_set_parameters+0x24>)
     9d0:	3000      	adds	r0, #0
     9d2:	bf18      	it	ne
     9d4:	2001      	movne	r0, #1
     9d6:	4b05      	ldr	r3, [pc, #20]	; (9ec <pwm_set_parameters+0x28>)
     9d8:	4798      	blx	r3
	_pwm_set_param(&descr->device, period, duty_cycle);
     9da:	4632      	mov	r2, r6
     9dc:	4629      	mov	r1, r5
     9de:	4620      	mov	r0, r4
     9e0:	4b03      	ldr	r3, [pc, #12]	; (9f0 <pwm_set_parameters+0x2c>)
     9e2:	4798      	blx	r3
}
     9e4:	2000      	movs	r0, #0
     9e6:	bd70      	pop	{r4, r5, r6, pc}
     9e8:	000023b0 	.word	0x000023b0
     9ec:	00000f79 	.word	0x00000f79
     9f0:	000020fd 	.word	0x000020fd

000009f4 <_spi_m_async_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
     9f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     9f6:	460f      	mov	r7, r1
     9f8:	4616      	mov	r6, r2
	ASSERT(io);
     9fa:	4604      	mov	r4, r0
     9fc:	f240 1227 	movw	r2, #295	; 0x127
     a00:	4909      	ldr	r1, [pc, #36]	; (a28 <_spi_m_async_io_write+0x34>)
     a02:	3000      	adds	r0, #0
     a04:	bf18      	it	ne
     a06:	2001      	movne	r0, #1
     a08:	4b08      	ldr	r3, [pc, #32]	; (a2c <_spi_m_async_io_write+0x38>)
     a0a:	4798      	blx	r3
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);

	spi->xfer.rxbuf = NULL;
     a0c:	2500      	movs	r5, #0
     a0e:	61a5      	str	r5, [r4, #24]
	spi->xfer.txbuf = (uint8_t *)buf;
     a10:	6167      	str	r7, [r4, #20]
	spi->xfer.size  = length;
     a12:	61e6      	str	r6, [r4, #28]
	spi->xfercnt    = 0;
     a14:	6225      	str	r5, [r4, #32]

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
     a16:	2310      	movs	r3, #16
     a18:	7223      	strb	r3, [r4, #8]
	_spi_m_async_enable_tx(&spi->dev, true);
     a1a:	2101      	movs	r1, #1
     a1c:	f1a4 0020 	sub.w	r0, r4, #32
     a20:	4b03      	ldr	r3, [pc, #12]	; (a30 <_spi_m_async_io_write+0x3c>)
     a22:	4798      	blx	r3

	return ERR_NONE;
}
     a24:	4628      	mov	r0, r5
     a26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     a28:	000023c8 	.word	0x000023c8
     a2c:	00000f79 	.word	0x00000f79
     a30:	00001bb9 	.word	0x00001bb9

00000a34 <_spi_m_async_io_read>:
{
     a34:	b570      	push	{r4, r5, r6, lr}
     a36:	460d      	mov	r5, r1
     a38:	4616      	mov	r6, r2
	ASSERT(io);
     a3a:	4604      	mov	r4, r0
     a3c:	f240 1205 	movw	r2, #261	; 0x105
     a40:	490c      	ldr	r1, [pc, #48]	; (a74 <_spi_m_async_io_read+0x40>)
     a42:	3000      	adds	r0, #0
     a44:	bf18      	it	ne
     a46:	2001      	movne	r0, #1
     a48:	4b0b      	ldr	r3, [pc, #44]	; (a78 <_spi_m_async_io_read+0x44>)
     a4a:	4798      	blx	r3
	spi->xfer.rxbuf = buf;
     a4c:	61a5      	str	r5, [r4, #24]
	spi->xfer.txbuf = NULL;
     a4e:	2500      	movs	r5, #0
     a50:	6165      	str	r5, [r4, #20]
	spi->xfer.size  = length;
     a52:	61e6      	str	r6, [r4, #28]
	spi->xfercnt    = 0;
     a54:	6225      	str	r5, [r4, #32]
	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
     a56:	2310      	movs	r3, #16
     a58:	7223      	strb	r3, [r4, #8]
	_spi_m_async_enable_rx(&spi->dev, true);
     a5a:	3c20      	subs	r4, #32
     a5c:	2101      	movs	r1, #1
     a5e:	4620      	mov	r0, r4
     a60:	4b06      	ldr	r3, [pc, #24]	; (a7c <_spi_m_async_io_read+0x48>)
     a62:	4798      	blx	r3
	_spi_m_async_write_one(&spi->dev, SPI_DUMMY_CHAR);
     a64:	f240 11ff 	movw	r1, #511	; 0x1ff
     a68:	4620      	mov	r0, r4
     a6a:	4b05      	ldr	r3, [pc, #20]	; (a80 <_spi_m_async_io_read+0x4c>)
     a6c:	4798      	blx	r3
}
     a6e:	4628      	mov	r0, r5
     a70:	bd70      	pop	{r4, r5, r6, pc}
     a72:	bf00      	nop
     a74:	000023c8 	.word	0x000023c8
     a78:	00000f79 	.word	0x00000f79
     a7c:	00001bed 	.word	0x00001bed
     a80:	00001c69 	.word	0x00001c69

00000a84 <_spi_dev_error>:
{
     a84:	b570      	push	{r4, r5, r6, lr}
     a86:	4604      	mov	r4, r0
     a88:	460e      	mov	r6, r1
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
     a8a:	1f05      	subs	r5, r0, #4
	_spi_m_async_enable_tx(dev, false);
     a8c:	2100      	movs	r1, #0
     a8e:	4b09      	ldr	r3, [pc, #36]	; (ab4 <_spi_dev_error+0x30>)
     a90:	4798      	blx	r3
	_spi_m_async_enable_rx(dev, false);
     a92:	2100      	movs	r1, #0
     a94:	4620      	mov	r0, r4
     a96:	4b08      	ldr	r3, [pc, #32]	; (ab8 <_spi_dev_error+0x34>)
     a98:	4798      	blx	r3
	_spi_m_async_enable_tx_complete(dev, false);
     a9a:	2100      	movs	r1, #0
     a9c:	4620      	mov	r0, r4
     a9e:	4b07      	ldr	r3, [pc, #28]	; (abc <_spi_dev_error+0x38>)
     aa0:	4798      	blx	r3
	spi->stat = 0;
     aa2:	2300      	movs	r3, #0
     aa4:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	if (spi->callbacks.cb_error) {
     aa8:	6b23      	ldr	r3, [r4, #48]	; 0x30
     aaa:	b113      	cbz	r3, ab2 <_spi_dev_error+0x2e>
		spi->callbacks.cb_error(spi, status);
     aac:	4631      	mov	r1, r6
     aae:	4628      	mov	r0, r5
     ab0:	4798      	blx	r3
     ab2:	bd70      	pop	{r4, r5, r6, pc}
     ab4:	00001bb9 	.word	0x00001bb9
     ab8:	00001bed 	.word	0x00001bed
     abc:	00001c2d 	.word	0x00001c2d

00000ac0 <_spi_dev_complete>:
	if (spi->xfercnt >= spi->xfer.size) {
     ac0:	6c02      	ldr	r2, [r0, #64]	; 0x40
     ac2:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
     ac4:	429a      	cmp	r2, r3
     ac6:	d200      	bcs.n	aca <_spi_dev_complete+0xa>
     ac8:	4770      	bx	lr
{
     aca:	b510      	push	{r4, lr}
     acc:	4604      	mov	r4, r0
		_spi_m_async_enable_tx_complete(dev, false);
     ace:	2100      	movs	r1, #0
     ad0:	4b04      	ldr	r3, [pc, #16]	; (ae4 <_spi_dev_complete+0x24>)
     ad2:	4798      	blx	r3
		spi->stat = 0;
     ad4:	2300      	movs	r3, #0
     ad6:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (spi->callbacks.cb_xfer) {
     ada:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     adc:	b10b      	cbz	r3, ae2 <_spi_dev_complete+0x22>
			spi->callbacks.cb_xfer(spi);
     ade:	1f20      	subs	r0, r4, #4
     ae0:	4798      	blx	r3
     ae2:	bd10      	pop	{r4, pc}
     ae4:	00001c2d 	.word	0x00001c2d

00000ae8 <_spi_dev_tx>:
{
     ae8:	b510      	push	{r4, lr}
     aea:	4604      	mov	r4, r0
	if (!(dev->char_size > 1)) {
     aec:	7903      	ldrb	r3, [r0, #4]
     aee:	2b01      	cmp	r3, #1
		_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt++]);
     af0:	6b42      	ldr	r2, [r0, #52]	; 0x34
     af2:	6c03      	ldr	r3, [r0, #64]	; 0x40
     af4:	f103 0101 	add.w	r1, r3, #1
     af8:	6401      	str	r1, [r0, #64]	; 0x40
     afa:	bf94      	ite	ls
     afc:	5cd1      	ldrbls	r1, [r2, r3]
		_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt++]);
     afe:	f832 1013 	ldrhhi.w	r1, [r2, r3, lsl #1]
     b02:	4b08      	ldr	r3, [pc, #32]	; (b24 <_spi_dev_tx+0x3c>)
     b04:	4798      	blx	r3
	if (spi->xfercnt == spi->xfer.size) {
     b06:	6c22      	ldr	r2, [r4, #64]	; 0x40
     b08:	6be3      	ldr	r3, [r4, #60]	; 0x3c
     b0a:	429a      	cmp	r2, r3
     b0c:	d000      	beq.n	b10 <_spi_dev_tx+0x28>
     b0e:	bd10      	pop	{r4, pc}
		_spi_m_async_enable_tx(dev, false);
     b10:	2100      	movs	r1, #0
     b12:	4620      	mov	r0, r4
     b14:	4b04      	ldr	r3, [pc, #16]	; (b28 <_spi_dev_tx+0x40>)
     b16:	4798      	blx	r3
		_spi_m_async_enable_tx_complete(dev, true);
     b18:	2101      	movs	r1, #1
     b1a:	4620      	mov	r0, r4
     b1c:	4b03      	ldr	r3, [pc, #12]	; (b2c <_spi_dev_tx+0x44>)
     b1e:	4798      	blx	r3
}
     b20:	e7f5      	b.n	b0e <_spi_dev_tx+0x26>
     b22:	bf00      	nop
     b24:	00001c69 	.word	0x00001c69
     b28:	00001bb9 	.word	0x00001bb9
     b2c:	00001c2d 	.word	0x00001c2d

00000b30 <_spi_dev_rx>:
{
     b30:	b570      	push	{r4, r5, r6, lr}
     b32:	4604      	mov	r4, r0
	if (spi->xfer.rxbuf) {
     b34:	6b85      	ldr	r5, [r0, #56]	; 0x38
     b36:	b305      	cbz	r5, b7a <_spi_dev_rx+0x4a>
		if (!(dev->char_size > 1)) {
     b38:	7903      	ldrb	r3, [r0, #4]
     b3a:	2b01      	cmp	r3, #1
     b3c:	d916      	bls.n	b6c <_spi_dev_rx+0x3c>
			((uint16_t *)spi->xfer.rxbuf)[spi->xfercnt++] = (uint16_t)_spi_m_async_read_one(dev);
     b3e:	6c06      	ldr	r6, [r0, #64]	; 0x40
     b40:	1c73      	adds	r3, r6, #1
     b42:	6403      	str	r3, [r0, #64]	; 0x40
     b44:	4b18      	ldr	r3, [pc, #96]	; (ba8 <_spi_dev_rx+0x78>)
     b46:	4798      	blx	r3
     b48:	f825 0016 	strh.w	r0, [r5, r6, lsl #1]
	if (spi->xfercnt < spi->xfer.size) {
     b4c:	6c23      	ldr	r3, [r4, #64]	; 0x40
     b4e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
     b50:	4293      	cmp	r3, r2
     b52:	d21d      	bcs.n	b90 <_spi_dev_rx+0x60>
		if (spi->xfer.txbuf) {
     b54:	6b62      	ldr	r2, [r4, #52]	; 0x34
     b56:	b1b2      	cbz	r2, b86 <_spi_dev_rx+0x56>
			if (!(dev->char_size > 1)) {
     b58:	7921      	ldrb	r1, [r4, #4]
     b5a:	2901      	cmp	r1, #1
				_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt]);
     b5c:	bf94      	ite	ls
     b5e:	5cd1      	ldrbls	r1, [r2, r3]
				_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt]);
     b60:	f832 1013 	ldrhhi.w	r1, [r2, r3, lsl #1]
     b64:	4620      	mov	r0, r4
     b66:	4b11      	ldr	r3, [pc, #68]	; (bac <_spi_dev_rx+0x7c>)
     b68:	4798      	blx	r3
     b6a:	bd70      	pop	{r4, r5, r6, pc}
			spi->xfer.rxbuf[spi->xfercnt++] = (uint8_t)_spi_m_async_read_one(dev);
     b6c:	6c06      	ldr	r6, [r0, #64]	; 0x40
     b6e:	1c73      	adds	r3, r6, #1
     b70:	6403      	str	r3, [r0, #64]	; 0x40
     b72:	4b0d      	ldr	r3, [pc, #52]	; (ba8 <_spi_dev_rx+0x78>)
     b74:	4798      	blx	r3
     b76:	55a8      	strb	r0, [r5, r6]
     b78:	e7e8      	b.n	b4c <_spi_dev_rx+0x1c>
		_spi_m_async_read_one(dev);
     b7a:	4b0b      	ldr	r3, [pc, #44]	; (ba8 <_spi_dev_rx+0x78>)
     b7c:	4798      	blx	r3
		spi->xfercnt++;
     b7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
     b80:	3301      	adds	r3, #1
     b82:	6423      	str	r3, [r4, #64]	; 0x40
     b84:	e7e2      	b.n	b4c <_spi_dev_rx+0x1c>
			_spi_m_async_write_one(dev, dev->dummy_byte);
     b86:	88e1      	ldrh	r1, [r4, #6]
     b88:	4620      	mov	r0, r4
     b8a:	4b08      	ldr	r3, [pc, #32]	; (bac <_spi_dev_rx+0x7c>)
     b8c:	4798      	blx	r3
     b8e:	bd70      	pop	{r4, r5, r6, pc}
		_spi_m_async_enable_rx(dev, false);
     b90:	2100      	movs	r1, #0
     b92:	4620      	mov	r0, r4
     b94:	4b06      	ldr	r3, [pc, #24]	; (bb0 <_spi_dev_rx+0x80>)
     b96:	4798      	blx	r3
		spi->stat = 0;
     b98:	2300      	movs	r3, #0
     b9a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (spi->callbacks.cb_xfer) {
     b9e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     ba0:	b10b      	cbz	r3, ba6 <_spi_dev_rx+0x76>
			spi->callbacks.cb_xfer(spi);
     ba2:	1f20      	subs	r0, r4, #4
     ba4:	4798      	blx	r3
     ba6:	bd70      	pop	{r4, r5, r6, pc}
     ba8:	00001c99 	.word	0x00001c99
     bac:	00001c69 	.word	0x00001c69
     bb0:	00001bed 	.word	0x00001bed

00000bb4 <spi_m_async_init>:
{
     bb4:	b570      	push	{r4, r5, r6, lr}
     bb6:	460d      	mov	r5, r1
	ASSERT(spi && hw);
     bb8:	4606      	mov	r6, r0
     bba:	b330      	cbz	r0, c0a <spi_m_async_init+0x56>
     bbc:	1c08      	adds	r0, r1, #0
     bbe:	bf18      	it	ne
     bc0:	2001      	movne	r0, #1
     bc2:	22a5      	movs	r2, #165	; 0xa5
     bc4:	4912      	ldr	r1, [pc, #72]	; (c10 <spi_m_async_init+0x5c>)
     bc6:	4b13      	ldr	r3, [pc, #76]	; (c14 <spi_m_async_init+0x60>)
     bc8:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
     bca:	4634      	mov	r4, r6
     bcc:	f844 5f04 	str.w	r5, [r4, #4]!
	rc            = _spi_m_async_init(&spi->dev, hw);
     bd0:	4629      	mov	r1, r5
     bd2:	4620      	mov	r0, r4
     bd4:	4b10      	ldr	r3, [pc, #64]	; (c18 <spi_m_async_init+0x64>)
     bd6:	4798      	blx	r3
	if (rc >= 0) {
     bd8:	2800      	cmp	r0, #0
     bda:	db15      	blt.n	c08 <spi_m_async_init+0x54>
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_TX, (FUNC_PTR)_spi_dev_tx);
     bdc:	4a0f      	ldr	r2, [pc, #60]	; (c1c <spi_m_async_init+0x68>)
     bde:	2100      	movs	r1, #0
     be0:	4620      	mov	r0, r4
     be2:	4d0f      	ldr	r5, [pc, #60]	; (c20 <spi_m_async_init+0x6c>)
     be4:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_RX, (FUNC_PTR)_spi_dev_rx);
     be6:	4a0f      	ldr	r2, [pc, #60]	; (c24 <spi_m_async_init+0x70>)
     be8:	2101      	movs	r1, #1
     bea:	4620      	mov	r0, r4
     bec:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_COMPLETE, (FUNC_PTR)_spi_dev_complete);
     bee:	4a0e      	ldr	r2, [pc, #56]	; (c28 <spi_m_async_init+0x74>)
     bf0:	2102      	movs	r1, #2
     bf2:	4620      	mov	r0, r4
     bf4:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_ERROR, (FUNC_PTR)_spi_dev_error);
     bf6:	4a0d      	ldr	r2, [pc, #52]	; (c2c <spi_m_async_init+0x78>)
     bf8:	2103      	movs	r1, #3
     bfa:	4620      	mov	r0, r4
     bfc:	47a8      	blx	r5
	spi->io.read  = _spi_m_async_io_read;
     bfe:	4b0c      	ldr	r3, [pc, #48]	; (c30 <spi_m_async_init+0x7c>)
     c00:	62b3      	str	r3, [r6, #40]	; 0x28
	spi->io.write = _spi_m_async_io_write;
     c02:	4b0c      	ldr	r3, [pc, #48]	; (c34 <spi_m_async_init+0x80>)
     c04:	6273      	str	r3, [r6, #36]	; 0x24
	return ERR_NONE;
     c06:	2000      	movs	r0, #0
}
     c08:	bd70      	pop	{r4, r5, r6, pc}
     c0a:	2000      	movs	r0, #0
     c0c:	e7d9      	b.n	bc2 <spi_m_async_init+0xe>
     c0e:	bf00      	nop
     c10:	000023c8 	.word	0x000023c8
     c14:	00000f79 	.word	0x00000f79
     c18:	00001b4d 	.word	0x00001b4d
     c1c:	00000ae9 	.word	0x00000ae9
     c20:	00001cc5 	.word	0x00001cc5
     c24:	00000b31 	.word	0x00000b31
     c28:	00000ac1 	.word	0x00000ac1
     c2c:	00000a85 	.word	0x00000a85
     c30:	00000a35 	.word	0x00000a35
     c34:	000009f5 	.word	0x000009f5

00000c38 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
     c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     c3a:	4684      	mov	ip, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
     c3c:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
     c3e:	b12f      	cbz	r7, c4c <timer_add_timer_task+0x14>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
     c40:	688d      	ldr	r5, [r1, #8]
     c42:	463c      	mov	r4, r7
     c44:	2600      	movs	r6, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     c46:	f1c2 0e01 	rsb	lr, r2, #1
     c4a:	e00b      	b.n	c64 <timer_add_timer_task+0x2c>
		list_insert_as_head(list, new_task);
     c4c:	4b0e      	ldr	r3, [pc, #56]	; (c88 <timer_add_timer_task+0x50>)
     c4e:	4798      	blx	r3
		return;
     c50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     c52:	4473      	add	r3, lr
     c54:	68a0      	ldr	r0, [r4, #8]
     c56:	4403      	add	r3, r0
		if (time_left >= new_task->interval)
     c58:	42ab      	cmp	r3, r5
     c5a:	d20a      	bcs.n	c72 <timer_add_timer_task+0x3a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
     c5c:	6823      	ldr	r3, [r4, #0]
     c5e:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
     c60:	b153      	cbz	r3, c78 <timer_add_timer_task+0x40>
     c62:	461c      	mov	r4, r3
		if (it->time_label <= time) {
     c64:	6863      	ldr	r3, [r4, #4]
     c66:	4293      	cmp	r3, r2
     c68:	d8f3      	bhi.n	c52 <timer_add_timer_task+0x1a>
			time_left = it->interval - (time - it->time_label);
     c6a:	68a0      	ldr	r0, [r4, #8]
     c6c:	4403      	add	r3, r0
     c6e:	1a9b      	subs	r3, r3, r2
     c70:	e7f2      	b.n	c58 <timer_add_timer_task+0x20>
			break;
		prev = it;
	}

	if (it == head) {
     c72:	42a7      	cmp	r7, r4
     c74:	d004      	beq.n	c80 <timer_add_timer_task+0x48>
     c76:	4634      	mov	r4, r6
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
     c78:	4620      	mov	r0, r4
     c7a:	4b04      	ldr	r3, [pc, #16]	; (c8c <timer_add_timer_task+0x54>)
     c7c:	4798      	blx	r3
     c7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
     c80:	4660      	mov	r0, ip
     c82:	4b01      	ldr	r3, [pc, #4]	; (c88 <timer_add_timer_task+0x50>)
     c84:	4798      	blx	r3
     c86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     c88:	00000fa1 	.word	0x00000fa1
     c8c:	00000fcd 	.word	0x00000fcd

00000c90 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
     c90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return (void *)list->head;
     c94:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
     c96:	6907      	ldr	r7, [r0, #16]
     c98:	3701      	adds	r7, #1
     c9a:	6107      	str	r7, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
     c9c:	7e03      	ldrb	r3, [r0, #24]
     c9e:	f013 0f01 	tst.w	r3, #1
     ca2:	d113      	bne.n	ccc <timer_process_counted+0x3c>
     ca4:	7e03      	ldrb	r3, [r0, #24]
     ca6:	f013 0f02 	tst.w	r3, #2
     caa:	d10f      	bne.n	ccc <timer_process_counted+0x3c>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
     cac:	b354      	cbz	r4, d04 <timer_process_counted+0x74>
     cae:	6863      	ldr	r3, [r4, #4]
     cb0:	1afb      	subs	r3, r7, r3
     cb2:	68a2      	ldr	r2, [r4, #8]
     cb4:	4293      	cmp	r3, r2
     cb6:	d307      	bcc.n	cc8 <timer_process_counted+0x38>
     cb8:	4606      	mov	r6, r0
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
     cba:	f100 0814 	add.w	r8, r0, #20
     cbe:	f8df 9048 	ldr.w	r9, [pc, #72]	; d08 <timer_process_counted+0x78>
		if (TIMER_TASK_REPEAT == tmp->mode) {
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
     cc2:	f8df a048 	ldr.w	sl, [pc, #72]	; d0c <timer_process_counted+0x7c>
     cc6:	e012      	b.n	cee <timer_process_counted+0x5e>
     cc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
     ccc:	7e03      	ldrb	r3, [r0, #24]
     cce:	f043 0302 	orr.w	r3, r3, #2
     cd2:	7603      	strb	r3, [r0, #24]
		return;
     cd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     cd8:	6975      	ldr	r5, [r6, #20]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
     cda:	68e3      	ldr	r3, [r4, #12]
     cdc:	4620      	mov	r0, r4
     cde:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
     ce0:	b185      	cbz	r5, d04 <timer_process_counted+0x74>
		it = (struct timer_task *)list_get_head(&timer->tasks);
     ce2:	462c      	mov	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
     ce4:	686b      	ldr	r3, [r5, #4]
     ce6:	1afb      	subs	r3, r7, r3
     ce8:	68aa      	ldr	r2, [r5, #8]
     cea:	4293      	cmp	r3, r2
     cec:	d30a      	bcc.n	d04 <timer_process_counted+0x74>
		list_remove_head(&timer->tasks);
     cee:	4640      	mov	r0, r8
     cf0:	47c8      	blx	r9
		if (TIMER_TASK_REPEAT == tmp->mode) {
     cf2:	7c23      	ldrb	r3, [r4, #16]
     cf4:	2b01      	cmp	r3, #1
     cf6:	d1ef      	bne.n	cd8 <timer_process_counted+0x48>
			tmp->time_label = time;
     cf8:	6067      	str	r7, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
     cfa:	463a      	mov	r2, r7
     cfc:	4621      	mov	r1, r4
     cfe:	4640      	mov	r0, r8
     d00:	47d0      	blx	sl
     d02:	e7e9      	b.n	cd8 <timer_process_counted+0x48>
     d04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     d08:	00000fd5 	.word	0x00000fd5
     d0c:	00000c39 	.word	0x00000c39

00000d10 <timer_init>:
{
     d10:	b538      	push	{r3, r4, r5, lr}
     d12:	460d      	mov	r5, r1
	ASSERT(descr && hw);
     d14:	4604      	mov	r4, r0
     d16:	b178      	cbz	r0, d38 <timer_init+0x28>
     d18:	1c08      	adds	r0, r1, #0
     d1a:	bf18      	it	ne
     d1c:	2001      	movne	r0, #1
     d1e:	223b      	movs	r2, #59	; 0x3b
     d20:	4906      	ldr	r1, [pc, #24]	; (d3c <timer_init+0x2c>)
     d22:	4b07      	ldr	r3, [pc, #28]	; (d40 <timer_init+0x30>)
     d24:	4798      	blx	r3
	_timer_init(&descr->device, hw);
     d26:	4629      	mov	r1, r5
     d28:	4620      	mov	r0, r4
     d2a:	4b06      	ldr	r3, [pc, #24]	; (d44 <timer_init+0x34>)
     d2c:	4798      	blx	r3
	descr->time                           = 0;
     d2e:	2000      	movs	r0, #0
     d30:	6120      	str	r0, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
     d32:	4b05      	ldr	r3, [pc, #20]	; (d48 <timer_init+0x38>)
     d34:	6023      	str	r3, [r4, #0]
}
     d36:	bd38      	pop	{r3, r4, r5, pc}
     d38:	2000      	movs	r0, #0
     d3a:	e7f0      	b.n	d1e <timer_init+0xe>
     d3c:	000023e8 	.word	0x000023e8
     d40:	00000f79 	.word	0x00000f79
     d44:	00001d71 	.word	0x00001d71
     d48:	00000c91 	.word	0x00000c91

00000d4c <timer_start>:
{
     d4c:	b510      	push	{r4, lr}
	ASSERT(descr);
     d4e:	4604      	mov	r4, r0
     d50:	2253      	movs	r2, #83	; 0x53
     d52:	4909      	ldr	r1, [pc, #36]	; (d78 <timer_start+0x2c>)
     d54:	3000      	adds	r0, #0
     d56:	bf18      	it	ne
     d58:	2001      	movne	r0, #1
     d5a:	4b08      	ldr	r3, [pc, #32]	; (d7c <timer_start+0x30>)
     d5c:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
     d5e:	4620      	mov	r0, r4
     d60:	4b07      	ldr	r3, [pc, #28]	; (d80 <timer_start+0x34>)
     d62:	4798      	blx	r3
     d64:	b920      	cbnz	r0, d70 <timer_start+0x24>
	_timer_start(&descr->device);
     d66:	4620      	mov	r0, r4
     d68:	4b06      	ldr	r3, [pc, #24]	; (d84 <timer_start+0x38>)
     d6a:	4798      	blx	r3
	return ERR_NONE;
     d6c:	2000      	movs	r0, #0
     d6e:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
     d70:	f06f 0010 	mvn.w	r0, #16
}
     d74:	bd10      	pop	{r4, pc}
     d76:	bf00      	nop
     d78:	000023e8 	.word	0x000023e8
     d7c:	00000f79 	.word	0x00000f79
     d80:	0000215d 	.word	0x0000215d
     d84:	000020c1 	.word	0x000020c1

00000d88 <timer_add_task>:
{
     d88:	b570      	push	{r4, r5, r6, lr}
     d8a:	b082      	sub	sp, #8
     d8c:	460d      	mov	r5, r1
	ASSERT(descr && task);
     d8e:	4604      	mov	r4, r0
     d90:	b318      	cbz	r0, dda <timer_add_task+0x52>
     d92:	1c08      	adds	r0, r1, #0
     d94:	bf18      	it	ne
     d96:	2001      	movne	r0, #1
     d98:	227a      	movs	r2, #122	; 0x7a
     d9a:	491e      	ldr	r1, [pc, #120]	; (e14 <timer_add_task+0x8c>)
     d9c:	4b1e      	ldr	r3, [pc, #120]	; (e18 <timer_add_task+0x90>)
     d9e:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
     da0:	7e23      	ldrb	r3, [r4, #24]
     da2:	f043 0301 	orr.w	r3, r3, #1
     da6:	7623      	strb	r3, [r4, #24]
	if (is_list_element(&descr->tasks, task)) {
     da8:	f104 0614 	add.w	r6, r4, #20
     dac:	4629      	mov	r1, r5
     dae:	4630      	mov	r0, r6
     db0:	4b1a      	ldr	r3, [pc, #104]	; (e1c <timer_add_task+0x94>)
     db2:	4798      	blx	r3
     db4:	b998      	cbnz	r0, dde <timer_add_task+0x56>
	task->time_label = descr->time;
     db6:	6923      	ldr	r3, [r4, #16]
     db8:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
     dba:	6922      	ldr	r2, [r4, #16]
     dbc:	4629      	mov	r1, r5
     dbe:	4630      	mov	r0, r6
     dc0:	4b17      	ldr	r3, [pc, #92]	; (e20 <timer_add_task+0x98>)
     dc2:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
     dc4:	7e23      	ldrb	r3, [r4, #24]
     dc6:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
     dca:	7623      	strb	r3, [r4, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
     dcc:	7e23      	ldrb	r3, [r4, #24]
     dce:	f013 0f02 	tst.w	r3, #2
     dd2:	d110      	bne.n	df6 <timer_add_task+0x6e>
	return ERR_NONE;
     dd4:	2000      	movs	r0, #0
}
     dd6:	b002      	add	sp, #8
     dd8:	bd70      	pop	{r4, r5, r6, pc}
     dda:	2000      	movs	r0, #0
     ddc:	e7dc      	b.n	d98 <timer_add_task+0x10>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
     dde:	7e23      	ldrb	r3, [r4, #24]
     de0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
     de4:	7623      	strb	r3, [r4, #24]
		ASSERT(false);
     de6:	227f      	movs	r2, #127	; 0x7f
     de8:	490a      	ldr	r1, [pc, #40]	; (e14 <timer_add_task+0x8c>)
     dea:	2000      	movs	r0, #0
     dec:	4b0a      	ldr	r3, [pc, #40]	; (e18 <timer_add_task+0x90>)
     dee:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
     df0:	f06f 0011 	mvn.w	r0, #17
     df4:	e7ef      	b.n	dd6 <timer_add_task+0x4e>
		CRITICAL_SECTION_ENTER()
     df6:	a801      	add	r0, sp, #4
     df8:	4b0a      	ldr	r3, [pc, #40]	; (e24 <timer_add_task+0x9c>)
     dfa:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
     dfc:	7e23      	ldrb	r3, [r4, #24]
     dfe:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
     e02:	7623      	strb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
     e04:	4620      	mov	r0, r4
     e06:	4b08      	ldr	r3, [pc, #32]	; (e28 <timer_add_task+0xa0>)
     e08:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
     e0a:	a801      	add	r0, sp, #4
     e0c:	4b07      	ldr	r3, [pc, #28]	; (e2c <timer_add_task+0xa4>)
     e0e:	4798      	blx	r3
	return ERR_NONE;
     e10:	2000      	movs	r0, #0
     e12:	e7e0      	b.n	dd6 <timer_add_task+0x4e>
     e14:	000023e8 	.word	0x000023e8
     e18:	00000f79 	.word	0x00000f79
     e1c:	00000f7f 	.word	0x00000f7f
     e20:	00000c39 	.word	0x00000c39
     e24:	000008d9 	.word	0x000008d9
     e28:	00002189 	.word	0x00002189
     e2c:	000008e7 	.word	0x000008e7

00000e30 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     e30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     e34:	460f      	mov	r7, r1
     e36:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     e38:	4604      	mov	r4, r0
     e3a:	b328      	cbz	r0, e88 <usart_sync_write+0x58>
     e3c:	b331      	cbz	r1, e8c <usart_sync_write+0x5c>
     e3e:	1c10      	adds	r0, r2, #0
     e40:	bf18      	it	ne
     e42:	2001      	movne	r0, #1
     e44:	22f1      	movs	r2, #241	; 0xf1
     e46:	4912      	ldr	r1, [pc, #72]	; (e90 <usart_sync_write+0x60>)
     e48:	4b12      	ldr	r3, [pc, #72]	; (e94 <usart_sync_write+0x64>)
     e4a:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
     e4c:	3408      	adds	r4, #8
     e4e:	4d12      	ldr	r5, [pc, #72]	; (e98 <usart_sync_write+0x68>)
     e50:	4620      	mov	r0, r4
     e52:	47a8      	blx	r5
     e54:	2800      	cmp	r0, #0
     e56:	d0fb      	beq.n	e50 <usart_sync_write+0x20>
     e58:	3f01      	subs	r7, #1
     e5a:	2600      	movs	r6, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
     e5c:	f8df 9040 	ldr.w	r9, [pc, #64]	; ea0 <usart_sync_write+0x70>
		while (!_usart_sync_is_ready_to_send(&descr->device))
     e60:	4d0d      	ldr	r5, [pc, #52]	; (e98 <usart_sync_write+0x68>)
		_usart_sync_write_byte(&descr->device, buf[offset]);
     e62:	f817 1f01 	ldrb.w	r1, [r7, #1]!
     e66:	4620      	mov	r0, r4
     e68:	47c8      	blx	r9
		while (!_usart_sync_is_ready_to_send(&descr->device))
     e6a:	4620      	mov	r0, r4
     e6c:	47a8      	blx	r5
     e6e:	2800      	cmp	r0, #0
     e70:	d0fb      	beq.n	e6a <usart_sync_write+0x3a>
			;
	} while (++offset < length);
     e72:	3601      	adds	r6, #1
     e74:	4546      	cmp	r6, r8
     e76:	d3f4      	bcc.n	e62 <usart_sync_write+0x32>
	while (!_usart_sync_is_transmit_done(&descr->device))
     e78:	4d08      	ldr	r5, [pc, #32]	; (e9c <usart_sync_write+0x6c>)
     e7a:	4620      	mov	r0, r4
     e7c:	47a8      	blx	r5
     e7e:	2800      	cmp	r0, #0
     e80:	d0fb      	beq.n	e7a <usart_sync_write+0x4a>
		;
	return (int32_t)offset;
}
     e82:	4630      	mov	r0, r6
     e84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(io_descr && buf && length);
     e88:	2000      	movs	r0, #0
     e8a:	e7db      	b.n	e44 <usart_sync_write+0x14>
     e8c:	2000      	movs	r0, #0
     e8e:	e7d9      	b.n	e44 <usart_sync_write+0x14>
     e90:	00002400 	.word	0x00002400
     e94:	00000f79 	.word	0x00000f79
     e98:	000019eb 	.word	0x000019eb
     e9c:	000019f5 	.word	0x000019f5
     ea0:	000019dd 	.word	0x000019dd

00000ea4 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     ea4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     ea8:	460f      	mov	r7, r1
     eaa:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     eac:	4604      	mov	r4, r0
     eae:	b1e0      	cbz	r0, eea <usart_sync_read+0x46>
     eb0:	b1e9      	cbz	r1, eee <usart_sync_read+0x4a>
     eb2:	1c10      	adds	r0, r2, #0
     eb4:	bf18      	it	ne
     eb6:	2001      	movne	r0, #1
     eb8:	f44f 7286 	mov.w	r2, #268	; 0x10c
     ebc:	490d      	ldr	r1, [pc, #52]	; (ef4 <usart_sync_read+0x50>)
     ebe:	4b0e      	ldr	r3, [pc, #56]	; (ef8 <usart_sync_read+0x54>)
     ec0:	4798      	blx	r3
     ec2:	3f01      	subs	r7, #1
	uint32_t                      offset = 0;
     ec4:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
     ec6:	3408      	adds	r4, #8
     ec8:	4d0c      	ldr	r5, [pc, #48]	; (efc <usart_sync_read+0x58>)
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
     eca:	f8df 9034 	ldr.w	r9, [pc, #52]	; f00 <usart_sync_read+0x5c>
		while (!_usart_sync_is_byte_received(&descr->device))
     ece:	4620      	mov	r0, r4
     ed0:	47a8      	blx	r5
     ed2:	2800      	cmp	r0, #0
     ed4:	d0fb      	beq.n	ece <usart_sync_read+0x2a>
		buf[offset] = _usart_sync_read_byte(&descr->device);
     ed6:	4620      	mov	r0, r4
     ed8:	47c8      	blx	r9
     eda:	f807 0f01 	strb.w	r0, [r7, #1]!
	} while (++offset < length);
     ede:	3601      	adds	r6, #1
     ee0:	4546      	cmp	r6, r8
     ee2:	d3f4      	bcc.n	ece <usart_sync_read+0x2a>

	return (int32_t)offset;
}
     ee4:	4630      	mov	r0, r6
     ee6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(io_descr && buf && length);
     eea:	2000      	movs	r0, #0
     eec:	e7e4      	b.n	eb8 <usart_sync_read+0x14>
     eee:	2000      	movs	r0, #0
     ef0:	e7e2      	b.n	eb8 <usart_sync_read+0x14>
     ef2:	bf00      	nop
     ef4:	00002400 	.word	0x00002400
     ef8:	00000f79 	.word	0x00000f79
     efc:	000019ff 	.word	0x000019ff
     f00:	000019e3 	.word	0x000019e3

00000f04 <usart_sync_init>:
{
     f04:	b538      	push	{r3, r4, r5, lr}
     f06:	460d      	mov	r5, r1
	ASSERT(descr && hw);
     f08:	4604      	mov	r4, r0
     f0a:	b198      	cbz	r0, f34 <usart_sync_init+0x30>
     f0c:	1c08      	adds	r0, r1, #0
     f0e:	bf18      	it	ne
     f10:	2001      	movne	r0, #1
     f12:	2234      	movs	r2, #52	; 0x34
     f14:	4908      	ldr	r1, [pc, #32]	; (f38 <usart_sync_init+0x34>)
     f16:	4b09      	ldr	r3, [pc, #36]	; (f3c <usart_sync_init+0x38>)
     f18:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
     f1a:	4629      	mov	r1, r5
     f1c:	f104 0008 	add.w	r0, r4, #8
     f20:	4b07      	ldr	r3, [pc, #28]	; (f40 <usart_sync_init+0x3c>)
     f22:	4798      	blx	r3
	if (init_status) {
     f24:	4603      	mov	r3, r0
     f26:	b918      	cbnz	r0, f30 <usart_sync_init+0x2c>
	descr->io.read  = usart_sync_read;
     f28:	4a06      	ldr	r2, [pc, #24]	; (f44 <usart_sync_init+0x40>)
     f2a:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_sync_write;
     f2c:	4a06      	ldr	r2, [pc, #24]	; (f48 <usart_sync_init+0x44>)
     f2e:	6022      	str	r2, [r4, #0]
}
     f30:	4618      	mov	r0, r3
     f32:	bd38      	pop	{r3, r4, r5, pc}
     f34:	2000      	movs	r0, #0
     f36:	e7ec      	b.n	f12 <usart_sync_init+0xe>
     f38:	00002400 	.word	0x00002400
     f3c:	00000f79 	.word	0x00000f79
     f40:	0000199d 	.word	0x0000199d
     f44:	00000ea5 	.word	0x00000ea5
     f48:	00000e31 	.word	0x00000e31

00000f4c <usart_sync_enable>:
{
     f4c:	b510      	push	{r4, lr}
	ASSERT(descr);
     f4e:	4604      	mov	r4, r0
     f50:	2253      	movs	r2, #83	; 0x53
     f52:	4906      	ldr	r1, [pc, #24]	; (f6c <usart_sync_enable+0x20>)
     f54:	3000      	adds	r0, #0
     f56:	bf18      	it	ne
     f58:	2001      	movne	r0, #1
     f5a:	4b05      	ldr	r3, [pc, #20]	; (f70 <usart_sync_enable+0x24>)
     f5c:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
     f5e:	f104 0008 	add.w	r0, r4, #8
     f62:	4b04      	ldr	r3, [pc, #16]	; (f74 <usart_sync_enable+0x28>)
     f64:	4798      	blx	r3
}
     f66:	2000      	movs	r0, #0
     f68:	bd10      	pop	{r4, pc}
     f6a:	bf00      	nop
     f6c:	00002400 	.word	0x00002400
     f70:	00000f79 	.word	0x00000f79
     f74:	000019c9 	.word	0x000019c9

00000f78 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     f78:	b900      	cbnz	r0, f7c <assert+0x4>
		__asm("BKPT #0");
     f7a:	be00      	bkpt	0x0000
     f7c:	4770      	bx	lr

00000f7e <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
     f7e:	6803      	ldr	r3, [r0, #0]
     f80:	b14b      	cbz	r3, f96 <is_list_element+0x18>
		if (it == element) {
     f82:	428b      	cmp	r3, r1
     f84:	d009      	beq.n	f9a <is_list_element+0x1c>
	for (it = list->head; it; it = it->next) {
     f86:	681b      	ldr	r3, [r3, #0]
     f88:	b11b      	cbz	r3, f92 <is_list_element+0x14>
		if (it == element) {
     f8a:	4299      	cmp	r1, r3
     f8c:	d1fb      	bne.n	f86 <is_list_element+0x8>
			return true;
     f8e:	2001      	movs	r0, #1
		}
	}

	return false;
}
     f90:	4770      	bx	lr
	return false;
     f92:	2000      	movs	r0, #0
     f94:	4770      	bx	lr
     f96:	2000      	movs	r0, #0
     f98:	4770      	bx	lr
			return true;
     f9a:	2001      	movs	r0, #1
     f9c:	4770      	bx	lr
	...

00000fa0 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
     fa0:	b538      	push	{r3, r4, r5, lr}
     fa2:	4604      	mov	r4, r0
     fa4:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
     fa6:	4b06      	ldr	r3, [pc, #24]	; (fc0 <list_insert_as_head+0x20>)
     fa8:	4798      	blx	r3
     faa:	f080 0001 	eor.w	r0, r0, #1
     fae:	2239      	movs	r2, #57	; 0x39
     fb0:	4904      	ldr	r1, [pc, #16]	; (fc4 <list_insert_as_head+0x24>)
     fb2:	b2c0      	uxtb	r0, r0
     fb4:	4b04      	ldr	r3, [pc, #16]	; (fc8 <list_insert_as_head+0x28>)
     fb6:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
     fb8:	6823      	ldr	r3, [r4, #0]
     fba:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
     fbc:	6025      	str	r5, [r4, #0]
     fbe:	bd38      	pop	{r3, r4, r5, pc}
     fc0:	00000f7f 	.word	0x00000f7f
     fc4:	0000241c 	.word	0x0000241c
     fc8:	00000f79 	.word	0x00000f79

00000fcc <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
     fcc:	6803      	ldr	r3, [r0, #0]
     fce:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
     fd0:	6001      	str	r1, [r0, #0]
     fd2:	4770      	bx	lr

00000fd4 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
     fd4:	6803      	ldr	r3, [r0, #0]
     fd6:	b10b      	cbz	r3, fdc <list_remove_head+0x8>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
     fd8:	681a      	ldr	r2, [r3, #0]
     fda:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
     fdc:	4618      	mov	r0, r3
     fde:	4770      	bx	lr

00000fe0 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
     fe0:	b570      	push	{r4, r5, r6, lr}
     fe2:	460e      	mov	r6, r1
     fe4:	4615      	mov	r5, r2
	ASSERT(rb && buf && size);
     fe6:	4604      	mov	r4, r0
     fe8:	b178      	cbz	r0, 100a <ringbuffer_init+0x2a>
     fea:	b181      	cbz	r1, 100e <ringbuffer_init+0x2e>
     fec:	b1a2      	cbz	r2, 1018 <ringbuffer_init+0x38>
     fee:	2001      	movs	r0, #1
     ff0:	2228      	movs	r2, #40	; 0x28
     ff2:	490d      	ldr	r1, [pc, #52]	; (1028 <ringbuffer_init+0x48>)
     ff4:	4b0d      	ldr	r3, [pc, #52]	; (102c <ringbuffer_init+0x4c>)
     ff6:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
     ff8:	1e6b      	subs	r3, r5, #1
     ffa:	421d      	tst	r5, r3
     ffc:	d109      	bne.n	1012 <ringbuffer_init+0x32>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
     ffe:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
    1000:	2000      	movs	r0, #0
    1002:	60a0      	str	r0, [r4, #8]
	rb->write_index = rb->read_index;
    1004:	60e0      	str	r0, [r4, #12]
	rb->buf         = (uint8_t *)buf;
    1006:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
    1008:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    100a:	2000      	movs	r0, #0
    100c:	e7f0      	b.n	ff0 <ringbuffer_init+0x10>
    100e:	2000      	movs	r0, #0
    1010:	e7ee      	b.n	ff0 <ringbuffer_init+0x10>
		return ERR_INVALID_ARG;
    1012:	f06f 000c 	mvn.w	r0, #12
    1016:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    1018:	2228      	movs	r2, #40	; 0x28
    101a:	4903      	ldr	r1, [pc, #12]	; (1028 <ringbuffer_init+0x48>)
    101c:	2000      	movs	r0, #0
    101e:	4b03      	ldr	r3, [pc, #12]	; (102c <ringbuffer_init+0x4c>)
    1020:	4798      	blx	r3
	if ((size & (size - 1)) != 0) {
    1022:	1e6b      	subs	r3, r5, #1
    1024:	e7eb      	b.n	ffe <ringbuffer_init+0x1e>
    1026:	bf00      	nop
    1028:	0000243c 	.word	0x0000243c
    102c:	00000f79 	.word	0x00000f79

00001030 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    1030:	b538      	push	{r3, r4, r5, lr}
    1032:	460d      	mov	r5, r1
	ASSERT(rb);
    1034:	4604      	mov	r4, r0
    1036:	2251      	movs	r2, #81	; 0x51
    1038:	490b      	ldr	r1, [pc, #44]	; (1068 <ringbuffer_put+0x38>)
    103a:	3000      	adds	r0, #0
    103c:	bf18      	it	ne
    103e:	2001      	movne	r0, #1
    1040:	4b0a      	ldr	r3, [pc, #40]	; (106c <ringbuffer_put+0x3c>)
    1042:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    1044:	68e3      	ldr	r3, [r4, #12]
    1046:	6862      	ldr	r2, [r4, #4]
    1048:	4013      	ands	r3, r2
    104a:	6822      	ldr	r2, [r4, #0]
    104c:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    104e:	68e3      	ldr	r3, [r4, #12]
    1050:	6861      	ldr	r1, [r4, #4]
    1052:	68a2      	ldr	r2, [r4, #8]
    1054:	1a9a      	subs	r2, r3, r2
    1056:	428a      	cmp	r2, r1
		rb->read_index = rb->write_index - rb->size;
    1058:	bf84      	itt	hi
    105a:	1a59      	subhi	r1, r3, r1
    105c:	60a1      	strhi	r1, [r4, #8]
	}

	rb->write_index++;
    105e:	3301      	adds	r3, #1
    1060:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
    1062:	2000      	movs	r0, #0
    1064:	bd38      	pop	{r3, r4, r5, pc}
    1066:	bf00      	nop
    1068:	0000243c 	.word	0x0000243c
    106c:	00000f79 	.word	0x00000f79

00001070 <_adc_get_irq_num>:
/**
 * \brief Retrieve ordinal number of the given adc hardware instance
 */
static uint8_t _adc_get_hardware_index(const void *const hw)
{
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    1070:	6940      	ldr	r0, [r0, #20]
    1072:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    1076:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
    107a:	0a80      	lsrs	r0, r0, #10
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _adc_get_irq_num(const struct _adc_async_device *const device)
{

	return ADC0_0_IRQn + (_adc_get_hardware_index(device->hw) << 1);
    107c:	0040      	lsls	r0, r0, #1
    107e:	3076      	adds	r0, #118	; 0x76
}
    1080:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    1084:	4770      	bx	lr
	...

00001088 <_adc_init>:
	};
}

static inline bool hri_adc_is_syncing(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
	return ((Adc *)hw)->SYNCBUSY.reg & reg;
    1088:	6b03      	ldr	r3, [r0, #48]	; 0x30
 * \param[in] i The number of hardware instance
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{

	if (!hri_adc_is_syncing(hw, ADC_SYNCBUSY_SWRST)) {
    108a:	f013 0f01 	tst.w	r3, #1
    108e:	d11b      	bne.n	10c8 <_adc_init+0x40>
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1090:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1092:	f013 0f03 	tst.w	r3, #3
    1096:	d1fb      	bne.n	1090 <_adc_init+0x8>

static inline hri_adc_ctrla_reg_t hri_adc_get_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t mask)
{
	uint16_t tmp;
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	tmp = ((Adc *)hw)->CTRLA.reg;
    1098:	8803      	ldrh	r3, [r0, #0]
		if (hri_adc_get_CTRLA_reg(hw, ADC_CTRLA_ENABLE)) {
    109a:	f013 0f02 	tst.w	r3, #2
    109e:	d00d      	beq.n	10bc <_adc_init+0x34>
	((Adc *)hw)->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
    10a0:	8803      	ldrh	r3, [r0, #0]
    10a2:	f023 0302 	bic.w	r3, r3, #2
    10a6:	041b      	lsls	r3, r3, #16
    10a8:	0c1b      	lsrs	r3, r3, #16
    10aa:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    10ac:	6b03      	ldr	r3, [r0, #48]	; 0x30
    10ae:	f013 0f03 	tst.w	r3, #3
    10b2:	d1fb      	bne.n	10ac <_adc_init+0x24>
    10b4:	6b03      	ldr	r3, [r0, #48]	; 0x30
    10b6:	f013 0f02 	tst.w	r3, #2
    10ba:	d1fb      	bne.n	10b4 <_adc_init+0x2c>
}

static inline void hri_adc_write_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg = data;
    10bc:	2301      	movs	r3, #1
    10be:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    10c0:	6b03      	ldr	r3, [r0, #48]	; 0x30
    10c2:	f013 0f03 	tst.w	r3, #3
    10c6:	d1fb      	bne.n	10c0 <_adc_init+0x38>
    10c8:	6b03      	ldr	r3, [r0, #48]	; 0x30
    10ca:	f013 0f01 	tst.w	r3, #1
    10ce:	d1fb      	bne.n	10c8 <_adc_init+0x40>
		}
		hri_adc_write_CTRLA_reg(hw, ADC_CTRLA_SWRST);
	}
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);

	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
    10d0:	2316      	movs	r3, #22
    10d2:	4a37      	ldr	r2, [pc, #220]	; (11b0 <_adc_init+0x128>)
    10d4:	fb03 2301 	mla	r3, r3, r1, r2
    10d8:	889b      	ldrh	r3, [r3, #4]
}

static inline void hri_adc_write_CTRLB_reg(const void *const hw, hri_adc_ctrlb_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLB.reg = data;
    10da:	80c3      	strh	r3, [r0, #6]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    10dc:	6b03      	ldr	r3, [r0, #48]	; 0x30
    10de:	f3c3 030b 	ubfx	r3, r3, #0, #12
    10e2:	2b00      	cmp	r3, #0
    10e4:	d1fa      	bne.n	10dc <_adc_init+0x54>
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
    10e6:	2316      	movs	r3, #22
    10e8:	4a31      	ldr	r2, [pc, #196]	; (11b0 <_adc_init+0x128>)
    10ea:	fb03 2301 	mla	r3, r3, r1, r2
    10ee:	799b      	ldrb	r3, [r3, #6]
}

static inline void hri_adc_write_REFCTRL_reg(const void *const hw, hri_adc_refctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->REFCTRL.reg = data;
    10f0:	7203      	strb	r3, [r0, #8]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    10f2:	6b03      	ldr	r3, [r0, #48]	; 0x30
    10f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
    10f8:	2b00      	cmp	r3, #0
    10fa:	d1fa      	bne.n	10f2 <_adc_init+0x6a>
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
    10fc:	2316      	movs	r3, #22
    10fe:	4a2c      	ldr	r2, [pc, #176]	; (11b0 <_adc_init+0x128>)
    1100:	fb03 2301 	mla	r3, r3, r1, r2
    1104:	79da      	ldrb	r2, [r3, #7]
	((Adc *)hw)->EVCTRL.reg = data;
    1106:	7082      	strb	r2, [r0, #2]
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
    1108:	891b      	ldrh	r3, [r3, #8]
	((Adc *)hw)->INPUTCTRL.reg = data;
    110a:	8083      	strh	r3, [r0, #4]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    110c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    110e:	f3c3 030b 	ubfx	r3, r3, #0, #12
    1112:	2b00      	cmp	r3, #0
    1114:	d1fa      	bne.n	110c <_adc_init+0x84>
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
    1116:	2316      	movs	r3, #22
    1118:	4a25      	ldr	r2, [pc, #148]	; (11b0 <_adc_init+0x128>)
    111a:	fb03 2301 	mla	r3, r3, r1, r2
    111e:	7a9b      	ldrb	r3, [r3, #10]
}

static inline void hri_adc_write_AVGCTRL_reg(const void *const hw, hri_adc_avgctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->AVGCTRL.reg = data;
    1120:	7283      	strb	r3, [r0, #10]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1122:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1124:	f3c3 030b 	ubfx	r3, r3, #0, #12
    1128:	2b00      	cmp	r3, #0
    112a:	d1fa      	bne.n	1122 <_adc_init+0x9a>
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
    112c:	2316      	movs	r3, #22
    112e:	4a20      	ldr	r2, [pc, #128]	; (11b0 <_adc_init+0x128>)
    1130:	fb03 2301 	mla	r3, r3, r1, r2
    1134:	7adb      	ldrb	r3, [r3, #11]
}

static inline void hri_adc_write_SAMPCTRL_reg(const void *const hw, hri_adc_sampctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SAMPCTRL.reg = data;
    1136:	72c3      	strb	r3, [r0, #11]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1138:	6b03      	ldr	r3, [r0, #48]	; 0x30
    113a:	f3c3 030b 	ubfx	r3, r3, #0, #12
    113e:	2b00      	cmp	r3, #0
    1140:	d1fa      	bne.n	1138 <_adc_init+0xb0>
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
    1142:	2316      	movs	r3, #22
    1144:	4a1a      	ldr	r2, [pc, #104]	; (11b0 <_adc_init+0x128>)
    1146:	fb03 2301 	mla	r3, r3, r1, r2
    114a:	899b      	ldrh	r3, [r3, #12]
}

static inline void hri_adc_write_WINLT_reg(const void *const hw, hri_adc_winlt_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINLT.reg = data;
    114c:	8183      	strh	r3, [r0, #12]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    114e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1150:	f013 0f80 	tst.w	r3, #128	; 0x80
    1154:	d1fb      	bne.n	114e <_adc_init+0xc6>
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
    1156:	2316      	movs	r3, #22
    1158:	4a15      	ldr	r2, [pc, #84]	; (11b0 <_adc_init+0x128>)
    115a:	fb03 2301 	mla	r3, r3, r1, r2
    115e:	89db      	ldrh	r3, [r3, #14]
}

static inline void hri_adc_write_WINUT_reg(const void *const hw, hri_adc_winut_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINUT.reg = data;
    1160:	81c3      	strh	r3, [r0, #14]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1162:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1164:	f413 7f80 	tst.w	r3, #256	; 0x100
    1168:	d1fb      	bne.n	1162 <_adc_init+0xda>
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
    116a:	2316      	movs	r3, #22
    116c:	4a10      	ldr	r2, [pc, #64]	; (11b0 <_adc_init+0x128>)
    116e:	fb03 2301 	mla	r3, r3, r1, r2
    1172:	8a1b      	ldrh	r3, [r3, #16]
}

static inline void hri_adc_write_GAINCORR_reg(const void *const hw, hri_adc_gaincorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->GAINCORR.reg = data;
    1174:	8203      	strh	r3, [r0, #16]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1176:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1178:	f413 7f00 	tst.w	r3, #512	; 0x200
    117c:	d1fb      	bne.n	1176 <_adc_init+0xee>
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
    117e:	2316      	movs	r3, #22
    1180:	4a0b      	ldr	r2, [pc, #44]	; (11b0 <_adc_init+0x128>)
    1182:	fb03 2301 	mla	r3, r3, r1, r2
    1186:	8a5b      	ldrh	r3, [r3, #18]
}

static inline void hri_adc_write_OFFSETCORR_reg(const void *const hw, hri_adc_offsetcorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->OFFSETCORR.reg = data;
    1188:	8243      	strh	r3, [r0, #18]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    118a:	6b03      	ldr	r3, [r0, #48]	; 0x30
    118c:	f413 6f80 	tst.w	r3, #1024	; 0x400
    1190:	d1fb      	bne.n	118a <_adc_init+0x102>
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
    1192:	2216      	movs	r2, #22
    1194:	4b06      	ldr	r3, [pc, #24]	; (11b0 <_adc_init+0x128>)
    1196:	fb02 3101 	mla	r1, r2, r1, r3
    119a:	7d0b      	ldrb	r3, [r1, #20]
	((Adc *)hw)->DBGCTRL.reg = data;
    119c:	70c3      	strb	r3, [r0, #3]
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
    119e:	884b      	ldrh	r3, [r1, #2]
	((Adc *)hw)->CTRLA.reg = data;
    11a0:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    11a2:	6b03      	ldr	r3, [r0, #48]	; 0x30
    11a4:	f013 0f03 	tst.w	r3, #3
    11a8:	d1fb      	bne.n	11a2 <_adc_init+0x11a>

	return ERR_NONE;
}
    11aa:	2000      	movs	r0, #0
    11ac:	4770      	bx	lr
    11ae:	bf00      	nop
    11b0:	00002460 	.word	0x00002460

000011b4 <_adc_interrupt_handler>:
 * \internal ADC interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _adc_interrupt_handler(struct _adc_async_device *device)
{
    11b4:	b508      	push	{r3, lr}
	void *const hw      = device->hw;
    11b6:	6942      	ldr	r2, [r0, #20]
	return ((Adc *)hw)->INTFLAG.reg;
    11b8:	f892 102e 	ldrb.w	r1, [r2, #46]	; 0x2e
	return ((Adc *)hw)->INTENSET.reg;
    11bc:	f892 302d 	ldrb.w	r3, [r2, #45]	; 0x2d
	uint8_t     intflag = hri_adc_read_INTFLAG_reg(hw);
	intflag &= hri_adc_read_INTEN_reg(hw);
    11c0:	400b      	ands	r3, r1
	if (intflag & ADC_INTFLAG_RESRDY) {
    11c2:	f013 0f01 	tst.w	r3, #1
    11c6:	d106      	bne.n	11d6 <_adc_interrupt_handler+0x22>
		hri_adc_clear_interrupt_RESRDY_bit(hw);
		device->adc_async_ch_cb.convert_done(device, 0, hri_adc_read_RESULT_reg(hw));
	} else if (intflag & ADC_INTFLAG_OVERRUN) {
    11c8:	f013 0f02 	tst.w	r3, #2
    11cc:	d10d      	bne.n	11ea <_adc_interrupt_handler+0x36>
		hri_adc_clear_interrupt_OVERRUN_bit(hw);
		device->adc_async_cb.error_cb(device, 0);
	} else if (intflag & ADC_INTFLAG_WINMON) {
    11ce:	f013 0f04 	tst.w	r3, #4
    11d2:	d111      	bne.n	11f8 <_adc_interrupt_handler+0x44>
    11d4:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    11d6:	2301      	movs	r3, #1
    11d8:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
	return ((Adc *)hw)->RESULT.reg;
    11dc:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
		device->adc_async_ch_cb.convert_done(device, 0, hri_adc_read_RESULT_reg(hw));
    11e0:	6883      	ldr	r3, [r0, #8]
    11e2:	b292      	uxth	r2, r2
    11e4:	2100      	movs	r1, #0
    11e6:	4798      	blx	r3
    11e8:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    11ea:	2302      	movs	r3, #2
    11ec:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
		device->adc_async_cb.error_cb(device, 0);
    11f0:	6843      	ldr	r3, [r0, #4]
    11f2:	2100      	movs	r1, #0
    11f4:	4798      	blx	r3
    11f6:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_WINMON;
    11f8:	2304      	movs	r3, #4
    11fa:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
		hri_adc_clear_interrupt_WINMON_bit(hw);
		device->adc_async_cb.window_cb(device, 0);
    11fe:	6803      	ldr	r3, [r0, #0]
    1200:	2100      	movs	r1, #0
    1202:	4798      	blx	r3
	}
}
    1204:	e7e6      	b.n	11d4 <_adc_interrupt_handler+0x20>
	...

00001208 <_adc_get_regs>:
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    1208:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    120c:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
		if (_adcs[i].number == n) {
    1210:	f3c0 2087 	ubfx	r0, r0, #10, #8
    1214:	2801      	cmp	r0, #1
    1216:	d007      	beq.n	1228 <_adc_get_regs+0x20>
{
    1218:	b508      	push	{r3, lr}
	ASSERT(false);
    121a:	228a      	movs	r2, #138	; 0x8a
    121c:	4903      	ldr	r1, [pc, #12]	; (122c <_adc_get_regs+0x24>)
    121e:	2000      	movs	r0, #0
    1220:	4b03      	ldr	r3, [pc, #12]	; (1230 <_adc_get_regs+0x28>)
    1222:	4798      	blx	r3
}
    1224:	2000      	movs	r0, #0
    1226:	bd08      	pop	{r3, pc}
    1228:	2000      	movs	r0, #0
    122a:	4770      	bx	lr
    122c:	00002478 	.word	0x00002478
    1230:	00000f79 	.word	0x00000f79

00001234 <_adc_async_init>:
{
    1234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1238:	460c      	mov	r4, r1
	ASSERT(device);
    123a:	4605      	mov	r5, r0
    123c:	22e1      	movs	r2, #225	; 0xe1
    123e:	4938      	ldr	r1, [pc, #224]	; (1320 <_adc_async_init+0xec>)
    1240:	3000      	adds	r0, #0
    1242:	bf18      	it	ne
    1244:	2001      	movne	r0, #1
    1246:	4b37      	ldr	r3, [pc, #220]	; (1324 <_adc_async_init+0xf0>)
    1248:	4798      	blx	r3
	init_status = _adc_init(hw, _adc_get_regs((uint32_t)hw));
    124a:	4620      	mov	r0, r4
    124c:	4b36      	ldr	r3, [pc, #216]	; (1328 <_adc_async_init+0xf4>)
    124e:	4798      	blx	r3
    1250:	4601      	mov	r1, r0
    1252:	4620      	mov	r0, r4
    1254:	4b35      	ldr	r3, [pc, #212]	; (132c <_adc_async_init+0xf8>)
    1256:	4798      	blx	r3
	if (init_status) {
    1258:	4606      	mov	r6, r0
    125a:	b110      	cbz	r0, 1262 <_adc_async_init+0x2e>
}
    125c:	4630      	mov	r0, r6
    125e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	device->hw = hw;
    1262:	616c      	str	r4, [r5, #20]
	if (hw == ADC1) {
    1264:	4b32      	ldr	r3, [pc, #200]	; (1330 <_adc_async_init+0xfc>)
    1266:	429c      	cmp	r4, r3
		_adc1_dev = dev;
    1268:	bf04      	itt	eq
    126a:	4b32      	ldreq	r3, [pc, #200]	; (1334 <_adc_async_init+0x100>)
    126c:	601d      	streq	r5, [r3, #0]
	NVIC_DisableIRQ(_adc_get_irq_num(device) + 0);
    126e:	4628      	mov	r0, r5
    1270:	4f31      	ldr	r7, [pc, #196]	; (1338 <_adc_async_init+0x104>)
    1272:	47b8      	blx	r7
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1274:	0943      	lsrs	r3, r0, #5
    1276:	f000 001f 	and.w	r0, r0, #31
    127a:	2401      	movs	r4, #1
    127c:	fa04 f000 	lsl.w	r0, r4, r0
    1280:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 133c <_adc_async_init+0x108>
    1284:	3320      	adds	r3, #32
    1286:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    128a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    128e:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_adc_get_irq_num(device) + 0);
    1292:	4628      	mov	r0, r5
    1294:	47b8      	blx	r7
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1296:	0943      	lsrs	r3, r0, #5
    1298:	f000 001f 	and.w	r0, r0, #31
    129c:	fa04 f000 	lsl.w	r0, r4, r0
    12a0:	3360      	adds	r3, #96	; 0x60
    12a2:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
	NVIC_EnableIRQ(_adc_get_irq_num(device) + 0);
    12a6:	4628      	mov	r0, r5
    12a8:	47b8      	blx	r7
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    12aa:	0943      	lsrs	r3, r0, #5
    12ac:	f000 001f 	and.w	r0, r0, #31
    12b0:	4084      	lsls	r4, r0
    12b2:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
	NVIC_DisableIRQ(_adc_get_irq_num(device) + 1);
    12b6:	4628      	mov	r0, r5
    12b8:	47b8      	blx	r7
    12ba:	3001      	adds	r0, #1
    12bc:	b280      	uxth	r0, r0
    12be:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    12c0:	2b00      	cmp	r3, #0
    12c2:	dbcb      	blt.n	125c <_adc_async_init+0x28>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    12c4:	095b      	lsrs	r3, r3, #5
    12c6:	f000 001f 	and.w	r0, r0, #31
    12ca:	2201      	movs	r2, #1
    12cc:	fa02 f000 	lsl.w	r0, r2, r0
    12d0:	3320      	adds	r3, #32
    12d2:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    12d6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    12da:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_adc_get_irq_num(device) + 1);
    12de:	4628      	mov	r0, r5
    12e0:	47b8      	blx	r7
    12e2:	3001      	adds	r0, #1
    12e4:	b280      	uxth	r0, r0
    12e6:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    12e8:	2b00      	cmp	r3, #0
    12ea:	dbb7      	blt.n	125c <_adc_async_init+0x28>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    12ec:	095b      	lsrs	r3, r3, #5
    12ee:	f000 001f 	and.w	r0, r0, #31
    12f2:	2201      	movs	r2, #1
    12f4:	fa02 f000 	lsl.w	r0, r2, r0
    12f8:	3360      	adds	r3, #96	; 0x60
    12fa:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
	NVIC_EnableIRQ(_adc_get_irq_num(device) + 1);
    12fe:	4628      	mov	r0, r5
    1300:	47b8      	blx	r7
    1302:	3001      	adds	r0, #1
    1304:	b280      	uxth	r0, r0
    1306:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    1308:	2b00      	cmp	r3, #0
    130a:	dba7      	blt.n	125c <_adc_async_init+0x28>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    130c:	095b      	lsrs	r3, r3, #5
    130e:	f000 001f 	and.w	r0, r0, #31
    1312:	2201      	movs	r2, #1
    1314:	fa02 f000 	lsl.w	r0, r2, r0
    1318:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
    131c:	e79e      	b.n	125c <_adc_async_init+0x28>
    131e:	bf00      	nop
    1320:	00002478 	.word	0x00002478
    1324:	00000f79 	.word	0x00000f79
    1328:	00001209 	.word	0x00001209
    132c:	00001089 	.word	0x00001089
    1330:	43002000 	.word	0x43002000
    1334:	20000060 	.word	0x20000060
    1338:	00001071 	.word	0x00001071
    133c:	e000e100 	.word	0xe000e100

00001340 <_adc_async_enable_channel>:
	hri_adc_set_CTRLA_ENABLE_bit(device->hw);
    1340:	6942      	ldr	r2, [r0, #20]
	((Adc *)hw)->CTRLA.reg |= ADC_CTRLA_ENABLE;
    1342:	8813      	ldrh	r3, [r2, #0]
    1344:	b29b      	uxth	r3, r3
    1346:	f043 0302 	orr.w	r3, r3, #2
    134a:	8013      	strh	r3, [r2, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    134c:	6b13      	ldr	r3, [r2, #48]	; 0x30
    134e:	f013 0f03 	tst.w	r3, #3
    1352:	d1fb      	bne.n	134c <_adc_async_enable_channel+0xc>
}
    1354:	4770      	bx	lr

00001356 <_adc_async_get_data_size>:
	return hri_adc_read_CTRLB_RESSEL_bf(device->hw) == ADC_CTRLB_RESSEL_8BIT_Val ? 1 : 2;
    1356:	6943      	ldr	r3, [r0, #20]
	tmp = ((Adc *)hw)->CTRLB.reg;
    1358:	88db      	ldrh	r3, [r3, #6]
    135a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
    135e:	2b03      	cmp	r3, #3
}
    1360:	bf0c      	ite	eq
    1362:	2001      	moveq	r0, #1
    1364:	2002      	movne	r0, #2
    1366:	4770      	bx	lr

00001368 <_adc_async_convert>:
	hri_adc_set_SWTRIG_START_bit(device->hw);
    1368:	6942      	ldr	r2, [r0, #20]
}

static inline void hri_adc_set_SWTRIG_START_bit(const void *const hw)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SWTRIG.reg |= ADC_SWTRIG_START;
    136a:	7d13      	ldrb	r3, [r2, #20]
    136c:	f043 0302 	orr.w	r3, r3, #2
    1370:	7513      	strb	r3, [r2, #20]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1372:	6b13      	ldr	r3, [r2, #48]	; 0x30
    1374:	f3c3 030b 	ubfx	r3, r3, #0, #12
    1378:	2b00      	cmp	r3, #0
    137a:	d1fa      	bne.n	1372 <_adc_async_convert+0xa>
}
    137c:	4770      	bx	lr
	...

00001380 <ADC1_0_Handler>:

/**
 * \brief DMAC interrupt handler
 */
void ADC1_0_Handler(void)
{
    1380:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc1_dev);
    1382:	4b02      	ldr	r3, [pc, #8]	; (138c <ADC1_0_Handler+0xc>)
    1384:	6818      	ldr	r0, [r3, #0]
    1386:	4b02      	ldr	r3, [pc, #8]	; (1390 <ADC1_0_Handler+0x10>)
    1388:	4798      	blx	r3
    138a:	bd08      	pop	{r3, pc}
    138c:	20000060 	.word	0x20000060
    1390:	000011b5 	.word	0x000011b5

00001394 <ADC1_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void ADC1_1_Handler(void)
{
    1394:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc1_dev);
    1396:	4b02      	ldr	r3, [pc, #8]	; (13a0 <ADC1_1_Handler+0xc>)
    1398:	6818      	ldr	r0, [r3, #0]
    139a:	4b02      	ldr	r3, [pc, #8]	; (13a4 <ADC1_1_Handler+0x10>)
    139c:	4798      	blx	r3
    139e:	bd08      	pop	{r3, pc}
    13a0:	20000060 	.word	0x20000060
    13a4:	000011b5 	.word	0x000011b5

000013a8 <_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    13a8:	0943      	lsrs	r3, r0, #5
    13aa:	f000 001f 	and.w	r0, r0, #31
    13ae:	2201      	movs	r2, #1
    13b0:	fa02 f000 	lsl.w	r0, r2, r0
    13b4:	3340      	adds	r3, #64	; 0x40
    13b6:	4a02      	ldr	r2, [pc, #8]	; (13c0 <_irq_set+0x18>)
    13b8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    13bc:	4770      	bx	lr
    13be:	bf00      	nop
    13c0:	e000e100 	.word	0xe000e100

000013c4 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    13c4:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    13c6:	4a0d      	ldr	r2, [pc, #52]	; (13fc <_init_chip+0x38>)
    13c8:	8813      	ldrh	r3, [r2, #0]
    13ca:	b29b      	uxth	r3, r3
    13cc:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    13ce:	4b0c      	ldr	r3, [pc, #48]	; (1400 <_init_chip+0x3c>)
    13d0:	4798      	blx	r3
	_oscctrl_init_sources();
    13d2:	4b0c      	ldr	r3, [pc, #48]	; (1404 <_init_chip+0x40>)
    13d4:	4798      	blx	r3
	_mclk_init();
    13d6:	4b0c      	ldr	r3, [pc, #48]	; (1408 <_init_chip+0x44>)
    13d8:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    13da:	2002      	movs	r0, #2
    13dc:	4c0b      	ldr	r4, [pc, #44]	; (140c <_init_chip+0x48>)
    13de:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
    13e0:	4b0b      	ldr	r3, [pc, #44]	; (1410 <_init_chip+0x4c>)
    13e2:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    13e4:	f640 70fd 	movw	r0, #4093	; 0xffd
    13e8:	47a0      	blx	r4
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_DMAC;
    13ea:	4a0a      	ldr	r2, [pc, #40]	; (1414 <_init_chip+0x50>)
    13ec:	6913      	ldr	r3, [r2, #16]
    13ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    13f2:	6113      	str	r3, [r2, #16]

#if CONF_DMAC_ENABLE
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
    13f4:	4b08      	ldr	r3, [pc, #32]	; (1418 <_init_chip+0x54>)
    13f6:	4798      	blx	r3
    13f8:	bd10      	pop	{r4, pc}
    13fa:	bf00      	nop
    13fc:	41004000 	.word	0x41004000
    1400:	00001715 	.word	0x00001715
    1404:	0000172d 	.word	0x0000172d
    1408:	00001709 	.word	0x00001709
    140c:	000016c9 	.word	0x000016c9
    1410:	00001731 	.word	0x00001731
    1414:	40000800 	.word	0x40000800
    1418:	00001491 	.word	0x00001491

0000141c <_dmac_handler>:
}
/**
 * \internal DMAC interrupt handler
 */
static void _dmac_handler(void)
{
    141c:	b508      	push	{r3, lr}
}

static inline hri_dmac_intpend_reg_t hri_dmac_get_INTPEND_reg(const void *const hw, hri_dmac_intpend_reg_t mask)
{
	uint16_t tmp;
	tmp = ((Dmac *)hw)->INTPEND.reg;
    141e:	4a1a      	ldr	r2, [pc, #104]	; (1488 <_dmac_handler+0x6c>)
    1420:	8c13      	ldrh	r3, [r2, #32]
	uint8_t               channel      = hri_dmac_get_INTPEND_reg(DMAC, DMAC_INTPEND_ID_Msk);
    1422:	f003 031f 	and.w	r3, r3, #31
	struct _dma_resource *tmp_resource = &_resources[channel];
    1426:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    142a:	4818      	ldr	r0, [pc, #96]	; (148c <_dmac_handler+0x70>)
    142c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return ((DmacChannel *)hw)->CHSTATUS.reg;
}

static inline bool hri_dmac_get_CHINTFLAG_TERR_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TERR) >> DMAC_CHINTFLAG_TERR_Pos;
    1430:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    1434:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e

	if (hri_dmac_get_CHINTFLAG_TERR_bit(DMAC, channel)) {
    1438:	f012 0f01 	tst.w	r2, #1
    143c:	d10a      	bne.n	1454 <_dmac_handler+0x38>
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
}

static inline bool hri_dmac_get_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TCMPL) >> DMAC_CHINTFLAG_TCMPL_Pos;
    143e:	011a      	lsls	r2, r3, #4
    1440:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1444:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    1448:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TERR_bit(DMAC, channel);
		tmp_resource->dma_cb.error(tmp_resource);
	} else if (hri_dmac_get_CHINTFLAG_TCMPL_bit(DMAC, channel)) {
    144c:	f012 0f02 	tst.w	r2, #2
    1450:	d10b      	bne.n	146a <_dmac_handler+0x4e>
    1452:	bd08      	pop	{r3, pc}
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
    1454:	011a      	lsls	r2, r3, #4
    1456:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    145a:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    145e:	2101      	movs	r1, #1
    1460:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		tmp_resource->dma_cb.error(tmp_resource);
    1464:	6843      	ldr	r3, [r0, #4]
    1466:	4798      	blx	r3
    1468:	bd08      	pop	{r3, pc}
}

static inline void hri_dmac_clear_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL;
    146a:	011a      	lsls	r2, r3, #4
    146c:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1470:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    1474:	2102      	movs	r1, #2
    1476:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TCMPL_bit(DMAC, channel);
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    147a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    147e:	4a03      	ldr	r2, [pc, #12]	; (148c <_dmac_handler+0x70>)
    1480:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1484:	4798      	blx	r3
	}
}
    1486:	e7e4      	b.n	1452 <_dmac_handler+0x36>
    1488:	4100a000 	.word	0x4100a000
    148c:	20000064 	.word	0x20000064

00001490 <_dma_init>:
{
    1490:	b470      	push	{r4, r5, r6}
	((Dmac *)hw)->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
    1492:	4a31      	ldr	r2, [pc, #196]	; (1558 <_dma_init+0xc8>)
    1494:	8813      	ldrh	r3, [r2, #0]
    1496:	f023 0302 	bic.w	r3, r3, #2
    149a:	041b      	lsls	r3, r3, #16
    149c:	0c1b      	lsrs	r3, r3, #16
    149e:	8013      	strh	r3, [r2, #0]
	((Dmac *)hw)->CRCCTRL.reg &= ~mask;
    14a0:	8853      	ldrh	r3, [r2, #2]
    14a2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
    14a6:	041b      	lsls	r3, r3, #16
    14a8:	0c1b      	lsrs	r3, r3, #16
    14aa:	8053      	strh	r3, [r2, #2]
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_SWRST;
    14ac:	8813      	ldrh	r3, [r2, #0]
    14ae:	b29b      	uxth	r3, r3
    14b0:	f043 0301 	orr.w	r3, r3, #1
    14b4:	8013      	strh	r3, [r2, #0]
	tmp = ((Dmac *)hw)->CTRL.reg;
    14b6:	8813      	ldrh	r3, [r2, #0]
	while (hri_dmac_get_CTRL_SWRST_bit(DMAC))
    14b8:	f013 0f01 	tst.w	r3, #1
    14bc:	d1fb      	bne.n	14b6 <_dma_init+0x26>
	((Dmac *)hw)->CTRL.reg = data;
    14be:	4b26      	ldr	r3, [pc, #152]	; (1558 <_dma_init+0xc8>)
    14c0:	f44f 6270 	mov.w	r2, #3840	; 0xf00
    14c4:	801a      	strh	r2, [r3, #0]
	tmp = ((Dmac *)hw)->DBGCTRL.reg;
    14c6:	7b5a      	ldrb	r2, [r3, #13]
	tmp &= ~DMAC_DBGCTRL_DBGRUN;
    14c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Dmac *)hw)->DBGCTRL.reg = tmp;
    14cc:	735a      	strb	r2, [r3, #13]
	((Dmac *)hw)->PRICTRL0.reg = data;
    14ce:	2100      	movs	r1, #0
    14d0:	6159      	str	r1, [r3, #20]
	hri_dmac_write_BASEADDR_reg(DMAC, (uint32_t)_descriptor_section);
    14d2:	4a22      	ldr	r2, [pc, #136]	; (155c <_dma_init+0xcc>)
	((Dmac *)hw)->BASEADDR.reg = data;
    14d4:	635a      	str	r2, [r3, #52]	; 0x34
	hri_dmac_write_WRBADDR_reg(DMAC, (uint32_t)_write_back_section);
    14d6:	4a22      	ldr	r2, [pc, #136]	; (1560 <_dma_init+0xd0>)
	((Dmac *)hw)->WRBADDR.reg = data;
    14d8:	639a      	str	r2, [r3, #56]	; 0x38
    14da:	4b22      	ldr	r3, [pc, #136]	; (1564 <_dma_init+0xd4>)
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    14dc:	4c1f      	ldr	r4, [pc, #124]	; (155c <_dma_init+0xcc>)
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
    14de:	460e      	mov	r6, r1
		hri_dmac_write_CHCTRLA_reg(DMAC, i, _cfgs[i].ctrla);
    14e0:	681d      	ldr	r5, [r3, #0]
    14e2:	0108      	lsls	r0, r1, #4
    14e4:	f100 4282 	add.w	r2, r0, #1090519040	; 0x41000000
    14e8:	f502 4220 	add.w	r2, r2, #40960	; 0xa000

static inline void hri_dmac_write_CHCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                              hri_dmac_chctrla_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg = data;
    14ec:	6415      	str	r5, [r2, #64]	; 0x40
		hri_dmac_write_CHPRILVL_reg(DMAC, i, _cfgs[i].prilvl);
    14ee:	791d      	ldrb	r5, [r3, #4]

static inline void hri_dmac_write_CHPRILVL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chprilvl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHPRILVL.reg = data;
    14f0:	f882 5045 	strb.w	r5, [r2, #69]	; 0x45
		hri_dmac_write_CHEVCTRL_reg(DMAC, i, _cfgs[i].evctrl);
    14f4:	795d      	ldrb	r5, [r3, #5]

static inline void hri_dmac_write_CHEVCTRL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chevctrl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHEVCTRL.reg = data;
    14f6:	f882 5046 	strb.w	r5, [r2, #70]	; 0x46
		hri_dmacdescriptor_write_BTCTRL_reg(&_descriptor_section[i], _cfgs[i].btctrl);
    14fa:	88dd      	ldrh	r5, [r3, #6]
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    14fc:	1822      	adds	r2, r4, r0
    14fe:	5225      	strh	r5, [r4, r0]
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
    1500:	60d6      	str	r6, [r2, #12]
    1502:	3101      	adds	r1, #1
    1504:	3308      	adds	r3, #8
	for (i = 0; i < DMAC_CH_NUM; i++) {
    1506:	2920      	cmp	r1, #32
    1508:	d1ea      	bne.n	14e0 <_dma_init+0x50>
    150a:	231f      	movs	r3, #31
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    150c:	2001      	movs	r0, #1
    150e:	4916      	ldr	r1, [pc, #88]	; (1568 <_dma_init+0xd8>)
		NVIC_DisableIRQ(DMAC_0_IRQn + i);
    1510:	b29a      	uxth	r2, r3
  if ((int32_t)(IRQn) >= 0)
    1512:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    1516:	d00b      	beq.n	1530 <_dma_init+0xa0>
    1518:	3301      	adds	r3, #1
	for (i = 0; i < 5; i++) {
    151a:	2b24      	cmp	r3, #36	; 0x24
    151c:	d1f8      	bne.n	1510 <_dma_init+0x80>
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_DMAENABLE;
    151e:	4a0e      	ldr	r2, [pc, #56]	; (1558 <_dma_init+0xc8>)
    1520:	8813      	ldrh	r3, [r2, #0]
    1522:	b29b      	uxth	r3, r3
    1524:	f043 0302 	orr.w	r3, r3, #2
    1528:	8013      	strh	r3, [r2, #0]
}
    152a:	2000      	movs	r0, #0
    152c:	bc70      	pop	{r4, r5, r6}
    152e:	4770      	bx	lr
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1530:	095c      	lsrs	r4, r3, #5
    1532:	f002 021f 	and.w	r2, r2, #31
    1536:	fa00 f202 	lsl.w	r2, r0, r2
    153a:	f104 0520 	add.w	r5, r4, #32
    153e:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    1542:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1546:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    154a:	f104 0560 	add.w	r5, r4, #96	; 0x60
    154e:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1552:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
    1556:	e7df      	b.n	1518 <_dma_init+0x88>
    1558:	4100a000 	.word	0x4100a000
    155c:	200002e0 	.word	0x200002e0
    1560:	200004e0 	.word	0x200004e0
    1564:	00002490 	.word	0x00002490
    1568:	e000e100 	.word	0xe000e100

0000156c <_dma_set_irq_state>:
	if (DMA_TRANSFER_COMPLETE_CB == type) {
    156c:	b991      	cbnz	r1, 1594 <_dma_set_irq_state+0x28>
	if (value == 0x0) {
    156e:	b942      	cbnz	r2, 1582 <_dma_set_irq_state+0x16>
		((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = DMAC_CHINTENSET_TCMPL;
    1570:	0100      	lsls	r0, r0, #4
    1572:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    1576:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    157a:	2302      	movs	r3, #2
    157c:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
    1580:	4770      	bx	lr
		((Dmac *)hw)->Channel[submodule_index].CHINTENSET.reg = DMAC_CHINTENSET_TCMPL;
    1582:	0100      	lsls	r0, r0, #4
    1584:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    1588:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    158c:	2302      	movs	r3, #2
    158e:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
    1592:	4770      	bx	lr
	} else if (DMA_TRANSFER_ERROR_CB == type) {
    1594:	2901      	cmp	r1, #1
    1596:	d000      	beq.n	159a <_dma_set_irq_state+0x2e>
    1598:	4770      	bx	lr
	if (value == 0x0) {
    159a:	b142      	cbz	r2, 15ae <_dma_set_irq_state+0x42>
		((Dmac *)hw)->Channel[submodule_index].CHINTENSET.reg = DMAC_CHINTENSET_TERR;
    159c:	0100      	lsls	r0, r0, #4
    159e:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    15a2:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    15a6:	2301      	movs	r3, #1
    15a8:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
}
    15ac:	e7f4      	b.n	1598 <_dma_set_irq_state+0x2c>
		((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = DMAC_CHINTENSET_TERR;
    15ae:	0100      	lsls	r0, r0, #4
    15b0:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    15b4:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    15b8:	f880 104c 	strb.w	r1, [r0, #76]	; 0x4c
    15bc:	4770      	bx	lr
	...

000015c0 <_dma_set_destination_address>:
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    15c0:	4b02      	ldr	r3, [pc, #8]	; (15cc <_dma_set_destination_address+0xc>)
    15c2:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    15c6:	6081      	str	r1, [r0, #8]
}
    15c8:	2000      	movs	r0, #0
    15ca:	4770      	bx	lr
    15cc:	200002e0 	.word	0x200002e0

000015d0 <_dma_set_source_address>:
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    15d0:	4b02      	ldr	r3, [pc, #8]	; (15dc <_dma_set_source_address+0xc>)
    15d2:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    15d6:	6041      	str	r1, [r0, #4]
}
    15d8:	2000      	movs	r0, #0
    15da:	4770      	bx	lr
    15dc:	200002e0 	.word	0x200002e0

000015e0 <_dma_set_data_amount>:
{
    15e0:	b430      	push	{r4, r5}
	return ((DmacDescriptor *)hw)->DSTADDR.reg;
    15e2:	4c14      	ldr	r4, [pc, #80]	; (1634 <_dma_set_data_amount+0x54>)
    15e4:	0102      	lsls	r2, r0, #4
    15e6:	18a3      	adds	r3, r4, r2
    15e8:	689d      	ldr	r5, [r3, #8]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    15ea:	5aa3      	ldrh	r3, [r4, r2]
	uint8_t  beat_size = hri_dmacdescriptor_read_BTCTRL_BEATSIZE_bf(&_descriptor_section[channel]);
    15ec:	f3c3 2301 	ubfx	r3, r3, #8, #2
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    15f0:	5aa2      	ldrh	r2, [r4, r2]
	if (hri_dmacdescriptor_get_BTCTRL_DSTINC_bit(&_descriptor_section[channel])) {
    15f2:	f412 6f00 	tst.w	r2, #2048	; 0x800
    15f6:	d006      	beq.n	1606 <_dma_set_data_amount+0x26>
		hri_dmacdescriptor_write_DSTADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    15f8:	fa01 f403 	lsl.w	r4, r1, r3
    15fc:	442c      	add	r4, r5
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    15fe:	4a0d      	ldr	r2, [pc, #52]	; (1634 <_dma_set_data_amount+0x54>)
    1600:	eb02 1200 	add.w	r2, r2, r0, lsl #4
    1604:	6094      	str	r4, [r2, #8]
	return ((DmacDescriptor *)hw)->SRCADDR.reg;
    1606:	4c0b      	ldr	r4, [pc, #44]	; (1634 <_dma_set_data_amount+0x54>)
    1608:	0102      	lsls	r2, r0, #4
    160a:	18a5      	adds	r5, r4, r2
    160c:	686d      	ldr	r5, [r5, #4]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    160e:	5aa2      	ldrh	r2, [r4, r2]
	if (hri_dmacdescriptor_get_BTCTRL_SRCINC_bit(&_descriptor_section[channel])) {
    1610:	f412 6f80 	tst.w	r2, #1024	; 0x400
    1614:	d005      	beq.n	1622 <_dma_set_data_amount+0x42>
		hri_dmacdescriptor_write_SRCADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    1616:	fa01 f303 	lsl.w	r3, r1, r3
    161a:	442b      	add	r3, r5
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    161c:	eb04 1200 	add.w	r2, r4, r0, lsl #4
    1620:	6053      	str	r3, [r2, #4]
	hri_dmacdescriptor_write_BTCNT_reg(&_descriptor_section[channel], amount);
    1622:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->BTCNT.reg = data;
    1624:	4b03      	ldr	r3, [pc, #12]	; (1634 <_dma_set_data_amount+0x54>)
    1626:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    162a:	8041      	strh	r1, [r0, #2]
}
    162c:	2000      	movs	r0, #0
    162e:	bc30      	pop	{r4, r5}
    1630:	4770      	bx	lr
    1632:	bf00      	nop
    1634:	200002e0 	.word	0x200002e0

00001638 <_dma_enable_transaction>:
{
    1638:	b410      	push	{r4}
	((DmacDescriptor *)hw)->BTCTRL.reg |= DMAC_BTCTRL_VALID;
    163a:	4c0d      	ldr	r4, [pc, #52]	; (1670 <_dma_enable_transaction+0x38>)
    163c:	0103      	lsls	r3, r0, #4
    163e:	5ae2      	ldrh	r2, [r4, r3]
    1640:	b292      	uxth	r2, r2
    1642:	f042 0201 	orr.w	r2, r2, #1
    1646:	52e2      	strh	r2, [r4, r3]
    1648:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    164c:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    1650:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    1652:	f042 0202 	orr.w	r2, r2, #2
    1656:	641a      	str	r2, [r3, #64]	; 0x40
	if (software_trigger) {
    1658:	b131      	cbz	r1, 1668 <_dma_enable_transaction+0x30>
	((Dmac *)hw)->SWTRIGCTRL.reg |= mask;
    165a:	4a06      	ldr	r2, [pc, #24]	; (1674 <_dma_enable_transaction+0x3c>)
    165c:	6911      	ldr	r1, [r2, #16]
		hri_dmac_set_SWTRIGCTRL_reg(DMAC, 1 << channel);
    165e:	2301      	movs	r3, #1
    1660:	fa03 f000 	lsl.w	r0, r3, r0
    1664:	4308      	orrs	r0, r1
    1666:	6110      	str	r0, [r2, #16]
}
    1668:	2000      	movs	r0, #0
    166a:	f85d 4b04 	ldr.w	r4, [sp], #4
    166e:	4770      	bx	lr
    1670:	200002e0 	.word	0x200002e0
    1674:	4100a000 	.word	0x4100a000

00001678 <_dma_get_channel_resource>:
	*resource = &_resources[channel];
    1678:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    167c:	4b02      	ldr	r3, [pc, #8]	; (1688 <_dma_get_channel_resource+0x10>)
    167e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    1682:	6001      	str	r1, [r0, #0]
}
    1684:	2000      	movs	r0, #0
    1686:	4770      	bx	lr
    1688:	20000064 	.word	0x20000064

0000168c <DMAC_0_Handler>:
/**
 * \brief DMAC interrupt handler
 */
void DMAC_0_Handler(void)
{
    168c:	b508      	push	{r3, lr}
	_dmac_handler();
    168e:	4b01      	ldr	r3, [pc, #4]	; (1694 <DMAC_0_Handler+0x8>)
    1690:	4798      	blx	r3
    1692:	bd08      	pop	{r3, pc}
    1694:	0000141d 	.word	0x0000141d

00001698 <DMAC_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_1_Handler(void)
{
    1698:	b508      	push	{r3, lr}
	_dmac_handler();
    169a:	4b01      	ldr	r3, [pc, #4]	; (16a0 <DMAC_1_Handler+0x8>)
    169c:	4798      	blx	r3
    169e:	bd08      	pop	{r3, pc}
    16a0:	0000141d 	.word	0x0000141d

000016a4 <DMAC_2_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_2_Handler(void)
{
    16a4:	b508      	push	{r3, lr}
	_dmac_handler();
    16a6:	4b01      	ldr	r3, [pc, #4]	; (16ac <DMAC_2_Handler+0x8>)
    16a8:	4798      	blx	r3
    16aa:	bd08      	pop	{r3, pc}
    16ac:	0000141d 	.word	0x0000141d

000016b0 <DMAC_3_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_3_Handler(void)
{
    16b0:	b508      	push	{r3, lr}
	_dmac_handler();
    16b2:	4b01      	ldr	r3, [pc, #4]	; (16b8 <DMAC_3_Handler+0x8>)
    16b4:	4798      	blx	r3
    16b6:	bd08      	pop	{r3, pc}
    16b8:	0000141d 	.word	0x0000141d

000016bc <DMAC_4_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_4_Handler(void)
{
    16bc:	b508      	push	{r3, lr}
	_dmac_handler();
    16be:	4b01      	ldr	r3, [pc, #4]	; (16c4 <DMAC_4_Handler+0x8>)
    16c0:	4798      	blx	r3
    16c2:	bd08      	pop	{r3, pc}
    16c4:	0000141d 	.word	0x0000141d

000016c8 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    16c8:	f010 0f01 	tst.w	r0, #1
    16cc:	d008      	beq.n	16e0 <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    16ce:	4a0b      	ldr	r2, [pc, #44]	; (16fc <_gclk_init_generators_by_fref+0x34>)
    16d0:	4b0b      	ldr	r3, [pc, #44]	; (1700 <_gclk_init_generators_by_fref+0x38>)
    16d2:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    16d4:	4619      	mov	r1, r3
    16d6:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    16da:	684b      	ldr	r3, [r1, #4]
    16dc:	4213      	tst	r3, r2
    16de:	d1fc      	bne.n	16da <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    16e0:	f010 0f02 	tst.w	r0, #2
    16e4:	d008      	beq.n	16f8 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    16e6:	4a07      	ldr	r2, [pc, #28]	; (1704 <_gclk_init_generators_by_fref+0x3c>)
    16e8:	4b05      	ldr	r3, [pc, #20]	; (1700 <_gclk_init_generators_by_fref+0x38>)
    16ea:	625a      	str	r2, [r3, #36]	; 0x24
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    16ec:	4619      	mov	r1, r3
    16ee:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    16f2:	684b      	ldr	r3, [r1, #4]
    16f4:	4213      	tst	r3, r2
    16f6:	d1fc      	bne.n	16f2 <_gclk_init_generators_by_fref+0x2a>
    16f8:	4770      	bx	lr
    16fa:	bf00      	nop
    16fc:	00011106 	.word	0x00011106
    1700:	40001c00 	.word	0x40001c00
    1704:	00010905 	.word	0x00010905

00001708 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    1708:	2201      	movs	r2, #1
    170a:	4b01      	ldr	r3, [pc, #4]	; (1710 <_mclk_init+0x8>)
    170c:	715a      	strb	r2, [r3, #5]
    170e:	4770      	bx	lr
    1710:	40000800 	.word	0x40000800

00001714 <_osc32kctrl_init_sources>:
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    1714:	4b04      	ldr	r3, [pc, #16]	; (1728 <_osc32kctrl_init_sources+0x14>)
    1716:	f242 028e 	movw	r2, #8334	; 0x208e
    171a:	829a      	strh	r2, [r3, #20]
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    171c:	2200      	movs	r2, #0
    171e:	759a      	strb	r2, [r3, #22]
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    1720:	75da      	strb	r2, [r3, #23]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    1722:	2201      	movs	r2, #1
    1724:	741a      	strb	r2, [r3, #16]
    1726:	4770      	bx	lr
    1728:	40001400 	.word	0x40001400

0000172c <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    172c:	4770      	bx	lr
	...

00001730 <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    1730:	4a36      	ldr	r2, [pc, #216]	; (180c <_oscctrl_init_referenced_generators+0xdc>)
    1732:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    1734:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    1738:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    173c:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    173e:	4611      	mov	r1, r2
    1740:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    1744:	684b      	ldr	r3, [r1, #4]
    1746:	4213      	tst	r3, r2
    1748:	d1fc      	bne.n	1744 <_oscctrl_init_referenced_generators+0x14>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    174a:	4a30      	ldr	r2, [pc, #192]	; (180c <_oscctrl_init_referenced_generators+0xdc>)
    174c:	6853      	ldr	r3, [r2, #4]
{
	void *hw = (void *)OSCCTRL;

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    174e:	f013 0f04 	tst.w	r3, #4
    1752:	d1fb      	bne.n	174c <_oscctrl_init_referenced_generators+0x1c>
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    1754:	4b2e      	ldr	r3, [pc, #184]	; (1810 <_oscctrl_init_referenced_generators+0xe0>)
    1756:	2200      	movs	r2, #0
    1758:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    175a:	4a2e      	ldr	r2, [pc, #184]	; (1814 <_oscctrl_init_referenced_generators+0xe4>)
    175c:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    175e:	461a      	mov	r2, r3
    1760:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    1764:	f013 0f10 	tst.w	r3, #16
    1768:	d1fa      	bne.n	1760 <_oscctrl_init_referenced_generators+0x30>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    176a:	2200      	movs	r2, #0
    176c:	4b28      	ldr	r3, [pc, #160]	; (1810 <_oscctrl_init_referenced_generators+0xe0>)
    176e:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1772:	461a      	mov	r2, r3
    1774:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    1778:	f013 0f04 	tst.w	r3, #4
    177c:	d1fa      	bne.n	1774 <_oscctrl_init_referenced_generators+0x44>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    177e:	2202      	movs	r2, #2
    1780:	4b23      	ldr	r3, [pc, #140]	; (1810 <_oscctrl_init_referenced_generators+0xe0>)
    1782:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1784:	461a      	mov	r2, r3
    1786:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    178a:	f013 0f02 	tst.w	r3, #2
    178e:	d1fa      	bne.n	1786 <_oscctrl_init_referenced_generators+0x56>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    1790:	4b1f      	ldr	r3, [pc, #124]	; (1810 <_oscctrl_init_referenced_generators+0xe0>)
    1792:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    1794:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1796:	461a      	mov	r2, r3
    1798:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    179c:	f013 0f08 	tst.w	r3, #8
    17a0:	d1fa      	bne.n	1798 <_oscctrl_init_referenced_generators+0x68>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    17a2:	2280      	movs	r2, #128	; 0x80
    17a4:	4b1a      	ldr	r3, [pc, #104]	; (1810 <_oscctrl_init_referenced_generators+0xe0>)
    17a6:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    17aa:	461a      	mov	r2, r3
    17ac:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    17b0:	f013 0f04 	tst.w	r3, #4
    17b4:	d1fa      	bne.n	17ac <_oscctrl_init_referenced_generators+0x7c>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    17b6:	4b16      	ldr	r3, [pc, #88]	; (1810 <_oscctrl_init_referenced_generators+0xe0>)
    17b8:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    17bc:	f013 0f01 	tst.w	r3, #1
    17c0:	d01d      	beq.n	17fe <_oscctrl_init_referenced_generators+0xce>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    17c2:	4a13      	ldr	r2, [pc, #76]	; (1810 <_oscctrl_init_referenced_generators+0xe0>)
    17c4:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    17c6:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    17ca:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    17ce:	d1f9      	bne.n	17c4 <_oscctrl_init_referenced_generators+0x94>
	return ((Gclk *)hw)->SYNCBUSY.reg;
    17d0:	4a0e      	ldr	r2, [pc, #56]	; (180c <_oscctrl_init_referenced_generators+0xdc>)
    17d2:	6853      	ldr	r3, [r2, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    17d4:	2b00      	cmp	r3, #0
    17d6:	d1fc      	bne.n	17d2 <_oscctrl_init_referenced_generators+0xa2>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    17d8:	4a0c      	ldr	r2, [pc, #48]	; (180c <_oscctrl_init_referenced_generators+0xdc>)
    17da:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    17dc:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    17e0:	f043 0306 	orr.w	r3, r3, #6
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    17e4:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    17e6:	4611      	mov	r1, r2
    17e8:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    17ec:	684b      	ldr	r3, [r1, #4]
    17ee:	4213      	tst	r3, r2
    17f0:	d1fc      	bne.n	17ec <_oscctrl_init_referenced_generators+0xbc>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    17f2:	4a06      	ldr	r2, [pc, #24]	; (180c <_oscctrl_init_referenced_generators+0xdc>)
    17f4:	6853      	ldr	r3, [r2, #4]
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    17f6:	f013 0f04 	tst.w	r3, #4
    17fa:	d1fb      	bne.n	17f4 <_oscctrl_init_referenced_generators+0xc4>
		;
#endif
	(void)hw;
}
    17fc:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    17fe:	4a04      	ldr	r2, [pc, #16]	; (1810 <_oscctrl_init_referenced_generators+0xe0>)
    1800:	6913      	ldr	r3, [r2, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    1802:	f413 7f80 	tst.w	r3, #256	; 0x100
    1806:	d0fb      	beq.n	1800 <_oscctrl_init_referenced_generators+0xd0>
    1808:	e7e2      	b.n	17d0 <_oscctrl_init_referenced_generators+0xa0>
    180a:	bf00      	nop
    180c:	40001c00 	.word	0x40001c00
    1810:	40001000 	.word	0x40001000
    1814:	04010000 	.word	0x04010000

00001818 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    1818:	b500      	push	{lr}
    181a:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    181c:	4b0d      	ldr	r3, [pc, #52]	; (1854 <RAMECC_Handler+0x3c>)
    181e:	789b      	ldrb	r3, [r3, #2]
    1820:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    1822:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    1824:	9b01      	ldr	r3, [sp, #4]
    1826:	f013 0f02 	tst.w	r3, #2
    182a:	d006      	beq.n	183a <RAMECC_Handler+0x22>
    182c:	4b0a      	ldr	r3, [pc, #40]	; (1858 <RAMECC_Handler+0x40>)
    182e:	681b      	ldr	r3, [r3, #0]
    1830:	b11b      	cbz	r3, 183a <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    1832:	4a08      	ldr	r2, [pc, #32]	; (1854 <RAMECC_Handler+0x3c>)
    1834:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    1836:	4798      	blx	r3
    1838:	e009      	b.n	184e <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    183a:	9b01      	ldr	r3, [sp, #4]
    183c:	f013 0f01 	tst.w	r3, #1
    1840:	d005      	beq.n	184e <RAMECC_Handler+0x36>
    1842:	4b05      	ldr	r3, [pc, #20]	; (1858 <RAMECC_Handler+0x40>)
    1844:	685b      	ldr	r3, [r3, #4]
    1846:	b113      	cbz	r3, 184e <RAMECC_Handler+0x36>
    1848:	4a02      	ldr	r2, [pc, #8]	; (1854 <RAMECC_Handler+0x3c>)
    184a:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    184c:	4798      	blx	r3
	} else {
		return;
	}
}
    184e:	b003      	add	sp, #12
    1850:	f85d fb04 	ldr.w	pc, [sp], #4
    1854:	41020000 	.word	0x41020000
    1858:	200006e0 	.word	0x200006e0

0000185c <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    185c:	b470      	push	{r4, r5, r6}
    185e:	b089      	sub	sp, #36	; 0x24
    1860:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    1862:	466c      	mov	r4, sp
    1864:	4d0d      	ldr	r5, [pc, #52]	; (189c <_sercom_get_hardware_index+0x40>)
    1866:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1868:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    186a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    186e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    1872:	9b00      	ldr	r3, [sp, #0]
    1874:	42b3      	cmp	r3, r6
    1876:	d00d      	beq.n	1894 <_sercom_get_hardware_index+0x38>
    1878:	4631      	mov	r1, r6
    187a:	ab01      	add	r3, sp, #4
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    187c:	2001      	movs	r0, #1
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    187e:	f853 2b04 	ldr.w	r2, [r3], #4
    1882:	428a      	cmp	r2, r1
    1884:	d007      	beq.n	1896 <_sercom_get_hardware_index+0x3a>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1886:	3001      	adds	r0, #1
    1888:	2808      	cmp	r0, #8
    188a:	d1f8      	bne.n	187e <_sercom_get_hardware_index+0x22>
			return i;
		}
	}
	return 0;
    188c:	2000      	movs	r0, #0
}
    188e:	b009      	add	sp, #36	; 0x24
    1890:	bc70      	pop	{r4, r5, r6}
    1892:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1894:	2000      	movs	r0, #0
			return i;
    1896:	b2c0      	uxtb	r0, r0
    1898:	e7f9      	b.n	188e <_sercom_get_hardware_index+0x32>
    189a:	bf00      	nop
    189c:	00002590 	.word	0x00002590

000018a0 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    18a0:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    18a2:	4b03      	ldr	r3, [pc, #12]	; (18b0 <_sercom_get_irq_num+0x10>)
    18a4:	4798      	blx	r3
    18a6:	0080      	lsls	r0, r0, #2
    18a8:	302e      	adds	r0, #46	; 0x2e
}
    18aa:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    18ae:	bd08      	pop	{r3, pc}
    18b0:	0000185d 	.word	0x0000185d

000018b4 <_spi_handler>:
/**
 *  \brief IRQ handler used
 *  \param[in, out] p Pointer to SPI device instance.
 */
static void _spi_handler(struct _spi_async_dev *dev)
{
    18b4:	b508      	push	{r3, lr}
	void *                      hw = dev->prvt;
    18b6:	6802      	ldr	r2, [r0, #0]
	return tmp;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    18b8:	7e11      	ldrb	r1, [r2, #24]
	return tmp;
}

static inline hri_sercomspi_intenset_reg_t hri_sercomspi_read_INTEN_reg(const void *const hw)
{
	return ((Sercom *)hw)->SPI.INTENSET.reg;
    18ba:	7d93      	ldrb	r3, [r2, #22]
	hri_sercomspi_intflag_reg_t st;

	st = hri_sercomspi_read_INTFLAG_reg(hw);
	st &= hri_sercomspi_read_INTEN_reg(hw);
    18bc:	400b      	ands	r3, r1

	if (st & SERCOM_SPI_INTFLAG_DRE) {
    18be:	f013 0f01 	tst.w	r3, #1
    18c2:	d109      	bne.n	18d8 <_spi_handler+0x24>
		dev->callbacks.tx(dev);
	} else if (st & SERCOM_SPI_INTFLAG_RXC) {
    18c4:	f013 0f04 	tst.w	r3, #4
    18c8:	d109      	bne.n	18de <_spi_handler+0x2a>
		dev->callbacks.rx(dev);
	} else if (st & SERCOM_SPI_INTFLAG_TXC) {
    18ca:	f013 0f02 	tst.w	r3, #2
    18ce:	d109      	bne.n	18e4 <_spi_handler+0x30>
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC);
		dev->callbacks.complete(dev);
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
    18d0:	f013 0f80 	tst.w	r3, #128	; 0x80
    18d4:	d10b      	bne.n	18ee <_spi_handler+0x3a>
    18d6:	bd08      	pop	{r3, pc}
		dev->callbacks.tx(dev);
    18d8:	6883      	ldr	r3, [r0, #8]
    18da:	4798      	blx	r3
    18dc:	bd08      	pop	{r3, pc}
		dev->callbacks.rx(dev);
    18de:	68c3      	ldr	r3, [r0, #12]
    18e0:	4798      	blx	r3
    18e2:	bd08      	pop	{r3, pc}
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    18e4:	2302      	movs	r3, #2
    18e6:	7613      	strb	r3, [r2, #24]
		dev->callbacks.complete(dev);
    18e8:	6903      	ldr	r3, [r0, #16]
    18ea:	4798      	blx	r3
    18ec:	bd08      	pop	{r3, pc}
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    18ee:	2304      	movs	r3, #4
    18f0:	8353      	strh	r3, [r2, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    18f2:	2380      	movs	r3, #128	; 0x80
    18f4:	7613      	strb	r3, [r2, #24]
		hri_sercomspi_clear_STATUS_reg(hw, SERCOM_SPI_STATUS_BUFOVF);
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
		dev->callbacks.err(dev, ERR_OVERFLOW);
    18f6:	6943      	ldr	r3, [r0, #20]
    18f8:	f06f 0112 	mvn.w	r1, #18
    18fc:	4798      	blx	r3
	}
}
    18fe:	e7ea      	b.n	18d6 <_spi_handler+0x22>

00001900 <_usart_init>:
{
    1900:	b510      	push	{r4, lr}
    1902:	4604      	mov	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    1904:	4b20      	ldr	r3, [pc, #128]	; (1988 <_usart_init+0x88>)
    1906:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
    1908:	b128      	cbz	r0, 1916 <_usart_init+0x16>
	ASSERT(false);
    190a:	f240 2249 	movw	r2, #585	; 0x249
    190e:	491f      	ldr	r1, [pc, #124]	; (198c <_usart_init+0x8c>)
    1910:	2000      	movs	r0, #0
    1912:	4b1f      	ldr	r3, [pc, #124]	; (1990 <_usart_init+0x90>)
    1914:	4798      	blx	r3
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    1916:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    1918:	f013 0f01 	tst.w	r3, #1
    191c:	d119      	bne.n	1952 <_usart_init+0x52>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    191e:	69e3      	ldr	r3, [r4, #28]
    1920:	f013 0f03 	tst.w	r3, #3
    1924:	d1fb      	bne.n	191e <_usart_init+0x1e>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    1926:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    1928:	f013 0f02 	tst.w	r3, #2
    192c:	d00b      	beq.n	1946 <_usart_init+0x46>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    192e:	6823      	ldr	r3, [r4, #0]
    1930:	f023 0302 	bic.w	r3, r3, #2
    1934:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1936:	69e3      	ldr	r3, [r4, #28]
    1938:	f013 0f03 	tst.w	r3, #3
    193c:	d1fb      	bne.n	1936 <_usart_init+0x36>
    193e:	69e3      	ldr	r3, [r4, #28]
    1940:	f013 0f02 	tst.w	r3, #2
    1944:	d1fb      	bne.n	193e <_usart_init+0x3e>
	((Sercom *)hw)->USART.CTRLA.reg = data;
    1946:	2305      	movs	r3, #5
    1948:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    194a:	69e3      	ldr	r3, [r4, #28]
    194c:	f013 0f03 	tst.w	r3, #3
    1950:	d1fb      	bne.n	194a <_usart_init+0x4a>
    1952:	69e3      	ldr	r3, [r4, #28]
    1954:	f013 0f01 	tst.w	r3, #1
    1958:	d1fb      	bne.n	1952 <_usart_init+0x52>
	((Sercom *)hw)->USART.CTRLA.reg = data;
    195a:	4b0e      	ldr	r3, [pc, #56]	; (1994 <_usart_init+0x94>)
    195c:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    195e:	69e3      	ldr	r3, [r4, #28]
    1960:	f013 0f03 	tst.w	r3, #3
    1964:	d1fb      	bne.n	195e <_usart_init+0x5e>
	((Sercom *)hw)->USART.CTRLB.reg = data;
    1966:	f44f 3340 	mov.w	r3, #196608	; 0x30000
    196a:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    196c:	69e3      	ldr	r3, [r4, #28]
    196e:	f013 0f1f 	tst.w	r3, #31
    1972:	d1fb      	bne.n	196c <_usart_init+0x6c>
	((Sercom *)hw)->USART.CTRLC.reg = data;
    1974:	4b08      	ldr	r3, [pc, #32]	; (1998 <_usart_init+0x98>)
    1976:	60a3      	str	r3, [r4, #8]
	((Sercom *)hw)->USART.BAUD.reg = data;
    1978:	f64f 43b9 	movw	r3, #64697	; 0xfcb9
    197c:	81a3      	strh	r3, [r4, #12]
	((Sercom *)hw)->USART.RXPL.reg = data;
    197e:	2000      	movs	r0, #0
    1980:	73a0      	strb	r0, [r4, #14]
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    1982:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
}
    1986:	bd10      	pop	{r4, pc}
    1988:	0000185d 	.word	0x0000185d
    198c:	000025c8 	.word	0x000025c8
    1990:	00000f79 	.word	0x00000f79
    1994:	40100004 	.word	0x40100004
    1998:	00700002 	.word	0x00700002

0000199c <_usart_sync_init>:
{
    199c:	b538      	push	{r3, r4, r5, lr}
    199e:	460c      	mov	r4, r1
	ASSERT(device);
    19a0:	4605      	mov	r5, r0
    19a2:	22bd      	movs	r2, #189	; 0xbd
    19a4:	4905      	ldr	r1, [pc, #20]	; (19bc <_usart_sync_init+0x20>)
    19a6:	3000      	adds	r0, #0
    19a8:	bf18      	it	ne
    19aa:	2001      	movne	r0, #1
    19ac:	4b04      	ldr	r3, [pc, #16]	; (19c0 <_usart_sync_init+0x24>)
    19ae:	4798      	blx	r3
	device->hw = hw;
    19b0:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
    19b2:	4620      	mov	r0, r4
    19b4:	4b03      	ldr	r3, [pc, #12]	; (19c4 <_usart_sync_init+0x28>)
    19b6:	4798      	blx	r3
}
    19b8:	bd38      	pop	{r3, r4, r5, pc}
    19ba:	bf00      	nop
    19bc:	000025c8 	.word	0x000025c8
    19c0:	00000f79 	.word	0x00000f79
    19c4:	00001901 	.word	0x00001901

000019c8 <_usart_sync_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    19c8:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    19ca:	6813      	ldr	r3, [r2, #0]
    19cc:	f043 0302 	orr.w	r3, r3, #2
    19d0:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    19d2:	69d3      	ldr	r3, [r2, #28]
    19d4:	f013 0f03 	tst.w	r3, #3
    19d8:	d1fb      	bne.n	19d2 <_usart_sync_enable+0xa>
}
    19da:	4770      	bx	lr

000019dc <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    19dc:	6803      	ldr	r3, [r0, #0]
	((Sercom *)hw)->USART.DATA.reg = data;
    19de:	6299      	str	r1, [r3, #40]	; 0x28
    19e0:	4770      	bx	lr

000019e2 <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
    19e2:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
    19e4:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    19e6:	b2c0      	uxtb	r0, r0
    19e8:	4770      	bx	lr

000019ea <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    19ea:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    19ec:	7e18      	ldrb	r0, [r3, #24]
}
    19ee:	f000 0001 	and.w	r0, r0, #1
    19f2:	4770      	bx	lr

000019f4 <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
    19f4:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    19f6:	7e18      	ldrb	r0, [r3, #24]
}
    19f8:	f3c0 0040 	ubfx	r0, r0, #1, #1
    19fc:	4770      	bx	lr

000019fe <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    19fe:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    1a00:	7e18      	ldrb	r0, [r3, #24]
}
    1a02:	f3c0 0080 	ubfx	r0, r0, #2, #1
    1a06:	4770      	bx	lr

00001a08 <SERCOM7_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_0_Handler(void)
{
    1a08:	b508      	push	{r3, lr}
	_spi_handler(_sercom7_dev);
    1a0a:	4b02      	ldr	r3, [pc, #8]	; (1a14 <SERCOM7_0_Handler+0xc>)
    1a0c:	6818      	ldr	r0, [r3, #0]
    1a0e:	4b02      	ldr	r3, [pc, #8]	; (1a18 <SERCOM7_0_Handler+0x10>)
    1a10:	4798      	blx	r3
    1a12:	bd08      	pop	{r3, pc}
    1a14:	200001e4 	.word	0x200001e4
    1a18:	000018b5 	.word	0x000018b5

00001a1c <SERCOM7_1_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_1_Handler(void)
{
    1a1c:	b508      	push	{r3, lr}
	_spi_handler(_sercom7_dev);
    1a1e:	4b02      	ldr	r3, [pc, #8]	; (1a28 <SERCOM7_1_Handler+0xc>)
    1a20:	6818      	ldr	r0, [r3, #0]
    1a22:	4b02      	ldr	r3, [pc, #8]	; (1a2c <SERCOM7_1_Handler+0x10>)
    1a24:	4798      	blx	r3
    1a26:	bd08      	pop	{r3, pc}
    1a28:	200001e4 	.word	0x200001e4
    1a2c:	000018b5 	.word	0x000018b5

00001a30 <SERCOM7_2_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_2_Handler(void)
{
    1a30:	b508      	push	{r3, lr}
	_spi_handler(_sercom7_dev);
    1a32:	4b02      	ldr	r3, [pc, #8]	; (1a3c <SERCOM7_2_Handler+0xc>)
    1a34:	6818      	ldr	r0, [r3, #0]
    1a36:	4b02      	ldr	r3, [pc, #8]	; (1a40 <SERCOM7_2_Handler+0x10>)
    1a38:	4798      	blx	r3
    1a3a:	bd08      	pop	{r3, pc}
    1a3c:	200001e4 	.word	0x200001e4
    1a40:	000018b5 	.word	0x000018b5

00001a44 <SERCOM7_3_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_3_Handler(void)
{
    1a44:	b508      	push	{r3, lr}
	_spi_handler(_sercom7_dev);
    1a46:	4b02      	ldr	r3, [pc, #8]	; (1a50 <SERCOM7_3_Handler+0xc>)
    1a48:	6818      	ldr	r0, [r3, #0]
    1a4a:	4b02      	ldr	r3, [pc, #8]	; (1a54 <SERCOM7_3_Handler+0x10>)
    1a4c:	4798      	blx	r3
    1a4e:	bd08      	pop	{r3, pc}
    1a50:	200001e4 	.word	0x200001e4
    1a54:	000018b5 	.word	0x000018b5

00001a58 <_spi_m_sync_init>:
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    1a58:	b538      	push	{r3, r4, r5, lr}
    1a5a:	4605      	mov	r5, r0
    1a5c:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    1a5e:	4608      	mov	r0, r1
    1a60:	4b36      	ldr	r3, [pc, #216]	; (1b3c <_spi_m_sync_init+0xe4>)
    1a62:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    1a64:	2807      	cmp	r0, #7
    1a66:	d00c      	beq.n	1a82 <_spi_m_sync_init+0x2a>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    1a68:	2d00      	cmp	r5, #0
    1a6a:	d055      	beq.n	1b18 <_spi_m_sync_init+0xc0>
    1a6c:	f640 1273 	movw	r2, #2419	; 0x973
    1a70:	4933      	ldr	r1, [pc, #204]	; (1b40 <_spi_m_sync_init+0xe8>)
    1a72:	1c20      	adds	r0, r4, #0
    1a74:	bf18      	it	ne
    1a76:	2001      	movne	r0, #1
    1a78:	4b32      	ldr	r3, [pc, #200]	; (1b44 <_spi_m_sync_init+0xec>)
    1a7a:	4798      	blx	r3

	if (regs == NULL) {
		return ERR_INVALID_ARG;
    1a7c:	f06f 000c 	mvn.w	r0, #12
    1a80:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(dev && hw);
    1a82:	2d00      	cmp	r5, #0
    1a84:	d151      	bne.n	1b2a <_spi_m_sync_init+0xd2>
    1a86:	f640 1273 	movw	r2, #2419	; 0x973
    1a8a:	492d      	ldr	r1, [pc, #180]	; (1b40 <_spi_m_sync_init+0xe8>)
    1a8c:	2000      	movs	r0, #0
    1a8e:	4b2d      	ldr	r3, [pc, #180]	; (1b44 <_spi_m_sync_init+0xec>)
    1a90:	4798      	blx	r3
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    1a92:	69e3      	ldr	r3, [r4, #28]
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    1a94:	f013 0f01 	tst.w	r3, #1
    1a98:	d119      	bne.n	1ace <_spi_m_sync_init+0x76>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1a9a:	69e3      	ldr	r3, [r4, #28]
    1a9c:	f013 0f03 	tst.w	r3, #3
    1aa0:	d1fb      	bne.n	1a9a <_spi_m_sync_init+0x42>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    1aa2:	6823      	ldr	r3, [r4, #0]
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    1aa4:	f013 0f02 	tst.w	r3, #2
    1aa8:	d00b      	beq.n	1ac2 <_spi_m_sync_init+0x6a>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    1aaa:	6823      	ldr	r3, [r4, #0]
    1aac:	f023 0302 	bic.w	r3, r3, #2
    1ab0:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1ab2:	69e3      	ldr	r3, [r4, #28]
    1ab4:	f013 0f03 	tst.w	r3, #3
    1ab8:	d1fb      	bne.n	1ab2 <_spi_m_sync_init+0x5a>
    1aba:	69e3      	ldr	r3, [r4, #28]
    1abc:	f013 0f02 	tst.w	r3, #2
    1ac0:	d1fb      	bne.n	1aba <_spi_m_sync_init+0x62>
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    1ac2:	230d      	movs	r3, #13
    1ac4:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1ac6:	69e3      	ldr	r3, [r4, #28]
    1ac8:	f013 0f03 	tst.w	r3, #3
    1acc:	d1fb      	bne.n	1ac6 <_spi_m_sync_init+0x6e>
    1ace:	69e3      	ldr	r3, [r4, #28]
    1ad0:	f013 0f01 	tst.w	r3, #1
    1ad4:	d1fb      	bne.n	1ace <_spi_m_sync_init+0x76>
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    1ad6:	602c      	str	r4, [r5, #0]
	ASSERT(hw && regs);
    1ad8:	f640 1206 	movw	r2, #2310	; 0x906
    1adc:	4918      	ldr	r1, [pc, #96]	; (1b40 <_spi_m_sync_init+0xe8>)
    1ade:	1c20      	adds	r0, r4, #0
    1ae0:	bf18      	it	ne
    1ae2:	2001      	movne	r0, #1
    1ae4:	4b17      	ldr	r3, [pc, #92]	; (1b44 <_spi_m_sync_init+0xec>)
    1ae6:	4798      	blx	r3
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    1ae8:	4b17      	ldr	r3, [pc, #92]	; (1b48 <_spi_m_sync_init+0xf0>)
    1aea:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1aec:	69e3      	ldr	r3, [r4, #28]
    1aee:	f013 0f03 	tst.w	r3, #3
    1af2:	d1fb      	bne.n	1aec <_spi_m_sync_init+0x94>
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    1af4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    1af8:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1afa:	69e3      	ldr	r3, [r4, #28]
    1afc:	f013 0f17 	tst.w	r3, #23
    1b00:	d1fb      	bne.n	1afa <_spi_m_sync_init+0xa2>
	((Sercom *)hw)->SPI.BAUD.reg = data;
    1b02:	2377      	movs	r3, #119	; 0x77
    1b04:	7323      	strb	r3, [r4, #12]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    1b06:	2000      	movs	r0, #0
    1b08:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    1b0c:	2301      	movs	r3, #1
    1b0e:	712b      	strb	r3, [r5, #4]

	dev->dummy_byte = regs->dummy_byte;
    1b10:	f240 13ff 	movw	r3, #511	; 0x1ff
    1b14:	80eb      	strh	r3, [r5, #6]

	return ERR_NONE;
    1b16:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(dev && hw);
    1b18:	f640 1273 	movw	r2, #2419	; 0x973
    1b1c:	4908      	ldr	r1, [pc, #32]	; (1b40 <_spi_m_sync_init+0xe8>)
    1b1e:	2000      	movs	r0, #0
    1b20:	4b08      	ldr	r3, [pc, #32]	; (1b44 <_spi_m_sync_init+0xec>)
    1b22:	4798      	blx	r3
		return ERR_INVALID_ARG;
    1b24:	f06f 000c 	mvn.w	r0, #12
    1b28:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(dev && hw);
    1b2a:	f640 1273 	movw	r2, #2419	; 0x973
    1b2e:	4904      	ldr	r1, [pc, #16]	; (1b40 <_spi_m_sync_init+0xe8>)
    1b30:	1c20      	adds	r0, r4, #0
    1b32:	bf18      	it	ne
    1b34:	2001      	movne	r0, #1
    1b36:	4b03      	ldr	r3, [pc, #12]	; (1b44 <_spi_m_sync_init+0xec>)
    1b38:	4798      	blx	r3
    1b3a:	e7aa      	b.n	1a92 <_spi_m_sync_init+0x3a>
    1b3c:	0000185d 	.word	0x0000185d
    1b40:	000025c8 	.word	0x000025c8
    1b44:	00000f79 	.word	0x00000f79
    1b48:	0020000c 	.word	0x0020000c

00001b4c <_spi_m_async_init>:
{
	return _spi_m_sync_init(dev, hw);
}

int32_t _spi_m_async_init(struct _spi_async_dev *dev, void *const hw)
{
    1b4c:	b538      	push	{r3, r4, r5, lr}
    1b4e:	4604      	mov	r4, r0
    1b50:	460d      	mov	r5, r1
	struct _spi_async_dev *spid = dev;
	/* Do hardware initialize. */
	int32_t rc = _spi_m_sync_init((struct _spi_m_sync_dev *)dev, hw);
    1b52:	4b15      	ldr	r3, [pc, #84]	; (1ba8 <_spi_m_async_init+0x5c>)
    1b54:	4798      	blx	r3

	if (rc < 0) {
    1b56:	2800      	cmp	r0, #0
    1b58:	db25      	blt.n	1ba6 <_spi_m_async_init+0x5a>
	if (hw == SERCOM7) {
    1b5a:	4b14      	ldr	r3, [pc, #80]	; (1bac <_spi_m_async_init+0x60>)
    1b5c:	429d      	cmp	r5, r3
		_sercom7_dev = (struct _spi_async_dev *)dev;
    1b5e:	bf04      	itt	eq
    1b60:	4b13      	ldreq	r3, [pc, #76]	; (1bb0 <_spi_m_async_init+0x64>)
    1b62:	601c      	streq	r4, [r3, #0]
		return rc;
	}

	_sercom_init_irq_param(hw, (void *)dev);
	/* Initialize callbacks: must use them */
	spid->callbacks.complete = NULL;
    1b64:	2300      	movs	r3, #0
    1b66:	6123      	str	r3, [r4, #16]
	spid->callbacks.rx       = NULL;
    1b68:	60e3      	str	r3, [r4, #12]
	spid->callbacks.tx       = NULL;
    1b6a:	60a3      	str	r3, [r4, #8]
	uint8_t irq              = _sercom_get_irq_num(hw);
    1b6c:	4628      	mov	r0, r5
    1b6e:	4b11      	ldr	r3, [pc, #68]	; (1bb4 <_spi_m_async_init+0x68>)
    1b70:	4798      	blx	r3
    1b72:	1d01      	adds	r1, r0, #4
    1b74:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1b76:	2401      	movs	r4, #1
    1b78:	f000 021f 	and.w	r2, r0, #31
    1b7c:	fa04 f202 	lsl.w	r2, r4, r2
    1b80:	0943      	lsrs	r3, r0, #5
    1b82:	009b      	lsls	r3, r3, #2
    1b84:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    1b88:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    1b8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1b90:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1b94:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1b98:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	for (uint32_t i = 0; i < 4; i++) {
		NVIC_DisableIRQ((IRQn_Type)irq);
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
		irq++;
    1b9c:	3001      	adds	r0, #1
    1b9e:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    1ba0:	4281      	cmp	r1, r0
    1ba2:	d1e9      	bne.n	1b78 <_spi_m_async_init+0x2c>
	}

	return ERR_NONE;
    1ba4:	2000      	movs	r0, #0
}
    1ba6:	bd38      	pop	{r3, r4, r5, pc}
    1ba8:	00001a59 	.word	0x00001a59
    1bac:	43000c00 	.word	0x43000c00
    1bb0:	200001e4 	.word	0x200001e4
    1bb4:	000018a1 	.word	0x000018a1

00001bb8 <_spi_m_async_enable_tx>:

	return rc;
}

int32_t _spi_m_async_enable_tx(struct _spi_async_dev *dev, bool state)
{
    1bb8:	b538      	push	{r3, r4, r5, lr}
    1bba:	460d      	mov	r5, r1
	void *hw = dev->prvt;
    1bbc:	6804      	ldr	r4, [r0, #0]

	ASSERT(dev && hw);
    1bbe:	b160      	cbz	r0, 1bda <_spi_m_async_enable_tx+0x22>
    1bc0:	1c20      	adds	r0, r4, #0
    1bc2:	bf18      	it	ne
    1bc4:	2001      	movne	r0, #1
    1bc6:	f640 3203 	movw	r2, #2819	; 0xb03
    1bca:	4906      	ldr	r1, [pc, #24]	; (1be4 <_spi_m_async_enable_tx+0x2c>)
    1bcc:	4b06      	ldr	r3, [pc, #24]	; (1be8 <_spi_m_async_enable_tx+0x30>)
    1bce:	4798      	blx	r3

	if (state) {
    1bd0:	b92d      	cbnz	r5, 1bde <_spi_m_async_enable_tx+0x26>
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_DRE;
    1bd2:	2301      	movs	r3, #1
    1bd4:	7523      	strb	r3, [r4, #20]
	} else {
		hri_sercomspi_clear_INTEN_DRE_bit(hw);
	}

	return ERR_NONE;
}
    1bd6:	2000      	movs	r0, #0
    1bd8:	bd38      	pop	{r3, r4, r5, pc}
    1bda:	2000      	movs	r0, #0
    1bdc:	e7f3      	b.n	1bc6 <_spi_m_async_enable_tx+0xe>
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
    1bde:	2301      	movs	r3, #1
    1be0:	75a3      	strb	r3, [r4, #22]
    1be2:	e7f8      	b.n	1bd6 <_spi_m_async_enable_tx+0x1e>
    1be4:	000025c8 	.word	0x000025c8
    1be8:	00000f79 	.word	0x00000f79

00001bec <_spi_m_async_enable_rx>:
{
	return _spi_m_async_enable_tx(dev, state);
}

int32_t _spi_m_async_enable_rx(struct _spi_async_dev *dev, bool state)
{
    1bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1bee:	460f      	mov	r7, r1
	void *hw = dev->prvt;
    1bf0:	6804      	ldr	r4, [r0, #0]

	ASSERT(dev);
    1bf2:	4e0c      	ldr	r6, [pc, #48]	; (1c24 <_spi_m_async_enable_rx+0x38>)
    1bf4:	f640 3217 	movw	r2, #2839	; 0xb17
    1bf8:	4631      	mov	r1, r6
    1bfa:	3000      	adds	r0, #0
    1bfc:	bf18      	it	ne
    1bfe:	2001      	movne	r0, #1
    1c00:	4d09      	ldr	r5, [pc, #36]	; (1c28 <_spi_m_async_enable_rx+0x3c>)
    1c02:	47a8      	blx	r5
	ASSERT(hw);
    1c04:	f640 3218 	movw	r2, #2840	; 0xb18
    1c08:	4631      	mov	r1, r6
    1c0a:	1c20      	adds	r0, r4, #0
    1c0c:	bf18      	it	ne
    1c0e:	2001      	movne	r0, #1
    1c10:	47a8      	blx	r5

	if (state) {
    1c12:	b91f      	cbnz	r7, 1c1c <_spi_m_async_enable_rx+0x30>
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_RXC;
    1c14:	2304      	movs	r3, #4
    1c16:	7523      	strb	r3, [r4, #20]
	} else {
		hri_sercomspi_clear_INTEN_RXC_bit(hw);
	}

	return ERR_NONE;
}
    1c18:	2000      	movs	r0, #0
    1c1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
    1c1c:	2304      	movs	r3, #4
    1c1e:	75a3      	strb	r3, [r4, #22]
    1c20:	e7fa      	b.n	1c18 <_spi_m_async_enable_rx+0x2c>
    1c22:	bf00      	nop
    1c24:	000025c8 	.word	0x000025c8
    1c28:	00000f79 	.word	0x00000f79

00001c2c <_spi_m_async_enable_tx_complete>:
{
	return _spi_m_async_enable_rx(dev, state);
}

int32_t _spi_m_async_enable_tx_complete(struct _spi_async_dev *dev, bool state)
{
    1c2c:	b538      	push	{r3, r4, r5, lr}
    1c2e:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
    1c30:	4604      	mov	r4, r0
    1c32:	b170      	cbz	r0, 1c52 <_spi_m_async_enable_tx_complete+0x26>
    1c34:	6800      	ldr	r0, [r0, #0]
    1c36:	3000      	adds	r0, #0
    1c38:	bf18      	it	ne
    1c3a:	2001      	movne	r0, #1
    1c3c:	f640 322a 	movw	r2, #2858	; 0xb2a
    1c40:	4907      	ldr	r1, [pc, #28]	; (1c60 <_spi_m_async_enable_tx_complete+0x34>)
    1c42:	4b08      	ldr	r3, [pc, #32]	; (1c64 <_spi_m_async_enable_tx_complete+0x38>)
    1c44:	4798      	blx	r3

	if (state) {
    1c46:	b935      	cbnz	r5, 1c56 <_spi_m_async_enable_tx_complete+0x2a>
		hri_sercomspi_set_INTEN_TXC_bit(dev->prvt);
	} else {
		hri_sercomspi_clear_INTEN_TXC_bit(dev->prvt);
    1c48:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_TXC;
    1c4a:	2202      	movs	r2, #2
    1c4c:	751a      	strb	r2, [r3, #20]
	}

	return ERR_NONE;
}
    1c4e:	2000      	movs	r0, #0
    1c50:	bd38      	pop	{r3, r4, r5, pc}
    1c52:	2000      	movs	r0, #0
    1c54:	e7f2      	b.n	1c3c <_spi_m_async_enable_tx_complete+0x10>
		hri_sercomspi_set_INTEN_TXC_bit(dev->prvt);
    1c56:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
    1c58:	2202      	movs	r2, #2
    1c5a:	759a      	strb	r2, [r3, #22]
    1c5c:	e7f7      	b.n	1c4e <_spi_m_async_enable_tx_complete+0x22>
    1c5e:	bf00      	nop
    1c60:	000025c8 	.word	0x000025c8
    1c64:	00000f79 	.word	0x00000f79

00001c68 <_spi_m_async_write_one>:
{
	return _spi_m_async_enable_tx_complete(dev, state);
}

int32_t _spi_m_async_write_one(struct _spi_async_dev *dev, uint16_t data)
{
    1c68:	b538      	push	{r3, r4, r5, lr}
    1c6a:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
    1c6c:	4604      	mov	r4, r0
    1c6e:	b160      	cbz	r0, 1c8a <_spi_m_async_write_one+0x22>
    1c70:	6800      	ldr	r0, [r0, #0]
    1c72:	3000      	adds	r0, #0
    1c74:	bf18      	it	ne
    1c76:	2001      	movne	r0, #1
    1c78:	f640 323c 	movw	r2, #2876	; 0xb3c
    1c7c:	4904      	ldr	r1, [pc, #16]	; (1c90 <_spi_m_async_write_one+0x28>)
    1c7e:	4b05      	ldr	r3, [pc, #20]	; (1c94 <_spi_m_async_write_one+0x2c>)
    1c80:	4798      	blx	r3

	hri_sercomspi_write_DATA_reg(dev->prvt, data);
    1c82:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.DATA.reg = data;
    1c84:	629d      	str	r5, [r3, #40]	; 0x28

	return ERR_NONE;
}
    1c86:	2000      	movs	r0, #0
    1c88:	bd38      	pop	{r3, r4, r5, pc}
    1c8a:	2000      	movs	r0, #0
    1c8c:	e7f4      	b.n	1c78 <_spi_m_async_write_one+0x10>
    1c8e:	bf00      	nop
    1c90:	000025c8 	.word	0x000025c8
    1c94:	00000f79 	.word	0x00000f79

00001c98 <_spi_m_async_read_one>:

	return ERR_NONE;
}

uint16_t _spi_m_async_read_one(struct _spi_async_dev *dev)
{
    1c98:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    1c9a:	4604      	mov	r4, r0
    1c9c:	b160      	cbz	r0, 1cb8 <_spi_m_async_read_one+0x20>
    1c9e:	6800      	ldr	r0, [r0, #0]
    1ca0:	3000      	adds	r0, #0
    1ca2:	bf18      	it	ne
    1ca4:	2001      	movne	r0, #1
    1ca6:	f640 3257 	movw	r2, #2903	; 0xb57
    1caa:	4904      	ldr	r1, [pc, #16]	; (1cbc <_spi_m_async_read_one+0x24>)
    1cac:	4b04      	ldr	r3, [pc, #16]	; (1cc0 <_spi_m_async_read_one+0x28>)
    1cae:	4798      	blx	r3

	return hri_sercomspi_read_DATA_reg(dev->prvt);
    1cb0:	6823      	ldr	r3, [r4, #0]
	return ((Sercom *)hw)->SPI.DATA.reg;
    1cb2:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    1cb4:	b280      	uxth	r0, r0
    1cb6:	bd10      	pop	{r4, pc}
    1cb8:	2000      	movs	r0, #0
    1cba:	e7f4      	b.n	1ca6 <_spi_m_async_read_one+0xe>
    1cbc:	000025c8 	.word	0x000025c8
    1cc0:	00000f79 	.word	0x00000f79

00001cc4 <_spi_m_async_register_callback>:
	return hri_sercomspi_read_DATA_reg(dev->prvt);
}

int32_t _spi_m_async_register_callback(struct _spi_async_dev *dev, const enum _spi_async_dev_cb_type cb_type,
                                       const FUNC_PTR func)
{
    1cc4:	b570      	push	{r4, r5, r6, lr}
    1cc6:	460d      	mov	r5, r1
    1cc8:	4616      	mov	r6, r2
	typedef void (*func_t)(void);
	struct _spi_async_dev *spid = dev;

	ASSERT(dev && (cb_type < SPI_DEV_CB_N));
    1cca:	4604      	mov	r4, r0
    1ccc:	b168      	cbz	r0, 1cea <_spi_m_async_register_callback+0x26>
    1cce:	2903      	cmp	r1, #3
    1cd0:	bf8c      	ite	hi
    1cd2:	2000      	movhi	r0, #0
    1cd4:	2001      	movls	r0, #1
    1cd6:	f44f 6237 	mov.w	r2, #2928	; 0xb70
    1cda:	4905      	ldr	r1, [pc, #20]	; (1cf0 <_spi_m_async_register_callback+0x2c>)
    1cdc:	4b05      	ldr	r3, [pc, #20]	; (1cf4 <_spi_m_async_register_callback+0x30>)
    1cde:	4798      	blx	r3

	func_t *p_ls  = (func_t *)&spid->callbacks;
	p_ls[cb_type] = (func_t)func;
    1ce0:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    1ce4:	60a6      	str	r6, [r4, #8]

	return ERR_NONE;
}
    1ce6:	2000      	movs	r0, #0
    1ce8:	bd70      	pop	{r4, r5, r6, pc}
    1cea:	2000      	movs	r0, #0
    1cec:	e7f3      	b.n	1cd6 <_spi_m_async_register_callback+0x12>
    1cee:	bf00      	nop
    1cf0:	000025c8 	.word	0x000025c8
    1cf4:	00000f79 	.word	0x00000f79

00001cf8 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    1cf8:	b570      	push	{r4, r5, r6, lr}
    1cfa:	b088      	sub	sp, #32
    1cfc:	4606      	mov	r6, r0
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    1cfe:	466c      	mov	r4, sp
    1d00:	4d17      	ldr	r5, [pc, #92]	; (1d60 <get_tc_index+0x68>)
    1d02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1d04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1d06:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    1d0a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    1d0e:	9b00      	ldr	r3, [sp, #0]
    1d10:	42b3      	cmp	r3, r6
    1d12:	d01e      	beq.n	1d52 <get_tc_index+0x5a>
    1d14:	4630      	mov	r0, r6
    1d16:	aa01      	add	r2, sp, #4
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    1d18:	2301      	movs	r3, #1
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    1d1a:	f852 1b04 	ldr.w	r1, [r2], #4
    1d1e:	4281      	cmp	r1, r0
    1d20:	d018      	beq.n	1d54 <get_tc_index+0x5c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    1d22:	3301      	adds	r3, #1
    1d24:	2b08      	cmp	r3, #8
    1d26:	d1f8      	bne.n	1d1a <get_tc_index+0x22>
			return i;
		}
	}
	return 0;
    1d28:	2300      	movs	r3, #0
		if (_tcs[i].number == index) {
    1d2a:	4a0e      	ldr	r2, [pc, #56]	; (1d64 <get_tc_index+0x6c>)
    1d2c:	7812      	ldrb	r2, [r2, #0]
    1d2e:	429a      	cmp	r2, r3
    1d30:	d012      	beq.n	1d58 <get_tc_index+0x60>
    1d32:	4a0c      	ldr	r2, [pc, #48]	; (1d64 <get_tc_index+0x6c>)
    1d34:	7d12      	ldrb	r2, [r2, #20]
    1d36:	429a      	cmp	r2, r3
    1d38:	bf08      	it	eq
    1d3a:	2001      	moveq	r0, #1
    1d3c:	d00d      	beq.n	1d5a <get_tc_index+0x62>
	ASSERT(false);
    1d3e:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
    1d42:	4909      	ldr	r1, [pc, #36]	; (1d68 <get_tc_index+0x70>)
    1d44:	2000      	movs	r0, #0
    1d46:	4b09      	ldr	r3, [pc, #36]	; (1d6c <get_tc_index+0x74>)
    1d48:	4798      	blx	r3
	return -1;
    1d4a:	f04f 30ff 	mov.w	r0, #4294967295
}
    1d4e:	b008      	add	sp, #32
    1d50:	bd70      	pop	{r4, r5, r6, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    1d52:	2300      	movs	r3, #0
			return i;
    1d54:	b2db      	uxtb	r3, r3
    1d56:	e7e8      	b.n	1d2a <get_tc_index+0x32>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    1d58:	2000      	movs	r0, #0
			return i;
    1d5a:	b240      	sxtb	r0, r0
    1d5c:	e7f7      	b.n	1d4e <get_tc_index+0x56>
    1d5e:	bf00      	nop
    1d60:	000025e4 	.word	0x000025e4
    1d64:	20000000 	.word	0x20000000
    1d68:	00002604 	.word	0x00002604
    1d6c:	00000f79 	.word	0x00000f79

00001d70 <_timer_init>:
{
    1d70:	b570      	push	{r4, r5, r6, lr}
    1d72:	4606      	mov	r6, r0
    1d74:	460c      	mov	r4, r1
	int8_t i = get_tc_index(hw);
    1d76:	4608      	mov	r0, r1
    1d78:	4b69      	ldr	r3, [pc, #420]	; (1f20 <_timer_init+0x1b0>)
    1d7a:	4798      	blx	r3
    1d7c:	4605      	mov	r5, r0
	device->hw = hw;
    1d7e:	60f4      	str	r4, [r6, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    1d80:	228f      	movs	r2, #143	; 0x8f
    1d82:	4968      	ldr	r1, [pc, #416]	; (1f24 <_timer_init+0x1b4>)
    1d84:	2001      	movs	r0, #1
    1d86:	4b68      	ldr	r3, [pc, #416]	; (1f28 <_timer_init+0x1b8>)
    1d88:	4798      	blx	r3
	};
}

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    1d8a:	6923      	ldr	r3, [r4, #16]
	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    1d8c:	f013 0f01 	tst.w	r3, #1
    1d90:	d119      	bne.n	1dc6 <_timer_init+0x56>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1d92:	6923      	ldr	r3, [r4, #16]
    1d94:	f013 0f03 	tst.w	r3, #3
    1d98:	d1fb      	bne.n	1d92 <_timer_init+0x22>

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    1d9a:	6823      	ldr	r3, [r4, #0]
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    1d9c:	f013 0f02 	tst.w	r3, #2
    1da0:	d00b      	beq.n	1dba <_timer_init+0x4a>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    1da2:	6823      	ldr	r3, [r4, #0]
    1da4:	f023 0302 	bic.w	r3, r3, #2
    1da8:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1daa:	6923      	ldr	r3, [r4, #16]
    1dac:	f013 0f03 	tst.w	r3, #3
    1db0:	d1fb      	bne.n	1daa <_timer_init+0x3a>
    1db2:	6923      	ldr	r3, [r4, #16]
    1db4:	f013 0f02 	tst.w	r3, #2
    1db8:	d1fb      	bne.n	1db2 <_timer_init+0x42>
}

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1dba:	2301      	movs	r3, #1
    1dbc:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1dbe:	6923      	ldr	r3, [r4, #16]
    1dc0:	f013 0f03 	tst.w	r3, #3
    1dc4:	d1fb      	bne.n	1dbe <_timer_init+0x4e>
    1dc6:	6923      	ldr	r3, [r4, #16]
    1dc8:	f013 0f01 	tst.w	r3, #1
    1dcc:	d1fb      	bne.n	1dc6 <_timer_init+0x56>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    1dce:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    1dd2:	4a56      	ldr	r2, [pc, #344]	; (1f2c <_timer_init+0x1bc>)
    1dd4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1dd8:	685a      	ldr	r2, [r3, #4]
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1dda:	6022      	str	r2, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1ddc:	6923      	ldr	r3, [r4, #16]
    1dde:	f013 0f03 	tst.w	r3, #3
    1de2:	d1fb      	bne.n	1ddc <_timer_init+0x6c>
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    1de4:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    1de8:	4950      	ldr	r1, [pc, #320]	; (1f2c <_timer_init+0x1bc>)
    1dea:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    1dee:	7a99      	ldrb	r1, [r3, #10]
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    1df0:	73e1      	strb	r1, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    1df2:	891b      	ldrh	r3, [r3, #8]
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    1df4:	80e3      	strh	r3, [r4, #6]
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    1df6:	2301      	movs	r3, #1
    1df8:	7323      	strb	r3, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    1dfa:	f002 020c 	and.w	r2, r2, #12
    1dfe:	2a08      	cmp	r2, #8
    1e00:	d050      	beq.n	1ea4 <_timer_init+0x134>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    1e02:	2a00      	cmp	r2, #0
    1e04:	d165      	bne.n	1ed2 <_timer_init+0x162>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    1e06:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    1e0a:	4a48      	ldr	r2, [pc, #288]	; (1f2c <_timer_init+0x1bc>)
    1e0c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1e10:	899b      	ldrh	r3, [r3, #12]
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    1e12:	83a3      	strh	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1e14:	6923      	ldr	r3, [r4, #16]
    1e16:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    1e1a:	d1fb      	bne.n	1e14 <_timer_init+0xa4>
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    1e1c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    1e20:	4a42      	ldr	r2, [pc, #264]	; (1f2c <_timer_init+0x1bc>)
    1e22:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1e26:	8a1b      	ldrh	r3, [r3, #16]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    1e28:	83e3      	strh	r3, [r4, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1e2a:	6923      	ldr	r3, [r4, #16]
    1e2c:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    1e30:	d1fb      	bne.n	1e2a <_timer_init+0xba>
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    1e32:	2301      	movs	r3, #1
    1e34:	7263      	strb	r3, [r4, #9]
	if (hw == TC1) {
    1e36:	4b3e      	ldr	r3, [pc, #248]	; (1f30 <_timer_init+0x1c0>)
    1e38:	429c      	cmp	r4, r3
    1e3a:	d06e      	beq.n	1f1a <_timer_init+0x1aa>
	if (hw == TC4) {
    1e3c:	4b3d      	ldr	r3, [pc, #244]	; (1f34 <_timer_init+0x1c4>)
    1e3e:	429c      	cmp	r4, r3
		_tc4_dev = (struct _pwm_device *)dev;
    1e40:	bf04      	itt	eq
    1e42:	4b3d      	ldreq	r3, [pc, #244]	; (1f38 <_timer_init+0x1c8>)
    1e44:	605e      	streq	r6, [r3, #4]
	NVIC_DisableIRQ(_tcs[i].irq);
    1e46:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    1e4a:	4a38      	ldr	r2, [pc, #224]	; (1f2c <_timer_init+0x1bc>)
    1e4c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1e50:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    1e54:	2b00      	cmp	r3, #0
    1e56:	db23      	blt.n	1ea0 <_timer_init+0x130>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1e58:	095a      	lsrs	r2, r3, #5
    1e5a:	f003 031f 	and.w	r3, r3, #31
    1e5e:	2101      	movs	r1, #1
    1e60:	fa01 f303 	lsl.w	r3, r1, r3
    1e64:	3220      	adds	r2, #32
    1e66:	4935      	ldr	r1, [pc, #212]	; (1f3c <_timer_init+0x1cc>)
    1e68:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    1e6c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1e70:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    1e74:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    1e78:	4b2c      	ldr	r3, [pc, #176]	; (1f2c <_timer_init+0x1bc>)
    1e7a:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    1e7e:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
  if ((int32_t)(IRQn) >= 0)
    1e82:	2b00      	cmp	r3, #0
    1e84:	db0c      	blt.n	1ea0 <_timer_init+0x130>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1e86:	0959      	lsrs	r1, r3, #5
    1e88:	f003 031f 	and.w	r3, r3, #31
    1e8c:	2201      	movs	r2, #1
    1e8e:	fa02 f303 	lsl.w	r3, r2, r3
    1e92:	4a2a      	ldr	r2, [pc, #168]	; (1f3c <_timer_init+0x1cc>)
    1e94:	f101 0060 	add.w	r0, r1, #96	; 0x60
    1e98:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1e9c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    1ea0:	2000      	movs	r0, #0
    1ea2:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    1ea4:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    1ea8:	4a20      	ldr	r2, [pc, #128]	; (1f2c <_timer_init+0x1bc>)
    1eaa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1eae:	68db      	ldr	r3, [r3, #12]
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    1eb0:	61e3      	str	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1eb2:	6923      	ldr	r3, [r4, #16]
    1eb4:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    1eb8:	d1fb      	bne.n	1eb2 <_timer_init+0x142>
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    1eba:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    1ebe:	4a1b      	ldr	r2, [pc, #108]	; (1f2c <_timer_init+0x1bc>)
    1ec0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1ec4:	691b      	ldr	r3, [r3, #16]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    1ec6:	6223      	str	r3, [r4, #32]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1ec8:	6923      	ldr	r3, [r4, #16]
    1eca:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    1ece:	d1fb      	bne.n	1ec8 <_timer_init+0x158>
    1ed0:	e7af      	b.n	1e32 <_timer_init+0xc2>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    1ed2:	2a04      	cmp	r2, #4
    1ed4:	d1ad      	bne.n	1e32 <_timer_init+0xc2>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    1ed6:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    1eda:	4a14      	ldr	r2, [pc, #80]	; (1f2c <_timer_init+0x1bc>)
    1edc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1ee0:	7b1b      	ldrb	r3, [r3, #12]
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    1ee2:	7723      	strb	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1ee4:	6923      	ldr	r3, [r4, #16]
    1ee6:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    1eea:	d1fb      	bne.n	1ee4 <_timer_init+0x174>
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    1eec:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    1ef0:	4a0e      	ldr	r2, [pc, #56]	; (1f2c <_timer_init+0x1bc>)
    1ef2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1ef6:	7c1b      	ldrb	r3, [r3, #16]
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    1ef8:	7763      	strb	r3, [r4, #29]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1efa:	6923      	ldr	r3, [r4, #16]
    1efc:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    1f00:	d1fb      	bne.n	1efa <_timer_init+0x18a>
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    1f02:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    1f06:	4a09      	ldr	r2, [pc, #36]	; (1f2c <_timer_init+0x1bc>)
    1f08:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1f0c:	7adb      	ldrb	r3, [r3, #11]
	((Tc *)hw)->COUNT8.PER.reg = data;
    1f0e:	76e3      	strb	r3, [r4, #27]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1f10:	6923      	ldr	r3, [r4, #16]
    1f12:	f013 0f20 	tst.w	r3, #32
    1f16:	d1fb      	bne.n	1f10 <_timer_init+0x1a0>
    1f18:	e78b      	b.n	1e32 <_timer_init+0xc2>
		_tc1_dev = (struct _timer_device *)dev;
    1f1a:	4b07      	ldr	r3, [pc, #28]	; (1f38 <_timer_init+0x1c8>)
    1f1c:	601e      	str	r6, [r3, #0]
    1f1e:	e792      	b.n	1e46 <_timer_init+0xd6>
    1f20:	00001cf9 	.word	0x00001cf9
    1f24:	00002604 	.word	0x00002604
    1f28:	00000f79 	.word	0x00000f79
    1f2c:	20000000 	.word	0x20000000
    1f30:	40003c00 	.word	0x40003c00
    1f34:	42001400 	.word	0x42001400
    1f38:	200001e8 	.word	0x200001e8
    1f3c:	e000e100 	.word	0xe000e100

00001f40 <_pwm_init>:
{
    1f40:	b538      	push	{r3, r4, r5, lr}
    1f42:	4605      	mov	r5, r0
    1f44:	460c      	mov	r4, r1
	int8_t i   = get_tc_index(hw);
    1f46:	4608      	mov	r0, r1
    1f48:	4b57      	ldr	r3, [pc, #348]	; (20a8 <_pwm_init+0x168>)
    1f4a:	4798      	blx	r3
	device->hw = hw;
    1f4c:	612c      	str	r4, [r5, #16]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    1f4e:	6923      	ldr	r3, [r4, #16]
	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    1f50:	f013 0f01 	tst.w	r3, #1
    1f54:	d119      	bne.n	1f8a <_pwm_init+0x4a>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1f56:	6923      	ldr	r3, [r4, #16]
    1f58:	f013 0f03 	tst.w	r3, #3
    1f5c:	d1fb      	bne.n	1f56 <_pwm_init+0x16>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    1f5e:	6823      	ldr	r3, [r4, #0]
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    1f60:	f013 0f02 	tst.w	r3, #2
    1f64:	d00b      	beq.n	1f7e <_pwm_init+0x3e>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    1f66:	6823      	ldr	r3, [r4, #0]
    1f68:	f023 0302 	bic.w	r3, r3, #2
    1f6c:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1f6e:	6923      	ldr	r3, [r4, #16]
    1f70:	f013 0f03 	tst.w	r3, #3
    1f74:	d1fb      	bne.n	1f6e <_pwm_init+0x2e>
    1f76:	6923      	ldr	r3, [r4, #16]
    1f78:	f013 0f02 	tst.w	r3, #2
    1f7c:	d1fb      	bne.n	1f76 <_pwm_init+0x36>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1f7e:	2301      	movs	r3, #1
    1f80:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1f82:	6923      	ldr	r3, [r4, #16]
    1f84:	f013 0f03 	tst.w	r3, #3
    1f88:	d1fb      	bne.n	1f82 <_pwm_init+0x42>
    1f8a:	6923      	ldr	r3, [r4, #16]
    1f8c:	f013 0f01 	tst.w	r3, #1
    1f90:	d1fb      	bne.n	1f8a <_pwm_init+0x4a>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    1f92:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    1f96:	4a45      	ldr	r2, [pc, #276]	; (20ac <_pwm_init+0x16c>)
    1f98:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1f9c:	685a      	ldr	r2, [r3, #4]
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1f9e:	6022      	str	r2, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1fa0:	6923      	ldr	r3, [r4, #16]
    1fa2:	f013 0f03 	tst.w	r3, #3
    1fa6:	d1fb      	bne.n	1fa0 <_pwm_init+0x60>
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    1fa8:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    1fac:	493f      	ldr	r1, [pc, #252]	; (20ac <_pwm_init+0x16c>)
    1fae:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    1fb2:	7a99      	ldrb	r1, [r3, #10]
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    1fb4:	73e1      	strb	r1, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    1fb6:	891b      	ldrh	r3, [r3, #8]
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    1fb8:	80e3      	strh	r3, [r4, #6]
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    1fba:	2303      	movs	r3, #3
    1fbc:	7323      	strb	r3, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    1fbe:	f002 020c 	and.w	r2, r2, #12
    1fc2:	2a08      	cmp	r2, #8
    1fc4:	d04e      	beq.n	2064 <_pwm_init+0x124>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    1fc6:	2a00      	cmp	r2, #0
    1fc8:	d166      	bne.n	2098 <_pwm_init+0x158>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    1fca:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    1fce:	4a37      	ldr	r2, [pc, #220]	; (20ac <_pwm_init+0x16c>)
    1fd0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1fd4:	899b      	ldrh	r3, [r3, #12]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    1fd6:	83a3      	strh	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1fd8:	6923      	ldr	r3, [r4, #16]
    1fda:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    1fde:	d1fb      	bne.n	1fd8 <_pwm_init+0x98>
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    1fe0:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    1fe4:	4a31      	ldr	r2, [pc, #196]	; (20ac <_pwm_init+0x16c>)
    1fe6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1fea:	8a1b      	ldrh	r3, [r3, #16]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    1fec:	83e3      	strh	r3, [r4, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1fee:	6923      	ldr	r3, [r4, #16]
    1ff0:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    1ff4:	d1fb      	bne.n	1fee <_pwm_init+0xae>
	if (hw == TC1) {
    1ff6:	4b2e      	ldr	r3, [pc, #184]	; (20b0 <_pwm_init+0x170>)
    1ff8:	429c      	cmp	r4, r3
    1ffa:	d04a      	beq.n	2092 <_pwm_init+0x152>
	if (hw == TC4) {
    1ffc:	4b2d      	ldr	r3, [pc, #180]	; (20b4 <_pwm_init+0x174>)
    1ffe:	429c      	cmp	r4, r3
		_tc4_dev = (struct _pwm_device *)dev;
    2000:	bf04      	itt	eq
    2002:	4b2d      	ldreq	r3, [pc, #180]	; (20b8 <_pwm_init+0x178>)
    2004:	605d      	streq	r5, [r3, #4]
	NVIC_DisableIRQ(_tcs[i].irq);
    2006:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    200a:	4a28      	ldr	r2, [pc, #160]	; (20ac <_pwm_init+0x16c>)
    200c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2010:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    2014:	2b00      	cmp	r3, #0
    2016:	db42      	blt.n	209e <_pwm_init+0x15e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2018:	095a      	lsrs	r2, r3, #5
    201a:	f003 031f 	and.w	r3, r3, #31
    201e:	2101      	movs	r1, #1
    2020:	fa01 f303 	lsl.w	r3, r1, r3
    2024:	3220      	adds	r2, #32
    2026:	4925      	ldr	r1, [pc, #148]	; (20bc <_pwm_init+0x17c>)
    2028:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    202c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2030:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    2034:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    2038:	4b1c      	ldr	r3, [pc, #112]	; (20ac <_pwm_init+0x16c>)
    203a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    203e:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
  if ((int32_t)(IRQn) >= 0)
    2042:	2b00      	cmp	r3, #0
    2044:	db2d      	blt.n	20a2 <_pwm_init+0x162>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2046:	0959      	lsrs	r1, r3, #5
    2048:	f003 031f 	and.w	r3, r3, #31
    204c:	2201      	movs	r2, #1
    204e:	fa02 f303 	lsl.w	r3, r2, r3
    2052:	4a1a      	ldr	r2, [pc, #104]	; (20bc <_pwm_init+0x17c>)
    2054:	f101 0060 	add.w	r0, r1, #96	; 0x60
    2058:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    205c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return 0;
    2060:	2000      	movs	r0, #0
    2062:	bd38      	pop	{r3, r4, r5, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    2064:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    2068:	4a10      	ldr	r2, [pc, #64]	; (20ac <_pwm_init+0x16c>)
    206a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    206e:	68db      	ldr	r3, [r3, #12]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    2070:	61e3      	str	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2072:	6923      	ldr	r3, [r4, #16]
    2074:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2078:	d1fb      	bne.n	2072 <_pwm_init+0x132>
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    207a:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    207e:	4a0b      	ldr	r2, [pc, #44]	; (20ac <_pwm_init+0x16c>)
    2080:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2084:	691b      	ldr	r3, [r3, #16]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    2086:	6223      	str	r3, [r4, #32]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2088:	6923      	ldr	r3, [r4, #16]
    208a:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    208e:	d1fb      	bne.n	2088 <_pwm_init+0x148>
    2090:	e7b1      	b.n	1ff6 <_pwm_init+0xb6>
		_tc1_dev = (struct _timer_device *)dev;
    2092:	4b09      	ldr	r3, [pc, #36]	; (20b8 <_pwm_init+0x178>)
    2094:	601d      	str	r5, [r3, #0]
    2096:	e7b6      	b.n	2006 <_pwm_init+0xc6>
		return -1;
    2098:	f04f 30ff 	mov.w	r0, #4294967295
    209c:	bd38      	pop	{r3, r4, r5, pc}
	return 0;
    209e:	2000      	movs	r0, #0
    20a0:	bd38      	pop	{r3, r4, r5, pc}
    20a2:	2000      	movs	r0, #0
}
    20a4:	bd38      	pop	{r3, r4, r5, pc}
    20a6:	bf00      	nop
    20a8:	00001cf9 	.word	0x00001cf9
    20ac:	20000000 	.word	0x20000000
    20b0:	40003c00 	.word	0x40003c00
    20b4:	42001400 	.word	0x42001400
    20b8:	200001e8 	.word	0x200001e8
    20bc:	e000e100 	.word	0xe000e100

000020c0 <_timer_start>:
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    20c0:	68c2      	ldr	r2, [r0, #12]
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    20c2:	6813      	ldr	r3, [r2, #0]
    20c4:	f043 0302 	orr.w	r3, r3, #2
    20c8:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    20ca:	6913      	ldr	r3, [r2, #16]
    20cc:	f013 0f03 	tst.w	r3, #3
    20d0:	d1fb      	bne.n	20ca <_timer_start+0xa>
}
    20d2:	4770      	bx	lr

000020d4 <_pwm_enable>:
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    20d4:	6902      	ldr	r2, [r0, #16]
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    20d6:	6813      	ldr	r3, [r2, #0]
    20d8:	f043 0302 	orr.w	r3, r3, #2
    20dc:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    20de:	6913      	ldr	r3, [r2, #16]
    20e0:	f013 0f03 	tst.w	r3, #3
    20e4:	d1fb      	bne.n	20de <_pwm_enable+0xa>
}
    20e6:	4770      	bx	lr

000020e8 <_pwm_disable>:
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    20e8:	6902      	ldr	r2, [r0, #16]
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    20ea:	6813      	ldr	r3, [r2, #0]
    20ec:	f023 0302 	bic.w	r3, r3, #2
    20f0:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    20f2:	6913      	ldr	r3, [r2, #16]
    20f4:	f013 0f03 	tst.w	r3, #3
    20f8:	d1fb      	bne.n	20f2 <_pwm_disable+0xa>
}
    20fa:	4770      	bx	lr

000020fc <_pwm_set_param>:
{
    20fc:	b570      	push	{r4, r5, r6, lr}
    20fe:	460e      	mov	r6, r1
    2100:	4615      	mov	r5, r2
	void *const hw = device->hw;
    2102:	6904      	ldr	r4, [r0, #16]
	int8_t      i  = get_tc_index(hw);
    2104:	4620      	mov	r0, r4
    2106:	4b13      	ldr	r3, [pc, #76]	; (2154 <_pwm_set_param+0x58>)
    2108:	4798      	blx	r3
	_tcs[i].cc0 = period;
    210a:	4b13      	ldr	r3, [pc, #76]	; (2158 <_pwm_set_param+0x5c>)
    210c:	0082      	lsls	r2, r0, #2
    210e:	1811      	adds	r1, r2, r0
    2110:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    2114:	60ce      	str	r6, [r1, #12]
	_tcs[i].cc1 = duty_cycle;
    2116:	610d      	str	r5, [r1, #16]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    2118:	684b      	ldr	r3, [r1, #4]
    211a:	f003 030c 	and.w	r3, r3, #12
    211e:	2b08      	cmp	r3, #8
    2120:	d00c      	beq.n	213c <_pwm_set_param+0x40>
		hri_tccount16_write_CC_reg(hw, 0, _tcs[i].cc0);
    2122:	b2b6      	uxth	r6, r6
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    2124:	83a6      	strh	r6, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2126:	6923      	ldr	r3, [r4, #16]
    2128:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    212c:	d1fb      	bne.n	2126 <_pwm_set_param+0x2a>
		hri_tccount16_write_CC_reg(hw, 1, _tcs[i].cc1);
    212e:	b2ad      	uxth	r5, r5
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    2130:	83e5      	strh	r5, [r4, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2132:	6923      	ldr	r3, [r4, #16]
    2134:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2138:	d1fb      	bne.n	2132 <_pwm_set_param+0x36>
    213a:	bd70      	pop	{r4, r5, r6, pc}
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    213c:	61e6      	str	r6, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    213e:	6923      	ldr	r3, [r4, #16]
    2140:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2144:	d1fb      	bne.n	213e <_pwm_set_param+0x42>
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    2146:	6225      	str	r5, [r4, #32]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2148:	6923      	ldr	r3, [r4, #16]
    214a:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    214e:	d1fb      	bne.n	2148 <_pwm_set_param+0x4c>
    2150:	bd70      	pop	{r4, r5, r6, pc}
    2152:	bf00      	nop
    2154:	00001cf9 	.word	0x00001cf9
    2158:	20000000 	.word	0x20000000

0000215c <_timer_is_started>:
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    215c:	68c2      	ldr	r2, [r0, #12]
    215e:	6913      	ldr	r3, [r2, #16]
    2160:	f013 0f03 	tst.w	r3, #3
    2164:	d1fb      	bne.n	215e <_timer_is_started+0x2>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    2166:	6810      	ldr	r0, [r2, #0]
}
    2168:	f3c0 0040 	ubfx	r0, r0, #1, #1
    216c:	4770      	bx	lr

0000216e <_pwm_is_enabled>:
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    216e:	6902      	ldr	r2, [r0, #16]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2170:	6913      	ldr	r3, [r2, #16]
    2172:	f013 0f03 	tst.w	r3, #3
    2176:	d1fb      	bne.n	2170 <_pwm_is_enabled+0x2>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    2178:	6810      	ldr	r0, [r2, #0]
}
    217a:	f3c0 0040 	ubfx	r0, r0, #1, #1
    217e:	4770      	bx	lr

00002180 <_tc_get_timer>:
}
    2180:	2000      	movs	r0, #0
    2182:	4770      	bx	lr

00002184 <_tc_get_pwm>:
}
    2184:	2000      	movs	r0, #0
    2186:	4770      	bx	lr

00002188 <_timer_set_irq>:
{
    2188:	b510      	push	{r4, lr}
	int8_t      i  = get_tc_index(hw);
    218a:	68c0      	ldr	r0, [r0, #12]
    218c:	4b08      	ldr	r3, [pc, #32]	; (21b0 <_timer_set_irq+0x28>)
    218e:	4798      	blx	r3
    2190:	4604      	mov	r4, r0
	ASSERT(ARRAY_SIZE(_tcs));
    2192:	f240 129d 	movw	r2, #413	; 0x19d
    2196:	4907      	ldr	r1, [pc, #28]	; (21b4 <_timer_set_irq+0x2c>)
    2198:	2001      	movs	r0, #1
    219a:	4b07      	ldr	r3, [pc, #28]	; (21b8 <_timer_set_irq+0x30>)
    219c:	4798      	blx	r3
	_irq_set(_tcs[i].irq);
    219e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    21a2:	4b06      	ldr	r3, [pc, #24]	; (21bc <_timer_set_irq+0x34>)
    21a4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    21a8:	78a0      	ldrb	r0, [r4, #2]
    21aa:	4b05      	ldr	r3, [pc, #20]	; (21c0 <_timer_set_irq+0x38>)
    21ac:	4798      	blx	r3
    21ae:	bd10      	pop	{r4, pc}
    21b0:	00001cf9 	.word	0x00001cf9
    21b4:	00002604 	.word	0x00002604
    21b8:	00000f79 	.word	0x00000f79
    21bc:	20000000 	.word	0x20000000
    21c0:	000013a9 	.word	0x000013a9

000021c4 <TC1_Handler>:
{
    21c4:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc1_dev);
    21c6:	4b06      	ldr	r3, [pc, #24]	; (21e0 <TC1_Handler+0x1c>)
    21c8:	6818      	ldr	r0, [r3, #0]
	void *const hw = device->hw;
    21ca:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    21cc:	7a9a      	ldrb	r2, [r3, #10]
	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    21ce:	f012 0f01 	tst.w	r2, #1
    21d2:	d100      	bne.n	21d6 <TC1_Handler+0x12>
    21d4:	bd08      	pop	{r3, pc}
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    21d6:	2201      	movs	r2, #1
    21d8:	729a      	strb	r2, [r3, #10]
		device->timer_cb.period_expired(device);
    21da:	6803      	ldr	r3, [r0, #0]
    21dc:	4798      	blx	r3
}
    21de:	e7f9      	b.n	21d4 <TC1_Handler+0x10>
    21e0:	200001e8 	.word	0x200001e8

000021e4 <TC4_Handler>:
{
    21e4:	b538      	push	{r3, r4, r5, lr}
	tc_pwm_interrupt_handler(_tc4_dev);
    21e6:	4b0c      	ldr	r3, [pc, #48]	; (2218 <TC4_Handler+0x34>)
    21e8:	685d      	ldr	r5, [r3, #4]
	void *const hw = device->hw;
    21ea:	692c      	ldr	r4, [r5, #16]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    21ec:	7aa3      	ldrb	r3, [r4, #10]
	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    21ee:	f013 0f01 	tst.w	r3, #1
    21f2:	d005      	beq.n	2200 <TC4_Handler+0x1c>
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    21f4:	2301      	movs	r3, #1
    21f6:	72a3      	strb	r3, [r4, #10]
		if (NULL != device->callback.pwm_period_cb) {
    21f8:	682b      	ldr	r3, [r5, #0]
    21fa:	b10b      	cbz	r3, 2200 <TC4_Handler+0x1c>
			device->callback.pwm_period_cb(device);
    21fc:	4628      	mov	r0, r5
    21fe:	4798      	blx	r3
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    2200:	7a63      	ldrb	r3, [r4, #9]
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    2202:	f013 0f02 	tst.w	r3, #2
    2206:	d005      	beq.n	2214 <TC4_Handler+0x30>
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    2208:	2302      	movs	r3, #2
    220a:	72a3      	strb	r3, [r4, #10]
		if (NULL != device->callback.pwm_error_cb) {
    220c:	686b      	ldr	r3, [r5, #4]
    220e:	b10b      	cbz	r3, 2214 <TC4_Handler+0x30>
			device->callback.pwm_error_cb(device);
    2210:	4628      	mov	r0, r5
    2212:	4798      	blx	r3
    2214:	bd38      	pop	{r3, r4, r5, pc}
    2216:	bf00      	nop
    2218:	200001e8 	.word	0x200001e8

0000221c <TIMER_0_task1_cb.67449>:
	pwm_enable(&PWM_0); //output on PB13 (D19) ADC on A11
	
	/*Set up timer to turn LED off*/
	static struct timer_task TIMER_0_task1;
	
	void TIMER_0_task1_cb(const struct timer_task *const timer_task){
    221c:	b508      	push	{r3, lr}
		pwm_disable(&PWM_0);	
    221e:	4802      	ldr	r0, [pc, #8]	; (2228 <TIMER_0_task1_cb.67449+0xc>)
    2220:	4b02      	ldr	r3, [pc, #8]	; (222c <TIMER_0_task1_cb.67449+0x10>)
    2222:	4798      	blx	r3
    2224:	bd08      	pop	{r3, pc}
    2226:	bf00      	nop
    2228:	20000204 	.word	0x20000204
    222c:	00000989 	.word	0x00000989

00002230 <dma_complete_callback.67452>:
		///*Add conversion data*
	//}
	
	
	/*DMA setup*/	
	void dma_complete_callback(struct _dma_resource *dma_res) {
    2230:	b508      	push	{r3, lr}
		_dma_enable_transaction(0, false);
    2232:	2100      	movs	r1, #0
    2234:	4608      	mov	r0, r1
    2236:	4b01      	ldr	r3, [pc, #4]	; (223c <dma_complete_callback.67452+0xc>)
    2238:	4798      	blx	r3
    223a:	bd08      	pop	{r3, pc}
    223c:	00001639 	.word	0x00001639

00002240 <main>:
{
    2240:	b500      	push	{lr}
    2242:	b083      	sub	sp, #12
	atmel_start_init();
    2244:	4b29      	ldr	r3, [pc, #164]	; (22ec <main+0xac>)
    2246:	4798      	blx	r3
	pwm_set_parameters(&PWM_0, 1000, 200); 
    2248:	4c29      	ldr	r4, [pc, #164]	; (22f0 <main+0xb0>)
    224a:	22c8      	movs	r2, #200	; 0xc8
    224c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    2250:	4620      	mov	r0, r4
    2252:	4b28      	ldr	r3, [pc, #160]	; (22f4 <main+0xb4>)
    2254:	4798      	blx	r3
	pwm_enable(&PWM_0); //output on PB13 (D19) ADC on A11
    2256:	4620      	mov	r0, r4
    2258:	4b27      	ldr	r3, [pc, #156]	; (22f8 <main+0xb8>)
    225a:	4798      	blx	r3
	TIMER_0_task1.interval = 1000; //This is probably 1*1000ms = 1s, need to check.
    225c:	4927      	ldr	r1, [pc, #156]	; (22fc <main+0xbc>)
    225e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    2262:	608b      	str	r3, [r1, #8]
	TIMER_0_task1.cb=TIMER_0_task1_cb;
    2264:	4b26      	ldr	r3, [pc, #152]	; (2300 <main+0xc0>)
    2266:	60cb      	str	r3, [r1, #12]
	TIMER_0_task1.mode=TIMER_TASK_ONE_SHOT;
    2268:	2400      	movs	r4, #0
    226a:	740c      	strb	r4, [r1, #16]
	timer_add_task(&TIMER_0, &TIMER_0_task1);
    226c:	4d25      	ldr	r5, [pc, #148]	; (2304 <main+0xc4>)
    226e:	4628      	mov	r0, r5
    2270:	4b25      	ldr	r3, [pc, #148]	; (2308 <main+0xc8>)
    2272:	4798      	blx	r3
	timer_start(&TIMER_0);
    2274:	4628      	mov	r0, r5
    2276:	4b25      	ldr	r3, [pc, #148]	; (230c <main+0xcc>)
    2278:	4798      	blx	r3
	usart_sync_enable(&USART_0);
    227a:	4d25      	ldr	r5, [pc, #148]	; (2310 <main+0xd0>)
    227c:	4628      	mov	r0, r5
    227e:	4b25      	ldr	r3, [pc, #148]	; (2314 <main+0xd4>)
    2280:	4798      	blx	r3
	USART_0.io.write(&USART_0.io, (uint8_t*)"Hello World", 12); //USART Broadcasts over pins D0/D1
    2282:	682b      	ldr	r3, [r5, #0]
    2284:	220c      	movs	r2, #12
    2286:	4924      	ldr	r1, [pc, #144]	; (2318 <main+0xd8>)
    2288:	4628      	mov	r0, r5
    228a:	4798      	blx	r3
	((Sercom *)(USART_0.device.hw))->USART.DATA.reg = 0;
    228c:	68ab      	ldr	r3, [r5, #8]
    228e:	629c      	str	r4, [r3, #40]	; 0x28
		
		/*Enable DMA channel*/
		_dma_enable_transaction(0, false);
	}
	
	adc_async_enable_channel(&ADC_0, 0);
    2290:	4e22      	ldr	r6, [pc, #136]	; (231c <main+0xdc>)
    2292:	4621      	mov	r1, r4
    2294:	4630      	mov	r0, r6
    2296:	4b22      	ldr	r3, [pc, #136]	; (2320 <main+0xe0>)
    2298:	4798      	blx	r3
		USART_0.io.write(&USART_0.io, (uint8_t*)"Trying to get DMA on", 24);
    229a:	682b      	ldr	r3, [r5, #0]
    229c:	2218      	movs	r2, #24
    229e:	4921      	ldr	r1, [pc, #132]	; (2324 <main+0xe4>)
    22a0:	4628      	mov	r0, r5
    22a2:	4798      	blx	r3
		_dma_init();
    22a4:	4b20      	ldr	r3, [pc, #128]	; (2328 <main+0xe8>)
    22a6:	4798      	blx	r3
		_dma_set_source_address(0, (void*)&(((Adc *)(ADC_0.device.hw))->RESULT.reg));  
    22a8:	6971      	ldr	r1, [r6, #20]
    22aa:	3140      	adds	r1, #64	; 0x40
    22ac:	4620      	mov	r0, r4
    22ae:	4b1f      	ldr	r3, [pc, #124]	; (232c <main+0xec>)
    22b0:	4798      	blx	r3
		_dma_set_destination_address(0, (uint8_t*)&(((Sercom *)(USART_0.device.hw))->USART.DATA.reg));
    22b2:	68a9      	ldr	r1, [r5, #8]
    22b4:	3128      	adds	r1, #40	; 0x28
    22b6:	4620      	mov	r0, r4
    22b8:	4b1d      	ldr	r3, [pc, #116]	; (2330 <main+0xf0>)
    22ba:	4798      	blx	r3
		_dma_set_data_amount(0, (uint32_t)1);
    22bc:	2101      	movs	r1, #1
    22be:	4620      	mov	r0, r4
    22c0:	4b1c      	ldr	r3, [pc, #112]	; (2334 <main+0xf4>)
    22c2:	4798      	blx	r3
		_dma_get_channel_resource(&dma_res, 0);
    22c4:	4621      	mov	r1, r4
    22c6:	a801      	add	r0, sp, #4
    22c8:	4b1b      	ldr	r3, [pc, #108]	; (2338 <main+0xf8>)
    22ca:	4798      	blx	r3
		dma_res->dma_cb.transfer_done = dma_complete_callback;
    22cc:	4a1b      	ldr	r2, [pc, #108]	; (233c <main+0xfc>)
    22ce:	9b01      	ldr	r3, [sp, #4]
    22d0:	601a      	str	r2, [r3, #0]
		_dma_set_irq_state(0, DMA_TRANSFER_COMPLETE_CB, true);
    22d2:	2201      	movs	r2, #1
    22d4:	4621      	mov	r1, r4
    22d6:	4620      	mov	r0, r4
    22d8:	4b19      	ldr	r3, [pc, #100]	; (2340 <main+0x100>)
    22da:	4798      	blx	r3
		_dma_enable_transaction(0, false);
    22dc:	4621      	mov	r1, r4
    22de:	4620      	mov	r0, r4
    22e0:	4b18      	ldr	r3, [pc, #96]	; (2344 <main+0x104>)
    22e2:	4798      	blx	r3
	configure_dma();
	adc_async_start_conversion(&ADC_0);	
    22e4:	4630      	mov	r0, r6
    22e6:	4b18      	ldr	r3, [pc, #96]	; (2348 <main+0x108>)
    22e8:	4798      	blx	r3
    22ea:	e7fe      	b.n	22ea <main+0xaa>
    22ec:	000002d1 	.word	0x000002d1
    22f0:	20000204 	.word	0x20000204
    22f4:	000009c5 	.word	0x000009c5
    22f8:	0000094d 	.word	0x0000094d
    22fc:	200001f0 	.word	0x200001f0
    2300:	0000221d 	.word	0x0000221d
    2304:	200002b8 	.word	0x200002b8
    2308:	00000d89 	.word	0x00000d89
    230c:	00000d4d 	.word	0x00000d4d
    2310:	200002ac 	.word	0x200002ac
    2314:	00000f4d 	.word	0x00000f4d
    2318:	00002618 	.word	0x00002618
    231c:	20000220 	.word	0x20000220
    2320:	00000871 	.word	0x00000871
    2324:	00002624 	.word	0x00002624
    2328:	00001491 	.word	0x00001491
    232c:	000015d1 	.word	0x000015d1
    2330:	000015c1 	.word	0x000015c1
    2334:	000015e1 	.word	0x000015e1
    2338:	00001679 	.word	0x00001679
    233c:	00002231 	.word	0x00002231
    2340:	0000156d 	.word	0x0000156d
    2344:	00001639 	.word	0x00001639
    2348:	000008b1 	.word	0x000008b1

0000234c <__libc_init_array>:
    234c:	b570      	push	{r4, r5, r6, lr}
    234e:	4e0d      	ldr	r6, [pc, #52]	; (2384 <__libc_init_array+0x38>)
    2350:	4c0d      	ldr	r4, [pc, #52]	; (2388 <__libc_init_array+0x3c>)
    2352:	1ba4      	subs	r4, r4, r6
    2354:	10a4      	asrs	r4, r4, #2
    2356:	2500      	movs	r5, #0
    2358:	42a5      	cmp	r5, r4
    235a:	d109      	bne.n	2370 <__libc_init_array+0x24>
    235c:	4e0b      	ldr	r6, [pc, #44]	; (238c <__libc_init_array+0x40>)
    235e:	4c0c      	ldr	r4, [pc, #48]	; (2390 <__libc_init_array+0x44>)
    2360:	f000 f96c 	bl	263c <_init>
    2364:	1ba4      	subs	r4, r4, r6
    2366:	10a4      	asrs	r4, r4, #2
    2368:	2500      	movs	r5, #0
    236a:	42a5      	cmp	r5, r4
    236c:	d105      	bne.n	237a <__libc_init_array+0x2e>
    236e:	bd70      	pop	{r4, r5, r6, pc}
    2370:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    2374:	4798      	blx	r3
    2376:	3501      	adds	r5, #1
    2378:	e7ee      	b.n	2358 <__libc_init_array+0xc>
    237a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    237e:	4798      	blx	r3
    2380:	3501      	adds	r5, #1
    2382:	e7f2      	b.n	236a <__libc_init_array+0x1e>
    2384:	00002648 	.word	0x00002648
    2388:	00002648 	.word	0x00002648
    238c:	00002648 	.word	0x00002648
    2390:	0000264c 	.word	0x0000264c
    2394:	682f2e2e 	.word	0x682f2e2e
    2398:	732f6c61 	.word	0x732f6c61
    239c:	682f6372 	.word	0x682f6372
    23a0:	615f6c61 	.word	0x615f6c61
    23a4:	615f6364 	.word	0x615f6364
    23a8:	636e7973 	.word	0x636e7973
    23ac:	0000632e 	.word	0x0000632e
    23b0:	682f2e2e 	.word	0x682f2e2e
    23b4:	732f6c61 	.word	0x732f6c61
    23b8:	682f6372 	.word	0x682f6372
    23bc:	705f6c61 	.word	0x705f6c61
    23c0:	632e6d77 	.word	0x632e6d77
    23c4:	00000000 	.word	0x00000000
    23c8:	682f2e2e 	.word	0x682f2e2e
    23cc:	732f6c61 	.word	0x732f6c61
    23d0:	682f6372 	.word	0x682f6372
    23d4:	735f6c61 	.word	0x735f6c61
    23d8:	6d5f6970 	.word	0x6d5f6970
    23dc:	7973615f 	.word	0x7973615f
    23e0:	632e636e 	.word	0x632e636e
    23e4:	00000000 	.word	0x00000000
    23e8:	682f2e2e 	.word	0x682f2e2e
    23ec:	732f6c61 	.word	0x732f6c61
    23f0:	682f6372 	.word	0x682f6372
    23f4:	745f6c61 	.word	0x745f6c61
    23f8:	72656d69 	.word	0x72656d69
    23fc:	0000632e 	.word	0x0000632e
    2400:	682f2e2e 	.word	0x682f2e2e
    2404:	732f6c61 	.word	0x732f6c61
    2408:	682f6372 	.word	0x682f6372
    240c:	755f6c61 	.word	0x755f6c61
    2410:	74726173 	.word	0x74726173
    2414:	6e79735f 	.word	0x6e79735f
    2418:	00632e63 	.word	0x00632e63
    241c:	682f2e2e 	.word	0x682f2e2e
    2420:	752f6c61 	.word	0x752f6c61
    2424:	736c6974 	.word	0x736c6974
    2428:	6372732f 	.word	0x6372732f
    242c:	6974752f 	.word	0x6974752f
    2430:	6c5f736c 	.word	0x6c5f736c
    2434:	2e747369 	.word	0x2e747369
    2438:	00000063 	.word	0x00000063
    243c:	682f2e2e 	.word	0x682f2e2e
    2440:	752f6c61 	.word	0x752f6c61
    2444:	736c6974 	.word	0x736c6974
    2448:	6372732f 	.word	0x6372732f
    244c:	6974752f 	.word	0x6974752f
    2450:	725f736c 	.word	0x725f736c
    2454:	62676e69 	.word	0x62676e69
    2458:	65666675 	.word	0x65666675
    245c:	00632e72 	.word	0x00632e72

00002460 <_adcs>:
    2460:	00000001 00000002 00000000 00000000     ................
	...
    2478:	682f2e2e 612f6c70 682f6364 615f6c70     ../hpl/adc/hpl_a
    2488:	632e6364 00000000                       dc.c....

00002490 <_cfgs>:
    2490:	00304600 02008000 00000000 00000000     .F0.............
	...
    2590:	40003000 40003400 41012000 41014000     .0.@.4.@. .A.@.A
    25a0:	43000000 43000400 43000800 43000c00     ...C...C...C...C

000025b0 <_i2cms>:
	...
    25c8:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    25d8:	65735f6c 6d6f6372 0000632e 40003800     l_sercom.c...8.@
    25e8:	40003c00 4101a000 4101c000 42001400     .<.@...A...A...B
    25f8:	42001800 43001400 43001800 682f2e2e     ...B...C...C../h
    2608:	742f6c70 70682f63 63745f6c 0000632e     pl/tc/hpl_tc.c..
    2618:	6c6c6548 6f57206f 00646c72 69797254     Hello World.Tryi
    2628:	7420676e 6567206f 4d442074 6e6f2041     ng to get DMA on
    2638:	00000000                                ....

0000263c <_init>:
    263c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    263e:	bf00      	nop
    2640:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2642:	bc08      	pop	{r3}
    2644:	469e      	mov	lr, r3
    2646:	4770      	bx	lr

00002648 <__init_array_start>:
    2648:	00000289 	.word	0x00000289

0000264c <_fini>:
    264c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    264e:	bf00      	nop
    2650:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2652:	bc08      	pop	{r3}
    2654:	469e      	mov	lr, r3
    2656:	4770      	bx	lr

00002658 <__fini_array_start>:
    2658:	00000265 	.word	0x00000265
