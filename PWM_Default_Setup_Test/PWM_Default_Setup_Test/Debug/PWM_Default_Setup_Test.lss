
PWM_Default_Setup_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000023f0  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000028  20000000  000023f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  00020028  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  00020028  2**0
                  CONTENTS
  4 .bss          000006c0  20000030  00002420  00020028  2**4
                  ALLOC
  5 .stack        00010000  200006f0  00002ae0  00020028  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020056  2**0
                  CONTENTS, READONLY
  8 .debug_info   0002a988  00000000  00000000  000200af  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000039db  00000000  00000000  0004aa37  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000100f5  00000000  00000000  0004e412  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000e78  00000000  00000000  0005e507  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001310  00000000  00000000  0005f37f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002f240  00000000  00000000  0006068f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00015eb8  00000000  00000000  0008f8cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00101ee4  00000000  00000000  000a5787  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000253c  00000000  00000000  001a766c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	f0 06 01 20 e1 02 00 00 dd 02 00 00 dd 02 00 00     ... ............
      10:	dd 02 00 00 dd 02 00 00 dd 02 00 00 00 00 00 00     ................
	...
      2c:	dd 02 00 00 dd 02 00 00 00 00 00 00 dd 02 00 00     ................
      3c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      4c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      5c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      6c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      7c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      8c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      9c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      ac:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      bc:	d9 14 00 00 e5 14 00 00 f1 14 00 00 fd 14 00 00     ................
      cc:	09 15 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      dc:	dd 02 00 00 dd 02 00 00 dd 02 00 00 00 00 00 00     ................
	...
      f4:	65 16 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     e...............
     104:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     114:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     124:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     134:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     144:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     154:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     164:	dd 02 00 00 55 18 00 00 69 18 00 00 7d 18 00 00     ....U...i...}...
     174:	91 18 00 00 00 00 00 00 00 00 00 00 dd 02 00 00     ................
     184:	dd 02 00 00 dd 02 00 00 dd 02 00 00 00 00 00 00     ................
     194:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1a4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1b4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1c4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1d4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1e4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 11 20 00 00     ............. ..
     1f4:	dd 02 00 00 dd 02 00 00 31 20 00 00 dd 02 00 00     ........1 ......
     204:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     214:	dd 02 00 00 dd 02 00 00 dd 02 00 00 ed 12 00 00     ................
     224:	01 13 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     234:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     244:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     254:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000030 	.word	0x20000030
     280:	00000000 	.word	0x00000000
     284:	000023f0 	.word	0x000023f0

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	000023f0 	.word	0x000023f0
     2c4:	20000034 	.word	0x20000034
     2c8:	000023f0 	.word	0x000023f0
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b508      	push	{r3, lr}
	system_init();
     2d2:	4b01      	ldr	r3, [pc, #4]	; (2d8 <atmel_start_init+0x8>)
     2d4:	4798      	blx	r3
     2d6:	bd08      	pop	{r3, pc}
     2d8:	0000063d 	.word	0x0000063d

000002dc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2dc:	e7fe      	b.n	2dc <Dummy_Handler>
	...

000002e0 <Reset_Handler>:
{
     2e0:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2e2:	4b1c      	ldr	r3, [pc, #112]	; (354 <Reset_Handler+0x74>)
     2e4:	4a1c      	ldr	r2, [pc, #112]	; (358 <Reset_Handler+0x78>)
     2e6:	429a      	cmp	r2, r3
     2e8:	d010      	beq.n	30c <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     2ea:	4b1c      	ldr	r3, [pc, #112]	; (35c <Reset_Handler+0x7c>)
     2ec:	4a19      	ldr	r2, [pc, #100]	; (354 <Reset_Handler+0x74>)
     2ee:	429a      	cmp	r2, r3
     2f0:	d20c      	bcs.n	30c <Reset_Handler+0x2c>
     2f2:	3b01      	subs	r3, #1
     2f4:	1a9b      	subs	r3, r3, r2
     2f6:	f023 0303 	bic.w	r3, r3, #3
     2fa:	3304      	adds	r3, #4
     2fc:	4413      	add	r3, r2
     2fe:	4916      	ldr	r1, [pc, #88]	; (358 <Reset_Handler+0x78>)
                        *pDest++ = *pSrc++;
     300:	f851 0b04 	ldr.w	r0, [r1], #4
     304:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     308:	429a      	cmp	r2, r3
     30a:	d1f9      	bne.n	300 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     30c:	4b14      	ldr	r3, [pc, #80]	; (360 <Reset_Handler+0x80>)
     30e:	4a15      	ldr	r2, [pc, #84]	; (364 <Reset_Handler+0x84>)
     310:	429a      	cmp	r2, r3
     312:	d20a      	bcs.n	32a <Reset_Handler+0x4a>
     314:	3b01      	subs	r3, #1
     316:	1a9b      	subs	r3, r3, r2
     318:	f023 0303 	bic.w	r3, r3, #3
     31c:	3304      	adds	r3, #4
     31e:	4413      	add	r3, r2
                *pDest++ = 0;
     320:	2100      	movs	r1, #0
     322:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     326:	4293      	cmp	r3, r2
     328:	d1fb      	bne.n	322 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     32a:	4b0f      	ldr	r3, [pc, #60]	; (368 <Reset_Handler+0x88>)
     32c:	4a0f      	ldr	r2, [pc, #60]	; (36c <Reset_Handler+0x8c>)
     32e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     332:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     334:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     338:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     33c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     340:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     344:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     348:	4b09      	ldr	r3, [pc, #36]	; (370 <Reset_Handler+0x90>)
     34a:	4798      	blx	r3
        main();
     34c:	4b09      	ldr	r3, [pc, #36]	; (374 <Reset_Handler+0x94>)
     34e:	4798      	blx	r3
     350:	e7fe      	b.n	350 <Reset_Handler+0x70>
     352:	bf00      	nop
     354:	20000000 	.word	0x20000000
     358:	000023f0 	.word	0x000023f0
     35c:	20000028 	.word	0x20000028
     360:	200006f0 	.word	0x200006f0
     364:	20000030 	.word	0x20000030
     368:	e000ed00 	.word	0xe000ed00
     36c:	00000000 	.word	0x00000000
     370:	000020f9 	.word	0x000020f9
     374:	0000207d 	.word	0x0000207d

00000378 <ADC_0_init>:
 * \brief ADC initialization function
 *
 * Enables ADC peripheral, clocks and initializes ADC driver
 */
void ADC_0_init(void)
{
     378:	b5f0      	push	{r4, r5, r6, r7, lr}
     37a:	b085      	sub	sp, #20
}

static inline void hri_mclk_set_APBDMASK_ADC1_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC1;
     37c:	4a1d      	ldr	r2, [pc, #116]	; (3f4 <ADC_0_init+0x7c>)
     37e:	6a13      	ldr	r3, [r2, #32]
     380:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     384:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     386:	2240      	movs	r2, #64	; 0x40
     388:	4b1b      	ldr	r3, [pc, #108]	; (3f8 <ADC_0_init+0x80>)
     38a:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	hri_mclk_set_APBDMASK_ADC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC1_GCLK_ID, CONF_GCLK_ADC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	adc_async_init(&ADC_0, ADC1, ADC_0_map, ADC_0_CH_MAX, ADC_0_CH_AMOUNT, &ADC_0_ch[0], (void *)NULL);
     38e:	4e1b      	ldr	r6, [pc, #108]	; (3fc <ADC_0_init+0x84>)
     390:	4d1b      	ldr	r5, [pc, #108]	; (400 <ADC_0_init+0x88>)
     392:	2400      	movs	r4, #0
     394:	9402      	str	r4, [sp, #8]
     396:	4b1b      	ldr	r3, [pc, #108]	; (404 <ADC_0_init+0x8c>)
     398:	9301      	str	r3, [sp, #4]
     39a:	2301      	movs	r3, #1
     39c:	9300      	str	r3, [sp, #0]
     39e:	4623      	mov	r3, r4
     3a0:	4632      	mov	r2, r6
     3a2:	4919      	ldr	r1, [pc, #100]	; (408 <ADC_0_init+0x90>)
     3a4:	4628      	mov	r0, r5
     3a6:	4f19      	ldr	r7, [pc, #100]	; (40c <ADC_0_init+0x94>)
     3a8:	47b8      	blx	r7
	adc_async_register_channel_buffer(&ADC_0, 0, ADC_0_buffer, ADC_0_BUFFER_SIZE);
     3aa:	2310      	movs	r3, #16
     3ac:	1d32      	adds	r2, r6, #4
     3ae:	4621      	mov	r1, r4
     3b0:	4628      	mov	r0, r5
     3b2:	4c17      	ldr	r4, [pc, #92]	; (410 <ADC_0_init+0x98>)
     3b4:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     3b6:	4b17      	ldr	r3, [pc, #92]	; (414 <ADC_0_init+0x9c>)
     3b8:	f44f 7280 	mov.w	r2, #256	; 0x100
     3bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3c0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     3c4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     3c8:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     3cc:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3d0:	f893 20c8 	ldrb.w	r2, [r3, #200]	; 0xc8
	tmp &= ~PORT_PINCFG_PMUXEN;
     3d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3d8:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3dc:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3e0:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     3e4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     3e8:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3ec:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4

	// Disable digital pin circuitry
	gpio_set_pin_direction(PB08, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(PB08, PINMUX_PB08B_ADC1_AIN0);
}
     3f0:	b005      	add	sp, #20
     3f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     3f4:	40000800 	.word	0x40000800
     3f8:	40001c00 	.word	0x40001c00
     3fc:	2000004c 	.word	0x2000004c
     400:	20000220 	.word	0x20000220
     404:	2000024c 	.word	0x2000024c
     408:	43002000 	.word	0x43002000
     40c:	00000715 	.word	0x00000715
     410:	000007b9 	.word	0x000007b9
     414:	41008000 	.word	0x41008000

00000418 <USART_0_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     418:	4b10      	ldr	r3, [pc, #64]	; (45c <USART_0_PORT_init+0x44>)
     41a:	f893 20d8 	ldrb.w	r2, [r3, #216]	; 0xd8
	tmp &= ~PORT_PINCFG_PMUXEN;
     41e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     422:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     426:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     42a:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     42e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     432:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     436:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     43a:	f893 20d9 	ldrb.w	r2, [r3, #217]	; 0xd9
	tmp &= ~PORT_PINCFG_PMUXEN;
     43e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     442:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     446:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     44a:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     44e:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     452:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     456:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
     45a:	4770      	bx	lr
     45c:	41008000 	.word	0x41008000

00000460 <USART_0_CLOCK_init>:
     460:	4b06      	ldr	r3, [pc, #24]	; (47c <USART_0_CLOCK_init+0x1c>)
     462:	2240      	movs	r2, #64	; 0x40
     464:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
     468:	2243      	movs	r2, #67	; 0x43
     46a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
     46e:	4a04      	ldr	r2, [pc, #16]	; (480 <USART_0_CLOCK_init+0x20>)
     470:	6953      	ldr	r3, [r2, #20]
     472:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     476:	6153      	str	r3, [r2, #20]
     478:	4770      	bx	lr
     47a:	bf00      	nop
     47c:	40001c00 	.word	0x40001c00
     480:	40000800 	.word	0x40000800

00000484 <USART_0_init>:

	hri_mclk_set_APBAMASK_SERCOM0_bit(MCLK);
}

void USART_0_init(void)
{
     484:	b508      	push	{r3, lr}
	USART_0_CLOCK_init();
     486:	4b05      	ldr	r3, [pc, #20]	; (49c <USART_0_init+0x18>)
     488:	4798      	blx	r3
	usart_sync_init(&USART_0, SERCOM0, (void *)NULL);
     48a:	2200      	movs	r2, #0
     48c:	4904      	ldr	r1, [pc, #16]	; (4a0 <USART_0_init+0x1c>)
     48e:	4805      	ldr	r0, [pc, #20]	; (4a4 <USART_0_init+0x20>)
     490:	4b05      	ldr	r3, [pc, #20]	; (4a8 <USART_0_init+0x24>)
     492:	4798      	blx	r3
	USART_0_PORT_init();
     494:	4b05      	ldr	r3, [pc, #20]	; (4ac <USART_0_init+0x28>)
     496:	4798      	blx	r3
     498:	bd08      	pop	{r3, pc}
     49a:	bf00      	nop
     49c:	00000461 	.word	0x00000461
     4a0:	40003000 	.word	0x40003000
     4a4:	200002ac 	.word	0x200002ac
     4a8:	00000e9d 	.word	0x00000e9d
     4ac:	00000419 	.word	0x00000419

000004b0 <SPI_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     4b0:	4b2f      	ldr	r3, [pc, #188]	; (570 <SPI_0_PORT_init+0xc0>)
     4b2:	f44f 7280 	mov.w	r2, #256	; 0x100
     4b6:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     4ba:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4be:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     4c2:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
     4c6:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
     4ca:	f8c3 11a8 	str.w	r1, [r3, #424]	; 0x1a8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4ce:	f893 21c8 	ldrb.w	r2, [r3, #456]	; 0x1c8
	tmp &= ~PORT_PINCFG_PMUXEN;
     4d2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     4d6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4da:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4de:	f893 21b4 	ldrb.w	r2, [r3, #436]	; 0x1b4
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     4e2:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     4e6:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4ea:	f883 21b4 	strb.w	r2, [r3, #436]	; 0x1b4
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     4ee:	f44f 7200 	mov.w	r2, #512	; 0x200
     4f2:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     4f6:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4fa:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     4fe:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
     502:	f8c3 11a8 	str.w	r1, [r3, #424]	; 0x1a8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     506:	f893 21c9 	ldrb.w	r2, [r3, #457]	; 0x1c9
	tmp &= ~PORT_PINCFG_PMUXEN;
     50a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     50e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     512:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     516:	f893 21b4 	ldrb.w	r2, [r3, #436]	; 0x1b4
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     51a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     51e:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     522:	f883 21b4 	strb.w	r2, [r3, #436]	; 0x1b4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     526:	f44f 6280 	mov.w	r2, #1024	; 0x400
     52a:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     52e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     532:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
     536:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
     53a:	4a0e      	ldr	r2, [pc, #56]	; (574 <SPI_0_PORT_init+0xc4>)
     53c:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     540:	f893 21ca 	ldrb.w	r2, [r3, #458]	; 0x1ca
     544:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     548:	f883 21ca 	strb.w	r2, [r3, #458]	; 0x1ca
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     54c:	f893 21ca 	ldrb.w	r2, [r3, #458]	; 0x1ca
	tmp &= ~PORT_PINCFG_PMUXEN;
     550:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     554:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     558:	f883 21ca 	strb.w	r2, [r3, #458]	; 0x1ca
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     55c:	f893 21b5 	ldrb.w	r2, [r3, #437]	; 0x1b5
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     560:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     564:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     568:	f883 21b5 	strb.w	r2, [r3, #437]	; 0x1b5
     56c:	4770      	bx	lr
     56e:	bf00      	nop
     570:	41008000 	.word	0x41008000
     574:	c0020000 	.word	0xc0020000

00000578 <SPI_0_CLOCK_init>:
     578:	4b06      	ldr	r3, [pc, #24]	; (594 <SPI_0_CLOCK_init+0x1c>)
     57a:	2240      	movs	r2, #64	; 0x40
     57c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
     580:	2243      	movs	r2, #67	; 0x43
     582:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
     586:	4a04      	ldr	r2, [pc, #16]	; (598 <SPI_0_CLOCK_init+0x20>)
     588:	6a13      	ldr	r3, [r2, #32]
     58a:	f043 0308 	orr.w	r3, r3, #8
     58e:	6213      	str	r3, [r2, #32]
     590:	4770      	bx	lr
     592:	bf00      	nop
     594:	40001c00 	.word	0x40001c00
     598:	40000800 	.word	0x40000800

0000059c <SPI_0_init>:

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
}

void SPI_0_init(void)
{
     59c:	b508      	push	{r3, lr}
	SPI_0_CLOCK_init();
     59e:	4b04      	ldr	r3, [pc, #16]	; (5b0 <SPI_0_init+0x14>)
     5a0:	4798      	blx	r3
	spi_m_async_init(&SPI_0, SERCOM7);
     5a2:	4904      	ldr	r1, [pc, #16]	; (5b4 <SPI_0_init+0x18>)
     5a4:	4804      	ldr	r0, [pc, #16]	; (5b8 <SPI_0_init+0x1c>)
     5a6:	4b05      	ldr	r3, [pc, #20]	; (5bc <SPI_0_init+0x20>)
     5a8:	4798      	blx	r3
	SPI_0_PORT_init();
     5aa:	4b05      	ldr	r3, [pc, #20]	; (5c0 <SPI_0_init+0x24>)
     5ac:	4798      	blx	r3
     5ae:	bd08      	pop	{r3, pc}
     5b0:	00000579 	.word	0x00000579
     5b4:	43000c00 	.word	0x43000c00
     5b8:	20000264 	.word	0x20000264
     5bc:	00000b4d 	.word	0x00000b4d
     5c0:	000004b1 	.word	0x000004b1

000005c4 <PWM_0_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5c4:	4a08      	ldr	r2, [pc, #32]	; (5e8 <PWM_0_PORT_init+0x24>)
     5c6:	f892 30cd 	ldrb.w	r3, [r2, #205]	; 0xcd
	tmp &= ~PORT_PINCFG_PMUXEN;
     5ca:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5ce:	f043 0301 	orr.w	r3, r3, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5d2:	f882 30cd 	strb.w	r3, [r2, #205]	; 0xcd
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5d6:	f892 30b6 	ldrb.w	r3, [r2, #182]	; 0xb6
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     5da:	f003 030f 	and.w	r3, r3, #15
	tmp |= PORT_PMUX_PMUXO(data);
     5de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5e2:	f882 30b6 	strb.w	r3, [r2, #182]	; 0xb6
     5e6:	4770      	bx	lr
     5e8:	41008000 	.word	0x41008000

000005ec <PWM_0_CLOCK_init>:
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
     5ec:	4a04      	ldr	r2, [pc, #16]	; (600 <PWM_0_CLOCK_init+0x14>)
     5ee:	69d3      	ldr	r3, [r2, #28]
     5f0:	f043 0320 	orr.w	r3, r3, #32
     5f4:	61d3      	str	r3, [r2, #28]
     5f6:	2240      	movs	r2, #64	; 0x40
     5f8:	4b02      	ldr	r3, [pc, #8]	; (604 <PWM_0_CLOCK_init+0x18>)
     5fa:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
     5fe:	4770      	bx	lr
     600:	40000800 	.word	0x40000800
     604:	40001c00 	.word	0x40001c00

00000608 <PWM_0_init>:
	hri_mclk_set_APBCMASK_TC4_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TC4_GCLK_ID, CONF_GCLK_TC4_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void PWM_0_init(void)
{
     608:	b508      	push	{r3, lr}
	PWM_0_CLOCK_init();
     60a:	4b06      	ldr	r3, [pc, #24]	; (624 <PWM_0_init+0x1c>)
     60c:	4798      	blx	r3
	PWM_0_PORT_init();
     60e:	4b06      	ldr	r3, [pc, #24]	; (628 <PWM_0_init+0x20>)
     610:	4798      	blx	r3
	pwm_init(&PWM_0, TC4, _tc_get_pwm());
     612:	4b06      	ldr	r3, [pc, #24]	; (62c <PWM_0_init+0x24>)
     614:	4798      	blx	r3
     616:	4602      	mov	r2, r0
     618:	4905      	ldr	r1, [pc, #20]	; (630 <PWM_0_init+0x28>)
     61a:	4806      	ldr	r0, [pc, #24]	; (634 <PWM_0_init+0x2c>)
     61c:	4b06      	ldr	r3, [pc, #24]	; (638 <PWM_0_init+0x30>)
     61e:	4798      	blx	r3
     620:	bd08      	pop	{r3, pc}
     622:	bf00      	nop
     624:	000005ed 	.word	0x000005ed
     628:	000005c5 	.word	0x000005c5
     62c:	00001fd1 	.word	0x00001fd1
     630:	42001400 	.word	0x42001400
     634:	20000204 	.word	0x20000204
     638:	000008a1 	.word	0x000008a1

0000063c <system_init>:
}

void system_init(void)
{
     63c:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     63e:	4b0d      	ldr	r3, [pc, #52]	; (674 <system_init+0x38>)
     640:	4798      	blx	r3
	init_mcu();

	ADC_0_init();
     642:	4b0d      	ldr	r3, [pc, #52]	; (678 <system_init+0x3c>)
     644:	4798      	blx	r3

	USART_0_init();
     646:	4b0d      	ldr	r3, [pc, #52]	; (67c <system_init+0x40>)
     648:	4798      	blx	r3

	SPI_0_init();
     64a:	4b0d      	ldr	r3, [pc, #52]	; (680 <system_init+0x44>)
     64c:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
     64e:	4a0d      	ldr	r2, [pc, #52]	; (684 <system_init+0x48>)
     650:	6953      	ldr	r3, [r2, #20]
     652:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
     656:	6153      	str	r3, [r2, #20]
     658:	2240      	movs	r2, #64	; 0x40
     65a:	4b0b      	ldr	r3, [pc, #44]	; (688 <system_init+0x4c>)
     65c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	timer_init(&TIMER_0, TC1, _tc_get_timer());
     660:	4b0a      	ldr	r3, [pc, #40]	; (68c <system_init+0x50>)
     662:	4798      	blx	r3
     664:	4602      	mov	r2, r0
     666:	490a      	ldr	r1, [pc, #40]	; (690 <system_init+0x54>)
     668:	480a      	ldr	r0, [pc, #40]	; (694 <system_init+0x58>)
     66a:	4b0b      	ldr	r3, [pc, #44]	; (698 <system_init+0x5c>)
     66c:	4798      	blx	r3

	TIMER_0_init();
	PWM_0_init();
     66e:	4b0b      	ldr	r3, [pc, #44]	; (69c <system_init+0x60>)
     670:	4798      	blx	r3
     672:	bd08      	pop	{r3, pc}
     674:	00001331 	.word	0x00001331
     678:	00000379 	.word	0x00000379
     67c:	00000485 	.word	0x00000485
     680:	0000059d 	.word	0x0000059d
     684:	40000800 	.word	0x40000800
     688:	40001c00 	.word	0x40001c00
     68c:	00001fcd 	.word	0x00001fcd
     690:	40003c00 	.word	0x40003c00
     694:	200002b8 	.word	0x200002b8
     698:	00000ca9 	.word	0x00000ca9
     69c:	00000609 	.word	0x00000609

000006a0 <adc_async_window_threshold_reached>:
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
	}
}

static void adc_async_window_threshold_reached(struct _adc_async_device *device, const uint8_t channel)
{
     6a0:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.monitor) {
     6a2:	6983      	ldr	r3, [r0, #24]
     6a4:	b103      	cbz	r3, 6a8 <adc_async_window_threshold_reached+0x8>
		descr->adc_async_cb.monitor(descr, channel);
     6a6:	4798      	blx	r3
     6a8:	bd08      	pop	{r3, pc}

000006aa <adc_async_error_occured>:
	}
}

static void adc_async_error_occured(struct _adc_async_device *device, const uint8_t channel)
{
     6aa:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.error) {
     6ac:	69c3      	ldr	r3, [r0, #28]
     6ae:	b103      	cbz	r3, 6b2 <adc_async_error_occured+0x8>
		descr->adc_async_cb.error(descr, channel);
     6b0:	4798      	blx	r3
     6b2:	bd08      	pop	{r3, pc}

000006b4 <adc_async_channel_conversion_done>:
{
     6b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     6b8:	4606      	mov	r6, r0
     6ba:	460f      	mov	r7, r1
     6bc:	4691      	mov	r9, r2
	uint8_t                              index    = descr->channel_map[channel];
     6be:	6a03      	ldr	r3, [r0, #32]
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
     6c0:	5c5c      	ldrb	r4, [r3, r1]
     6c2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
     6c6:	00e4      	lsls	r4, r4, #3
     6c8:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
     6cc:	eb08 0504 	add.w	r5, r8, r4
	ringbuffer_put(&descr_ch->convert, data);
     6d0:	f105 0a04 	add.w	sl, r5, #4
     6d4:	b2d1      	uxtb	r1, r2
     6d6:	4650      	mov	r0, sl
     6d8:	4b0c      	ldr	r3, [pc, #48]	; (70c <adc_async_channel_conversion_done+0x58>)
     6da:	4798      	blx	r3
	if (1 < _adc_async_get_data_size(&descr->device)) {
     6dc:	4630      	mov	r0, r6
     6de:	4b0c      	ldr	r3, [pc, #48]	; (710 <adc_async_channel_conversion_done+0x5c>)
     6e0:	4798      	blx	r3
     6e2:	2801      	cmp	r0, #1
     6e4:	d907      	bls.n	6f6 <adc_async_channel_conversion_done+0x42>
		ringbuffer_put(&descr_ch->convert, data >> 8);
     6e6:	ea4f 2119 	mov.w	r1, r9, lsr #8
     6ea:	4650      	mov	r0, sl
     6ec:	4b07      	ldr	r3, [pc, #28]	; (70c <adc_async_channel_conversion_done+0x58>)
     6ee:	4798      	blx	r3
		++descr_ch->bytes_in_buffer;
     6f0:	8aab      	ldrh	r3, [r5, #20]
     6f2:	3301      	adds	r3, #1
     6f4:	82ab      	strh	r3, [r5, #20]
	++descr_ch->bytes_in_buffer;
     6f6:	8aab      	ldrh	r3, [r5, #20]
     6f8:	3301      	adds	r3, #1
     6fa:	82ab      	strh	r3, [r5, #20]
	if (descr_ch->adc_async_ch_cb.convert_done) {
     6fc:	f858 3004 	ldr.w	r3, [r8, r4]
     700:	b113      	cbz	r3, 708 <adc_async_channel_conversion_done+0x54>
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
     702:	4639      	mov	r1, r7
     704:	4630      	mov	r0, r6
     706:	4798      	blx	r3
     708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     70c:	00000fc9 	.word	0x00000fc9
     710:	000012d9 	.word	0x000012d9

00000714 <adc_async_init>:
{
     714:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     718:	4689      	mov	r9, r1
     71a:	4616      	mov	r6, r2
     71c:	461c      	mov	r4, r3
     71e:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
     722:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
	ASSERT(descr && hw && channel_map && channel_amount && descr_ch);
     724:	4607      	mov	r7, r0
     726:	b140      	cbz	r0, 73a <adc_async_init+0x26>
     728:	b149      	cbz	r1, 73e <adc_async_init+0x2a>
     72a:	b152      	cbz	r2, 742 <adc_async_init+0x2e>
     72c:	f1b8 0f00 	cmp.w	r8, #0
     730:	d009      	beq.n	746 <adc_async_init+0x32>
     732:	1c28      	adds	r0, r5, #0
     734:	bf18      	it	ne
     736:	2001      	movne	r0, #1
     738:	e006      	b.n	748 <adc_async_init+0x34>
     73a:	2000      	movs	r0, #0
     73c:	e004      	b.n	748 <adc_async_init+0x34>
     73e:	2000      	movs	r0, #0
     740:	e002      	b.n	748 <adc_async_init+0x34>
     742:	2000      	movs	r0, #0
     744:	e000      	b.n	748 <adc_async_init+0x34>
     746:	2000      	movs	r0, #0
     748:	f8df b064 	ldr.w	fp, [pc, #100]	; 7b0 <adc_async_init+0x9c>
     74c:	223f      	movs	r2, #63	; 0x3f
     74e:	4659      	mov	r1, fp
     750:	f8df a060 	ldr.w	sl, [pc, #96]	; 7b4 <adc_async_init+0xa0>
     754:	47d0      	blx	sl
	ASSERT(channel_amount <= (channel_max + 1));
     756:	1c60      	adds	r0, r4, #1
     758:	2240      	movs	r2, #64	; 0x40
     75a:	4659      	mov	r1, fp
     75c:	4580      	cmp	r8, r0
     75e:	bfcc      	ite	gt
     760:	2000      	movgt	r0, #0
     762:	2001      	movle	r0, #1
     764:	47d0      	blx	sl
	device = &descr->device;
     766:	2300      	movs	r3, #0
		channel_map[i] = 0xFF;
     768:	21ff      	movs	r1, #255	; 0xff
     76a:	b2da      	uxtb	r2, r3
     76c:	54b1      	strb	r1, [r6, r2]
     76e:	3301      	adds	r3, #1
	for (uint8_t i = 0; i <= channel_max; i++) {
     770:	b2da      	uxtb	r2, r3
     772:	42a2      	cmp	r2, r4
     774:	d9f9      	bls.n	76a <adc_async_init+0x56>
	descr->channel_map    = channel_map;
     776:	623e      	str	r6, [r7, #32]
	descr->channel_max    = channel_max;
     778:	f887 4024 	strb.w	r4, [r7, #36]	; 0x24
	descr->channel_amount = channel_amount;
     77c:	f887 8025 	strb.w	r8, [r7, #37]	; 0x25
	descr->descr_ch       = descr_ch;
     780:	62bd      	str	r5, [r7, #40]	; 0x28
	init_status           = _adc_async_init(device, hw);
     782:	4649      	mov	r1, r9
     784:	4638      	mov	r0, r7
     786:	4b06      	ldr	r3, [pc, #24]	; (7a0 <adc_async_init+0x8c>)
     788:	4798      	blx	r3
	if (init_status) {
     78a:	4603      	mov	r3, r0
     78c:	b928      	cbnz	r0, 79a <adc_async_init+0x86>
	device->adc_async_ch_cb.convert_done = adc_async_channel_conversion_done;
     78e:	4a05      	ldr	r2, [pc, #20]	; (7a4 <adc_async_init+0x90>)
     790:	60ba      	str	r2, [r7, #8]
	device->adc_async_cb.window_cb       = adc_async_window_threshold_reached;
     792:	4a05      	ldr	r2, [pc, #20]	; (7a8 <adc_async_init+0x94>)
     794:	603a      	str	r2, [r7, #0]
	device->adc_async_cb.error_cb        = adc_async_error_occured;
     796:	4a05      	ldr	r2, [pc, #20]	; (7ac <adc_async_init+0x98>)
     798:	607a      	str	r2, [r7, #4]
}
     79a:	4618      	mov	r0, r3
     79c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     7a0:	000011cd 	.word	0x000011cd
     7a4:	000006b5 	.word	0x000006b5
     7a8:	000006a1 	.word	0x000006a1
     7ac:	000006ab 	.word	0x000006ab
     7b0:	00002140 	.word	0x00002140
     7b4:	00000f11 	.word	0x00000f11

000007b8 <adc_async_register_channel_buffer>:
{
     7b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     7bc:	460e      	mov	r6, r1
     7be:	4617      	mov	r7, r2
     7c0:	4698      	mov	r8, r3
	ASSERT(descr && convert_buffer && convert_buffer_length);
     7c2:	4605      	mov	r5, r0
     7c4:	2800      	cmp	r0, #0
     7c6:	d040      	beq.n	84a <adc_async_register_channel_buffer+0x92>
     7c8:	2a00      	cmp	r2, #0
     7ca:	d040      	beq.n	84e <adc_async_register_channel_buffer+0x96>
     7cc:	1c18      	adds	r0, r3, #0
     7ce:	bf18      	it	ne
     7d0:	2001      	movne	r0, #1
     7d2:	f8df 9098 	ldr.w	r9, [pc, #152]	; 86c <adc_async_register_channel_buffer+0xb4>
     7d6:	2266      	movs	r2, #102	; 0x66
     7d8:	4649      	mov	r1, r9
     7da:	4c22      	ldr	r4, [pc, #136]	; (864 <adc_async_register_channel_buffer+0xac>)
     7dc:	47a0      	blx	r4
	ASSERT(descr->channel_max >= channel);
     7de:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
     7e2:	2267      	movs	r2, #103	; 0x67
     7e4:	4649      	mov	r1, r9
     7e6:	42b0      	cmp	r0, r6
     7e8:	bf34      	ite	cc
     7ea:	2000      	movcc	r0, #0
     7ec:	2001      	movcs	r0, #1
     7ee:	47a0      	blx	r4
	if (descr->channel_map[channel] != 0xFF) {
     7f0:	6a29      	ldr	r1, [r5, #32]
     7f2:	5d8b      	ldrb	r3, [r1, r6]
     7f4:	2bff      	cmp	r3, #255	; 0xff
     7f6:	d12c      	bne.n	852 <adc_async_register_channel_buffer+0x9a>
	for (i = 0; i <= descr->channel_max; i++) {
     7f8:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
     7fc:	2300      	movs	r3, #0
     7fe:	461c      	mov	r4, r3
		if (descr->channel_map[i] != 0xFF) {
     800:	b2da      	uxtb	r2, r3
     802:	5c8a      	ldrb	r2, [r1, r2]
     804:	2aff      	cmp	r2, #255	; 0xff
			index++;
     806:	bf1c      	itt	ne
     808:	3401      	addne	r4, #1
     80a:	b2e4      	uxtbne	r4, r4
     80c:	3301      	adds	r3, #1
	for (i = 0; i <= descr->channel_max; i++) {
     80e:	b2da      	uxtb	r2, r3
     810:	4282      	cmp	r2, r0
     812:	d9f5      	bls.n	800 <adc_async_register_channel_buffer+0x48>
	if (index > descr->channel_amount) {
     814:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
     818:	42a3      	cmp	r3, r4
     81a:	d31d      	bcc.n	858 <adc_async_register_channel_buffer+0xa0>
	if (ERR_NONE != ringbuffer_init(&descr->descr_ch[index].convert, convert_buffer, convert_buffer_length)) {
     81c:	eb04 0944 	add.w	r9, r4, r4, lsl #1
     820:	ea4f 09c9 	mov.w	r9, r9, lsl #3
     824:	6aa8      	ldr	r0, [r5, #40]	; 0x28
     826:	4448      	add	r0, r9
     828:	4642      	mov	r2, r8
     82a:	4639      	mov	r1, r7
     82c:	3004      	adds	r0, #4
     82e:	4b0e      	ldr	r3, [pc, #56]	; (868 <adc_async_register_channel_buffer+0xb0>)
     830:	4798      	blx	r3
     832:	4602      	mov	r2, r0
     834:	b998      	cbnz	r0, 85e <adc_async_register_channel_buffer+0xa6>
	descr->channel_map[channel]            = index;
     836:	6a2b      	ldr	r3, [r5, #32]
     838:	559c      	strb	r4, [r3, r6]
	descr->descr_ch[index].bytes_in_buffer = 0;
     83a:	6aab      	ldr	r3, [r5, #40]	; 0x28
     83c:	4499      	add	r9, r3
     83e:	2300      	movs	r3, #0
     840:	f8a9 3014 	strh.w	r3, [r9, #20]
}
     844:	4610      	mov	r0, r2
     846:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(descr && convert_buffer && convert_buffer_length);
     84a:	2000      	movs	r0, #0
     84c:	e7c1      	b.n	7d2 <adc_async_register_channel_buffer+0x1a>
     84e:	2000      	movs	r0, #0
     850:	e7bf      	b.n	7d2 <adc_async_register_channel_buffer+0x1a>
		return ERR_INVALID_ARG;
     852:	f06f 020c 	mvn.w	r2, #12
     856:	e7f5      	b.n	844 <adc_async_register_channel_buffer+0x8c>
		return ERR_NO_RESOURCE;
     858:	f06f 021b 	mvn.w	r2, #27
     85c:	e7f2      	b.n	844 <adc_async_register_channel_buffer+0x8c>
		return ERR_INVALID_ARG;
     85e:	f06f 020c 	mvn.w	r2, #12
     862:	e7ef      	b.n	844 <adc_async_register_channel_buffer+0x8c>
     864:	00000f11 	.word	0x00000f11
     868:	00000f79 	.word	0x00000f79
     86c:	00002140 	.word	0x00002140

00000870 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     870:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     874:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     876:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     878:	f3bf 8f5f 	dmb	sy
     87c:	4770      	bx	lr

0000087e <atomic_leave_critical>:
     87e:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     882:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     884:	f383 8810 	msr	PRIMASK, r3
     888:	4770      	bx	lr

0000088a <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
     88a:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.period) {
     88c:	6943      	ldr	r3, [r0, #20]
     88e:	b103      	cbz	r3, 892 <pwm_period_expired+0x8>
		descr->pwm_cb.period(descr);
     890:	4798      	blx	r3
     892:	bd08      	pop	{r3, pc}

00000894 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
     894:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.error) {
     896:	6983      	ldr	r3, [r0, #24]
     898:	b103      	cbz	r3, 89c <pwm_detect_fault+0x8>
		descr->pwm_cb.error(descr);
     89a:	4798      	blx	r3
     89c:	bd08      	pop	{r3, pc}
	...

000008a0 <pwm_init>:
{
     8a0:	b538      	push	{r3, r4, r5, lr}
     8a2:	460d      	mov	r5, r1
	ASSERT(descr && hw);
     8a4:	4604      	mov	r4, r0
     8a6:	b180      	cbz	r0, 8ca <pwm_init+0x2a>
     8a8:	1c08      	adds	r0, r1, #0
     8aa:	bf18      	it	ne
     8ac:	2001      	movne	r0, #1
     8ae:	2233      	movs	r2, #51	; 0x33
     8b0:	4907      	ldr	r1, [pc, #28]	; (8d0 <pwm_init+0x30>)
     8b2:	4b08      	ldr	r3, [pc, #32]	; (8d4 <pwm_init+0x34>)
     8b4:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
     8b6:	4629      	mov	r1, r5
     8b8:	4620      	mov	r0, r4
     8ba:	4b07      	ldr	r3, [pc, #28]	; (8d8 <pwm_init+0x38>)
     8bc:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
     8be:	4b07      	ldr	r3, [pc, #28]	; (8dc <pwm_init+0x3c>)
     8c0:	6023      	str	r3, [r4, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
     8c2:	4b07      	ldr	r3, [pc, #28]	; (8e0 <pwm_init+0x40>)
     8c4:	6063      	str	r3, [r4, #4]
}
     8c6:	2000      	movs	r0, #0
     8c8:	bd38      	pop	{r3, r4, r5, pc}
     8ca:	2000      	movs	r0, #0
     8cc:	e7ef      	b.n	8ae <pwm_init+0xe>
     8ce:	bf00      	nop
     8d0:	0000215c 	.word	0x0000215c
     8d4:	00000f11 	.word	0x00000f11
     8d8:	00001d8d 	.word	0x00001d8d
     8dc:	0000088b 	.word	0x0000088b
     8e0:	00000895 	.word	0x00000895

000008e4 <pwm_enable>:
{
     8e4:	b510      	push	{r4, lr}
	ASSERT(descr);
     8e6:	4604      	mov	r4, r0
     8e8:	224a      	movs	r2, #74	; 0x4a
     8ea:	4909      	ldr	r1, [pc, #36]	; (910 <pwm_enable+0x2c>)
     8ec:	3000      	adds	r0, #0
     8ee:	bf18      	it	ne
     8f0:	2001      	movne	r0, #1
     8f2:	4b08      	ldr	r3, [pc, #32]	; (914 <pwm_enable+0x30>)
     8f4:	4798      	blx	r3
	if (_pwm_is_enabled(&descr->device)) {
     8f6:	4620      	mov	r0, r4
     8f8:	4b07      	ldr	r3, [pc, #28]	; (918 <pwm_enable+0x34>)
     8fa:	4798      	blx	r3
     8fc:	b920      	cbnz	r0, 908 <pwm_enable+0x24>
	_pwm_enable(&descr->device);
     8fe:	4620      	mov	r0, r4
     900:	4b06      	ldr	r3, [pc, #24]	; (91c <pwm_enable+0x38>)
     902:	4798      	blx	r3
	return ERR_NONE;
     904:	2000      	movs	r0, #0
     906:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
     908:	f06f 0010 	mvn.w	r0, #16
}
     90c:	bd10      	pop	{r4, pc}
     90e:	bf00      	nop
     910:	0000215c 	.word	0x0000215c
     914:	00000f11 	.word	0x00000f11
     918:	00001fbb 	.word	0x00001fbb
     91c:	00001f21 	.word	0x00001f21

00000920 <pwm_disable>:
{
     920:	b510      	push	{r4, lr}
	ASSERT(descr);
     922:	4604      	mov	r4, r0
     924:	2258      	movs	r2, #88	; 0x58
     926:	4909      	ldr	r1, [pc, #36]	; (94c <pwm_disable+0x2c>)
     928:	3000      	adds	r0, #0
     92a:	bf18      	it	ne
     92c:	2001      	movne	r0, #1
     92e:	4b08      	ldr	r3, [pc, #32]	; (950 <pwm_disable+0x30>)
     930:	4798      	blx	r3
	if (!_pwm_is_enabled(&descr->device)) {
     932:	4620      	mov	r0, r4
     934:	4b07      	ldr	r3, [pc, #28]	; (954 <pwm_disable+0x34>)
     936:	4798      	blx	r3
     938:	b120      	cbz	r0, 944 <pwm_disable+0x24>
	_pwm_disable(&descr->device);
     93a:	4620      	mov	r0, r4
     93c:	4b06      	ldr	r3, [pc, #24]	; (958 <pwm_disable+0x38>)
     93e:	4798      	blx	r3
	return ERR_NONE;
     940:	2000      	movs	r0, #0
     942:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
     944:	f06f 0010 	mvn.w	r0, #16
}
     948:	bd10      	pop	{r4, pc}
     94a:	bf00      	nop
     94c:	0000215c 	.word	0x0000215c
     950:	00000f11 	.word	0x00000f11
     954:	00001fbb 	.word	0x00001fbb
     958:	00001f35 	.word	0x00001f35

0000095c <pwm_set_parameters>:
{
     95c:	b570      	push	{r4, r5, r6, lr}
     95e:	460d      	mov	r5, r1
     960:	4616      	mov	r6, r2
	ASSERT(descr);
     962:	4604      	mov	r4, r0
     964:	227c      	movs	r2, #124	; 0x7c
     966:	4906      	ldr	r1, [pc, #24]	; (980 <pwm_set_parameters+0x24>)
     968:	3000      	adds	r0, #0
     96a:	bf18      	it	ne
     96c:	2001      	movne	r0, #1
     96e:	4b05      	ldr	r3, [pc, #20]	; (984 <pwm_set_parameters+0x28>)
     970:	4798      	blx	r3
	_pwm_set_param(&descr->device, period, duty_cycle);
     972:	4632      	mov	r2, r6
     974:	4629      	mov	r1, r5
     976:	4620      	mov	r0, r4
     978:	4b03      	ldr	r3, [pc, #12]	; (988 <pwm_set_parameters+0x2c>)
     97a:	4798      	blx	r3
}
     97c:	2000      	movs	r0, #0
     97e:	bd70      	pop	{r4, r5, r6, pc}
     980:	0000215c 	.word	0x0000215c
     984:	00000f11 	.word	0x00000f11
     988:	00001f49 	.word	0x00001f49

0000098c <_spi_m_async_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
     98c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     98e:	460f      	mov	r7, r1
     990:	4616      	mov	r6, r2
	ASSERT(io);
     992:	4604      	mov	r4, r0
     994:	f240 1227 	movw	r2, #295	; 0x127
     998:	4909      	ldr	r1, [pc, #36]	; (9c0 <_spi_m_async_io_write+0x34>)
     99a:	3000      	adds	r0, #0
     99c:	bf18      	it	ne
     99e:	2001      	movne	r0, #1
     9a0:	4b08      	ldr	r3, [pc, #32]	; (9c4 <_spi_m_async_io_write+0x38>)
     9a2:	4798      	blx	r3
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);

	spi->xfer.rxbuf = NULL;
     9a4:	2500      	movs	r5, #0
     9a6:	61a5      	str	r5, [r4, #24]
	spi->xfer.txbuf = (uint8_t *)buf;
     9a8:	6167      	str	r7, [r4, #20]
	spi->xfer.size  = length;
     9aa:	61e6      	str	r6, [r4, #28]
	spi->xfercnt    = 0;
     9ac:	6225      	str	r5, [r4, #32]

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
     9ae:	2310      	movs	r3, #16
     9b0:	7223      	strb	r3, [r4, #8]
	_spi_m_async_enable_tx(&spi->dev, true);
     9b2:	2101      	movs	r1, #1
     9b4:	f1a4 0020 	sub.w	r0, r4, #32
     9b8:	4b03      	ldr	r3, [pc, #12]	; (9c8 <_spi_m_async_io_write+0x3c>)
     9ba:	4798      	blx	r3

	return ERR_NONE;
}
     9bc:	4628      	mov	r0, r5
     9be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     9c0:	00002174 	.word	0x00002174
     9c4:	00000f11 	.word	0x00000f11
     9c8:	00001a05 	.word	0x00001a05

000009cc <_spi_m_async_io_read>:
{
     9cc:	b570      	push	{r4, r5, r6, lr}
     9ce:	460d      	mov	r5, r1
     9d0:	4616      	mov	r6, r2
	ASSERT(io);
     9d2:	4604      	mov	r4, r0
     9d4:	f240 1205 	movw	r2, #261	; 0x105
     9d8:	490c      	ldr	r1, [pc, #48]	; (a0c <_spi_m_async_io_read+0x40>)
     9da:	3000      	adds	r0, #0
     9dc:	bf18      	it	ne
     9de:	2001      	movne	r0, #1
     9e0:	4b0b      	ldr	r3, [pc, #44]	; (a10 <_spi_m_async_io_read+0x44>)
     9e2:	4798      	blx	r3
	spi->xfer.rxbuf = buf;
     9e4:	61a5      	str	r5, [r4, #24]
	spi->xfer.txbuf = NULL;
     9e6:	2500      	movs	r5, #0
     9e8:	6165      	str	r5, [r4, #20]
	spi->xfer.size  = length;
     9ea:	61e6      	str	r6, [r4, #28]
	spi->xfercnt    = 0;
     9ec:	6225      	str	r5, [r4, #32]
	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
     9ee:	2310      	movs	r3, #16
     9f0:	7223      	strb	r3, [r4, #8]
	_spi_m_async_enable_rx(&spi->dev, true);
     9f2:	3c20      	subs	r4, #32
     9f4:	2101      	movs	r1, #1
     9f6:	4620      	mov	r0, r4
     9f8:	4b06      	ldr	r3, [pc, #24]	; (a14 <_spi_m_async_io_read+0x48>)
     9fa:	4798      	blx	r3
	_spi_m_async_write_one(&spi->dev, SPI_DUMMY_CHAR);
     9fc:	f240 11ff 	movw	r1, #511	; 0x1ff
     a00:	4620      	mov	r0, r4
     a02:	4b05      	ldr	r3, [pc, #20]	; (a18 <_spi_m_async_io_read+0x4c>)
     a04:	4798      	blx	r3
}
     a06:	4628      	mov	r0, r5
     a08:	bd70      	pop	{r4, r5, r6, pc}
     a0a:	bf00      	nop
     a0c:	00002174 	.word	0x00002174
     a10:	00000f11 	.word	0x00000f11
     a14:	00001a39 	.word	0x00001a39
     a18:	00001ab5 	.word	0x00001ab5

00000a1c <_spi_dev_error>:
{
     a1c:	b570      	push	{r4, r5, r6, lr}
     a1e:	4604      	mov	r4, r0
     a20:	460e      	mov	r6, r1
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
     a22:	1f05      	subs	r5, r0, #4
	_spi_m_async_enable_tx(dev, false);
     a24:	2100      	movs	r1, #0
     a26:	4b09      	ldr	r3, [pc, #36]	; (a4c <_spi_dev_error+0x30>)
     a28:	4798      	blx	r3
	_spi_m_async_enable_rx(dev, false);
     a2a:	2100      	movs	r1, #0
     a2c:	4620      	mov	r0, r4
     a2e:	4b08      	ldr	r3, [pc, #32]	; (a50 <_spi_dev_error+0x34>)
     a30:	4798      	blx	r3
	_spi_m_async_enable_tx_complete(dev, false);
     a32:	2100      	movs	r1, #0
     a34:	4620      	mov	r0, r4
     a36:	4b07      	ldr	r3, [pc, #28]	; (a54 <_spi_dev_error+0x38>)
     a38:	4798      	blx	r3
	spi->stat = 0;
     a3a:	2300      	movs	r3, #0
     a3c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	if (spi->callbacks.cb_error) {
     a40:	6b23      	ldr	r3, [r4, #48]	; 0x30
     a42:	b113      	cbz	r3, a4a <_spi_dev_error+0x2e>
		spi->callbacks.cb_error(spi, status);
     a44:	4631      	mov	r1, r6
     a46:	4628      	mov	r0, r5
     a48:	4798      	blx	r3
     a4a:	bd70      	pop	{r4, r5, r6, pc}
     a4c:	00001a05 	.word	0x00001a05
     a50:	00001a39 	.word	0x00001a39
     a54:	00001a79 	.word	0x00001a79

00000a58 <_spi_dev_complete>:
	if (spi->xfercnt >= spi->xfer.size) {
     a58:	6c02      	ldr	r2, [r0, #64]	; 0x40
     a5a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
     a5c:	429a      	cmp	r2, r3
     a5e:	d200      	bcs.n	a62 <_spi_dev_complete+0xa>
     a60:	4770      	bx	lr
{
     a62:	b510      	push	{r4, lr}
     a64:	4604      	mov	r4, r0
		_spi_m_async_enable_tx_complete(dev, false);
     a66:	2100      	movs	r1, #0
     a68:	4b04      	ldr	r3, [pc, #16]	; (a7c <_spi_dev_complete+0x24>)
     a6a:	4798      	blx	r3
		spi->stat = 0;
     a6c:	2300      	movs	r3, #0
     a6e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (spi->callbacks.cb_xfer) {
     a72:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     a74:	b10b      	cbz	r3, a7a <_spi_dev_complete+0x22>
			spi->callbacks.cb_xfer(spi);
     a76:	1f20      	subs	r0, r4, #4
     a78:	4798      	blx	r3
     a7a:	bd10      	pop	{r4, pc}
     a7c:	00001a79 	.word	0x00001a79

00000a80 <_spi_dev_tx>:
{
     a80:	b510      	push	{r4, lr}
     a82:	4604      	mov	r4, r0
	if (!(dev->char_size > 1)) {
     a84:	7903      	ldrb	r3, [r0, #4]
     a86:	2b01      	cmp	r3, #1
		_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt++]);
     a88:	6b42      	ldr	r2, [r0, #52]	; 0x34
     a8a:	6c03      	ldr	r3, [r0, #64]	; 0x40
     a8c:	f103 0101 	add.w	r1, r3, #1
     a90:	6401      	str	r1, [r0, #64]	; 0x40
     a92:	bf94      	ite	ls
     a94:	5cd1      	ldrbls	r1, [r2, r3]
		_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt++]);
     a96:	f832 1013 	ldrhhi.w	r1, [r2, r3, lsl #1]
     a9a:	4b08      	ldr	r3, [pc, #32]	; (abc <_spi_dev_tx+0x3c>)
     a9c:	4798      	blx	r3
	if (spi->xfercnt == spi->xfer.size) {
     a9e:	6c22      	ldr	r2, [r4, #64]	; 0x40
     aa0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
     aa2:	429a      	cmp	r2, r3
     aa4:	d000      	beq.n	aa8 <_spi_dev_tx+0x28>
     aa6:	bd10      	pop	{r4, pc}
		_spi_m_async_enable_tx(dev, false);
     aa8:	2100      	movs	r1, #0
     aaa:	4620      	mov	r0, r4
     aac:	4b04      	ldr	r3, [pc, #16]	; (ac0 <_spi_dev_tx+0x40>)
     aae:	4798      	blx	r3
		_spi_m_async_enable_tx_complete(dev, true);
     ab0:	2101      	movs	r1, #1
     ab2:	4620      	mov	r0, r4
     ab4:	4b03      	ldr	r3, [pc, #12]	; (ac4 <_spi_dev_tx+0x44>)
     ab6:	4798      	blx	r3
}
     ab8:	e7f5      	b.n	aa6 <_spi_dev_tx+0x26>
     aba:	bf00      	nop
     abc:	00001ab5 	.word	0x00001ab5
     ac0:	00001a05 	.word	0x00001a05
     ac4:	00001a79 	.word	0x00001a79

00000ac8 <_spi_dev_rx>:
{
     ac8:	b570      	push	{r4, r5, r6, lr}
     aca:	4604      	mov	r4, r0
	if (spi->xfer.rxbuf) {
     acc:	6b85      	ldr	r5, [r0, #56]	; 0x38
     ace:	b305      	cbz	r5, b12 <_spi_dev_rx+0x4a>
		if (!(dev->char_size > 1)) {
     ad0:	7903      	ldrb	r3, [r0, #4]
     ad2:	2b01      	cmp	r3, #1
     ad4:	d916      	bls.n	b04 <_spi_dev_rx+0x3c>
			((uint16_t *)spi->xfer.rxbuf)[spi->xfercnt++] = (uint16_t)_spi_m_async_read_one(dev);
     ad6:	6c06      	ldr	r6, [r0, #64]	; 0x40
     ad8:	1c73      	adds	r3, r6, #1
     ada:	6403      	str	r3, [r0, #64]	; 0x40
     adc:	4b18      	ldr	r3, [pc, #96]	; (b40 <_spi_dev_rx+0x78>)
     ade:	4798      	blx	r3
     ae0:	f825 0016 	strh.w	r0, [r5, r6, lsl #1]
	if (spi->xfercnt < spi->xfer.size) {
     ae4:	6c23      	ldr	r3, [r4, #64]	; 0x40
     ae6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
     ae8:	4293      	cmp	r3, r2
     aea:	d21d      	bcs.n	b28 <_spi_dev_rx+0x60>
		if (spi->xfer.txbuf) {
     aec:	6b62      	ldr	r2, [r4, #52]	; 0x34
     aee:	b1b2      	cbz	r2, b1e <_spi_dev_rx+0x56>
			if (!(dev->char_size > 1)) {
     af0:	7921      	ldrb	r1, [r4, #4]
     af2:	2901      	cmp	r1, #1
				_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt]);
     af4:	bf94      	ite	ls
     af6:	5cd1      	ldrbls	r1, [r2, r3]
				_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt]);
     af8:	f832 1013 	ldrhhi.w	r1, [r2, r3, lsl #1]
     afc:	4620      	mov	r0, r4
     afe:	4b11      	ldr	r3, [pc, #68]	; (b44 <_spi_dev_rx+0x7c>)
     b00:	4798      	blx	r3
     b02:	bd70      	pop	{r4, r5, r6, pc}
			spi->xfer.rxbuf[spi->xfercnt++] = (uint8_t)_spi_m_async_read_one(dev);
     b04:	6c06      	ldr	r6, [r0, #64]	; 0x40
     b06:	1c73      	adds	r3, r6, #1
     b08:	6403      	str	r3, [r0, #64]	; 0x40
     b0a:	4b0d      	ldr	r3, [pc, #52]	; (b40 <_spi_dev_rx+0x78>)
     b0c:	4798      	blx	r3
     b0e:	55a8      	strb	r0, [r5, r6]
     b10:	e7e8      	b.n	ae4 <_spi_dev_rx+0x1c>
		_spi_m_async_read_one(dev);
     b12:	4b0b      	ldr	r3, [pc, #44]	; (b40 <_spi_dev_rx+0x78>)
     b14:	4798      	blx	r3
		spi->xfercnt++;
     b16:	6c23      	ldr	r3, [r4, #64]	; 0x40
     b18:	3301      	adds	r3, #1
     b1a:	6423      	str	r3, [r4, #64]	; 0x40
     b1c:	e7e2      	b.n	ae4 <_spi_dev_rx+0x1c>
			_spi_m_async_write_one(dev, dev->dummy_byte);
     b1e:	88e1      	ldrh	r1, [r4, #6]
     b20:	4620      	mov	r0, r4
     b22:	4b08      	ldr	r3, [pc, #32]	; (b44 <_spi_dev_rx+0x7c>)
     b24:	4798      	blx	r3
     b26:	bd70      	pop	{r4, r5, r6, pc}
		_spi_m_async_enable_rx(dev, false);
     b28:	2100      	movs	r1, #0
     b2a:	4620      	mov	r0, r4
     b2c:	4b06      	ldr	r3, [pc, #24]	; (b48 <_spi_dev_rx+0x80>)
     b2e:	4798      	blx	r3
		spi->stat = 0;
     b30:	2300      	movs	r3, #0
     b32:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (spi->callbacks.cb_xfer) {
     b36:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     b38:	b10b      	cbz	r3, b3e <_spi_dev_rx+0x76>
			spi->callbacks.cb_xfer(spi);
     b3a:	1f20      	subs	r0, r4, #4
     b3c:	4798      	blx	r3
     b3e:	bd70      	pop	{r4, r5, r6, pc}
     b40:	00001ae5 	.word	0x00001ae5
     b44:	00001ab5 	.word	0x00001ab5
     b48:	00001a39 	.word	0x00001a39

00000b4c <spi_m_async_init>:
{
     b4c:	b570      	push	{r4, r5, r6, lr}
     b4e:	460d      	mov	r5, r1
	ASSERT(spi && hw);
     b50:	4606      	mov	r6, r0
     b52:	b330      	cbz	r0, ba2 <spi_m_async_init+0x56>
     b54:	1c08      	adds	r0, r1, #0
     b56:	bf18      	it	ne
     b58:	2001      	movne	r0, #1
     b5a:	22a5      	movs	r2, #165	; 0xa5
     b5c:	4912      	ldr	r1, [pc, #72]	; (ba8 <spi_m_async_init+0x5c>)
     b5e:	4b13      	ldr	r3, [pc, #76]	; (bac <spi_m_async_init+0x60>)
     b60:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
     b62:	4634      	mov	r4, r6
     b64:	f844 5f04 	str.w	r5, [r4, #4]!
	rc            = _spi_m_async_init(&spi->dev, hw);
     b68:	4629      	mov	r1, r5
     b6a:	4620      	mov	r0, r4
     b6c:	4b10      	ldr	r3, [pc, #64]	; (bb0 <spi_m_async_init+0x64>)
     b6e:	4798      	blx	r3
	if (rc >= 0) {
     b70:	2800      	cmp	r0, #0
     b72:	db15      	blt.n	ba0 <spi_m_async_init+0x54>
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_TX, (FUNC_PTR)_spi_dev_tx);
     b74:	4a0f      	ldr	r2, [pc, #60]	; (bb4 <spi_m_async_init+0x68>)
     b76:	2100      	movs	r1, #0
     b78:	4620      	mov	r0, r4
     b7a:	4d0f      	ldr	r5, [pc, #60]	; (bb8 <spi_m_async_init+0x6c>)
     b7c:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_RX, (FUNC_PTR)_spi_dev_rx);
     b7e:	4a0f      	ldr	r2, [pc, #60]	; (bbc <spi_m_async_init+0x70>)
     b80:	2101      	movs	r1, #1
     b82:	4620      	mov	r0, r4
     b84:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_COMPLETE, (FUNC_PTR)_spi_dev_complete);
     b86:	4a0e      	ldr	r2, [pc, #56]	; (bc0 <spi_m_async_init+0x74>)
     b88:	2102      	movs	r1, #2
     b8a:	4620      	mov	r0, r4
     b8c:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_ERROR, (FUNC_PTR)_spi_dev_error);
     b8e:	4a0d      	ldr	r2, [pc, #52]	; (bc4 <spi_m_async_init+0x78>)
     b90:	2103      	movs	r1, #3
     b92:	4620      	mov	r0, r4
     b94:	47a8      	blx	r5
	spi->io.read  = _spi_m_async_io_read;
     b96:	4b0c      	ldr	r3, [pc, #48]	; (bc8 <spi_m_async_init+0x7c>)
     b98:	62b3      	str	r3, [r6, #40]	; 0x28
	spi->io.write = _spi_m_async_io_write;
     b9a:	4b0c      	ldr	r3, [pc, #48]	; (bcc <spi_m_async_init+0x80>)
     b9c:	6273      	str	r3, [r6, #36]	; 0x24
	return ERR_NONE;
     b9e:	2000      	movs	r0, #0
}
     ba0:	bd70      	pop	{r4, r5, r6, pc}
     ba2:	2000      	movs	r0, #0
     ba4:	e7d9      	b.n	b5a <spi_m_async_init+0xe>
     ba6:	bf00      	nop
     ba8:	00002174 	.word	0x00002174
     bac:	00000f11 	.word	0x00000f11
     bb0:	00001999 	.word	0x00001999
     bb4:	00000a81 	.word	0x00000a81
     bb8:	00001b11 	.word	0x00001b11
     bbc:	00000ac9 	.word	0x00000ac9
     bc0:	00000a59 	.word	0x00000a59
     bc4:	00000a1d 	.word	0x00000a1d
     bc8:	000009cd 	.word	0x000009cd
     bcc:	0000098d 	.word	0x0000098d

00000bd0 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
     bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     bd2:	4684      	mov	ip, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
     bd4:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
     bd6:	b12f      	cbz	r7, be4 <timer_add_timer_task+0x14>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
     bd8:	688d      	ldr	r5, [r1, #8]
     bda:	463c      	mov	r4, r7
     bdc:	2600      	movs	r6, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     bde:	f1c2 0e01 	rsb	lr, r2, #1
     be2:	e00b      	b.n	bfc <timer_add_timer_task+0x2c>
		list_insert_as_head(list, new_task);
     be4:	4b0e      	ldr	r3, [pc, #56]	; (c20 <timer_add_timer_task+0x50>)
     be6:	4798      	blx	r3
		return;
     be8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     bea:	4473      	add	r3, lr
     bec:	68a0      	ldr	r0, [r4, #8]
     bee:	4403      	add	r3, r0
		if (time_left >= new_task->interval)
     bf0:	42ab      	cmp	r3, r5
     bf2:	d20a      	bcs.n	c0a <timer_add_timer_task+0x3a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
     bf4:	6823      	ldr	r3, [r4, #0]
     bf6:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
     bf8:	b153      	cbz	r3, c10 <timer_add_timer_task+0x40>
     bfa:	461c      	mov	r4, r3
		if (it->time_label <= time) {
     bfc:	6863      	ldr	r3, [r4, #4]
     bfe:	4293      	cmp	r3, r2
     c00:	d8f3      	bhi.n	bea <timer_add_timer_task+0x1a>
			time_left = it->interval - (time - it->time_label);
     c02:	68a0      	ldr	r0, [r4, #8]
     c04:	4403      	add	r3, r0
     c06:	1a9b      	subs	r3, r3, r2
     c08:	e7f2      	b.n	bf0 <timer_add_timer_task+0x20>
			break;
		prev = it;
	}

	if (it == head) {
     c0a:	42a7      	cmp	r7, r4
     c0c:	d004      	beq.n	c18 <timer_add_timer_task+0x48>
     c0e:	4634      	mov	r4, r6
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
     c10:	4620      	mov	r0, r4
     c12:	4b04      	ldr	r3, [pc, #16]	; (c24 <timer_add_timer_task+0x54>)
     c14:	4798      	blx	r3
     c16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
     c18:	4660      	mov	r0, ip
     c1a:	4b01      	ldr	r3, [pc, #4]	; (c20 <timer_add_timer_task+0x50>)
     c1c:	4798      	blx	r3
     c1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     c20:	00000f39 	.word	0x00000f39
     c24:	00000f65 	.word	0x00000f65

00000c28 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
     c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return (void *)list->head;
     c2c:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
     c2e:	6907      	ldr	r7, [r0, #16]
     c30:	3701      	adds	r7, #1
     c32:	6107      	str	r7, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
     c34:	7e03      	ldrb	r3, [r0, #24]
     c36:	f013 0f01 	tst.w	r3, #1
     c3a:	d113      	bne.n	c64 <timer_process_counted+0x3c>
     c3c:	7e03      	ldrb	r3, [r0, #24]
     c3e:	f013 0f02 	tst.w	r3, #2
     c42:	d10f      	bne.n	c64 <timer_process_counted+0x3c>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
     c44:	b354      	cbz	r4, c9c <timer_process_counted+0x74>
     c46:	6863      	ldr	r3, [r4, #4]
     c48:	1afb      	subs	r3, r7, r3
     c4a:	68a2      	ldr	r2, [r4, #8]
     c4c:	4293      	cmp	r3, r2
     c4e:	d307      	bcc.n	c60 <timer_process_counted+0x38>
     c50:	4606      	mov	r6, r0
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
     c52:	f100 0814 	add.w	r8, r0, #20
     c56:	f8df 9048 	ldr.w	r9, [pc, #72]	; ca0 <timer_process_counted+0x78>
		if (TIMER_TASK_REPEAT == tmp->mode) {
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
     c5a:	f8df a048 	ldr.w	sl, [pc, #72]	; ca4 <timer_process_counted+0x7c>
     c5e:	e012      	b.n	c86 <timer_process_counted+0x5e>
     c60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
     c64:	7e03      	ldrb	r3, [r0, #24]
     c66:	f043 0302 	orr.w	r3, r3, #2
     c6a:	7603      	strb	r3, [r0, #24]
		return;
     c6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     c70:	6975      	ldr	r5, [r6, #20]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
     c72:	68e3      	ldr	r3, [r4, #12]
     c74:	4620      	mov	r0, r4
     c76:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
     c78:	b185      	cbz	r5, c9c <timer_process_counted+0x74>
		it = (struct timer_task *)list_get_head(&timer->tasks);
     c7a:	462c      	mov	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
     c7c:	686b      	ldr	r3, [r5, #4]
     c7e:	1afb      	subs	r3, r7, r3
     c80:	68aa      	ldr	r2, [r5, #8]
     c82:	4293      	cmp	r3, r2
     c84:	d30a      	bcc.n	c9c <timer_process_counted+0x74>
		list_remove_head(&timer->tasks);
     c86:	4640      	mov	r0, r8
     c88:	47c8      	blx	r9
		if (TIMER_TASK_REPEAT == tmp->mode) {
     c8a:	7c23      	ldrb	r3, [r4, #16]
     c8c:	2b01      	cmp	r3, #1
     c8e:	d1ef      	bne.n	c70 <timer_process_counted+0x48>
			tmp->time_label = time;
     c90:	6067      	str	r7, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
     c92:	463a      	mov	r2, r7
     c94:	4621      	mov	r1, r4
     c96:	4640      	mov	r0, r8
     c98:	47d0      	blx	sl
     c9a:	e7e9      	b.n	c70 <timer_process_counted+0x48>
     c9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     ca0:	00000f6d 	.word	0x00000f6d
     ca4:	00000bd1 	.word	0x00000bd1

00000ca8 <timer_init>:
{
     ca8:	b538      	push	{r3, r4, r5, lr}
     caa:	460d      	mov	r5, r1
	ASSERT(descr && hw);
     cac:	4604      	mov	r4, r0
     cae:	b178      	cbz	r0, cd0 <timer_init+0x28>
     cb0:	1c08      	adds	r0, r1, #0
     cb2:	bf18      	it	ne
     cb4:	2001      	movne	r0, #1
     cb6:	223b      	movs	r2, #59	; 0x3b
     cb8:	4906      	ldr	r1, [pc, #24]	; (cd4 <timer_init+0x2c>)
     cba:	4b07      	ldr	r3, [pc, #28]	; (cd8 <timer_init+0x30>)
     cbc:	4798      	blx	r3
	_timer_init(&descr->device, hw);
     cbe:	4629      	mov	r1, r5
     cc0:	4620      	mov	r0, r4
     cc2:	4b06      	ldr	r3, [pc, #24]	; (cdc <timer_init+0x34>)
     cc4:	4798      	blx	r3
	descr->time                           = 0;
     cc6:	2000      	movs	r0, #0
     cc8:	6120      	str	r0, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
     cca:	4b05      	ldr	r3, [pc, #20]	; (ce0 <timer_init+0x38>)
     ccc:	6023      	str	r3, [r4, #0]
}
     cce:	bd38      	pop	{r3, r4, r5, pc}
     cd0:	2000      	movs	r0, #0
     cd2:	e7f0      	b.n	cb6 <timer_init+0xe>
     cd4:	00002194 	.word	0x00002194
     cd8:	00000f11 	.word	0x00000f11
     cdc:	00001bbd 	.word	0x00001bbd
     ce0:	00000c29 	.word	0x00000c29

00000ce4 <timer_start>:
{
     ce4:	b510      	push	{r4, lr}
	ASSERT(descr);
     ce6:	4604      	mov	r4, r0
     ce8:	2253      	movs	r2, #83	; 0x53
     cea:	4909      	ldr	r1, [pc, #36]	; (d10 <timer_start+0x2c>)
     cec:	3000      	adds	r0, #0
     cee:	bf18      	it	ne
     cf0:	2001      	movne	r0, #1
     cf2:	4b08      	ldr	r3, [pc, #32]	; (d14 <timer_start+0x30>)
     cf4:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
     cf6:	4620      	mov	r0, r4
     cf8:	4b07      	ldr	r3, [pc, #28]	; (d18 <timer_start+0x34>)
     cfa:	4798      	blx	r3
     cfc:	b920      	cbnz	r0, d08 <timer_start+0x24>
	_timer_start(&descr->device);
     cfe:	4620      	mov	r0, r4
     d00:	4b06      	ldr	r3, [pc, #24]	; (d1c <timer_start+0x38>)
     d02:	4798      	blx	r3
	return ERR_NONE;
     d04:	2000      	movs	r0, #0
     d06:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
     d08:	f06f 0010 	mvn.w	r0, #16
}
     d0c:	bd10      	pop	{r4, pc}
     d0e:	bf00      	nop
     d10:	00002194 	.word	0x00002194
     d14:	00000f11 	.word	0x00000f11
     d18:	00001fa9 	.word	0x00001fa9
     d1c:	00001f0d 	.word	0x00001f0d

00000d20 <timer_add_task>:
{
     d20:	b570      	push	{r4, r5, r6, lr}
     d22:	b082      	sub	sp, #8
     d24:	460d      	mov	r5, r1
	ASSERT(descr && task);
     d26:	4604      	mov	r4, r0
     d28:	b318      	cbz	r0, d72 <timer_add_task+0x52>
     d2a:	1c08      	adds	r0, r1, #0
     d2c:	bf18      	it	ne
     d2e:	2001      	movne	r0, #1
     d30:	227a      	movs	r2, #122	; 0x7a
     d32:	491e      	ldr	r1, [pc, #120]	; (dac <timer_add_task+0x8c>)
     d34:	4b1e      	ldr	r3, [pc, #120]	; (db0 <timer_add_task+0x90>)
     d36:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
     d38:	7e23      	ldrb	r3, [r4, #24]
     d3a:	f043 0301 	orr.w	r3, r3, #1
     d3e:	7623      	strb	r3, [r4, #24]
	if (is_list_element(&descr->tasks, task)) {
     d40:	f104 0614 	add.w	r6, r4, #20
     d44:	4629      	mov	r1, r5
     d46:	4630      	mov	r0, r6
     d48:	4b1a      	ldr	r3, [pc, #104]	; (db4 <timer_add_task+0x94>)
     d4a:	4798      	blx	r3
     d4c:	b998      	cbnz	r0, d76 <timer_add_task+0x56>
	task->time_label = descr->time;
     d4e:	6923      	ldr	r3, [r4, #16]
     d50:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
     d52:	6922      	ldr	r2, [r4, #16]
     d54:	4629      	mov	r1, r5
     d56:	4630      	mov	r0, r6
     d58:	4b17      	ldr	r3, [pc, #92]	; (db8 <timer_add_task+0x98>)
     d5a:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
     d5c:	7e23      	ldrb	r3, [r4, #24]
     d5e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
     d62:	7623      	strb	r3, [r4, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
     d64:	7e23      	ldrb	r3, [r4, #24]
     d66:	f013 0f02 	tst.w	r3, #2
     d6a:	d110      	bne.n	d8e <timer_add_task+0x6e>
	return ERR_NONE;
     d6c:	2000      	movs	r0, #0
}
     d6e:	b002      	add	sp, #8
     d70:	bd70      	pop	{r4, r5, r6, pc}
     d72:	2000      	movs	r0, #0
     d74:	e7dc      	b.n	d30 <timer_add_task+0x10>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
     d76:	7e23      	ldrb	r3, [r4, #24]
     d78:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
     d7c:	7623      	strb	r3, [r4, #24]
		ASSERT(false);
     d7e:	227f      	movs	r2, #127	; 0x7f
     d80:	490a      	ldr	r1, [pc, #40]	; (dac <timer_add_task+0x8c>)
     d82:	2000      	movs	r0, #0
     d84:	4b0a      	ldr	r3, [pc, #40]	; (db0 <timer_add_task+0x90>)
     d86:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
     d88:	f06f 0011 	mvn.w	r0, #17
     d8c:	e7ef      	b.n	d6e <timer_add_task+0x4e>
		CRITICAL_SECTION_ENTER()
     d8e:	a801      	add	r0, sp, #4
     d90:	4b0a      	ldr	r3, [pc, #40]	; (dbc <timer_add_task+0x9c>)
     d92:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
     d94:	7e23      	ldrb	r3, [r4, #24]
     d96:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
     d9a:	7623      	strb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
     d9c:	4620      	mov	r0, r4
     d9e:	4b08      	ldr	r3, [pc, #32]	; (dc0 <timer_add_task+0xa0>)
     da0:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
     da2:	a801      	add	r0, sp, #4
     da4:	4b07      	ldr	r3, [pc, #28]	; (dc4 <timer_add_task+0xa4>)
     da6:	4798      	blx	r3
	return ERR_NONE;
     da8:	2000      	movs	r0, #0
     daa:	e7e0      	b.n	d6e <timer_add_task+0x4e>
     dac:	00002194 	.word	0x00002194
     db0:	00000f11 	.word	0x00000f11
     db4:	00000f17 	.word	0x00000f17
     db8:	00000bd1 	.word	0x00000bd1
     dbc:	00000871 	.word	0x00000871
     dc0:	00001fd5 	.word	0x00001fd5
     dc4:	0000087f 	.word	0x0000087f

00000dc8 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     dc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     dcc:	460f      	mov	r7, r1
     dce:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     dd0:	4604      	mov	r4, r0
     dd2:	b328      	cbz	r0, e20 <usart_sync_write+0x58>
     dd4:	b331      	cbz	r1, e24 <usart_sync_write+0x5c>
     dd6:	1c10      	adds	r0, r2, #0
     dd8:	bf18      	it	ne
     dda:	2001      	movne	r0, #1
     ddc:	22f1      	movs	r2, #241	; 0xf1
     dde:	4912      	ldr	r1, [pc, #72]	; (e28 <usart_sync_write+0x60>)
     de0:	4b12      	ldr	r3, [pc, #72]	; (e2c <usart_sync_write+0x64>)
     de2:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
     de4:	3408      	adds	r4, #8
     de6:	4d12      	ldr	r5, [pc, #72]	; (e30 <usart_sync_write+0x68>)
     de8:	4620      	mov	r0, r4
     dea:	47a8      	blx	r5
     dec:	2800      	cmp	r0, #0
     dee:	d0fb      	beq.n	de8 <usart_sync_write+0x20>
     df0:	3f01      	subs	r7, #1
     df2:	2600      	movs	r6, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
     df4:	f8df 9040 	ldr.w	r9, [pc, #64]	; e38 <usart_sync_write+0x70>
		while (!_usart_sync_is_ready_to_send(&descr->device))
     df8:	4d0d      	ldr	r5, [pc, #52]	; (e30 <usart_sync_write+0x68>)
		_usart_sync_write_byte(&descr->device, buf[offset]);
     dfa:	f817 1f01 	ldrb.w	r1, [r7, #1]!
     dfe:	4620      	mov	r0, r4
     e00:	47c8      	blx	r9
		while (!_usart_sync_is_ready_to_send(&descr->device))
     e02:	4620      	mov	r0, r4
     e04:	47a8      	blx	r5
     e06:	2800      	cmp	r0, #0
     e08:	d0fb      	beq.n	e02 <usart_sync_write+0x3a>
			;
	} while (++offset < length);
     e0a:	3601      	adds	r6, #1
     e0c:	4546      	cmp	r6, r8
     e0e:	d3f4      	bcc.n	dfa <usart_sync_write+0x32>
	while (!_usart_sync_is_transmit_done(&descr->device))
     e10:	4d08      	ldr	r5, [pc, #32]	; (e34 <usart_sync_write+0x6c>)
     e12:	4620      	mov	r0, r4
     e14:	47a8      	blx	r5
     e16:	2800      	cmp	r0, #0
     e18:	d0fb      	beq.n	e12 <usart_sync_write+0x4a>
		;
	return (int32_t)offset;
}
     e1a:	4630      	mov	r0, r6
     e1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(io_descr && buf && length);
     e20:	2000      	movs	r0, #0
     e22:	e7db      	b.n	ddc <usart_sync_write+0x14>
     e24:	2000      	movs	r0, #0
     e26:	e7d9      	b.n	ddc <usart_sync_write+0x14>
     e28:	000021ac 	.word	0x000021ac
     e2c:	00000f11 	.word	0x00000f11
     e30:	00001837 	.word	0x00001837
     e34:	00001841 	.word	0x00001841
     e38:	00001829 	.word	0x00001829

00000e3c <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     e3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     e40:	460f      	mov	r7, r1
     e42:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     e44:	4604      	mov	r4, r0
     e46:	b1e0      	cbz	r0, e82 <usart_sync_read+0x46>
     e48:	b1e9      	cbz	r1, e86 <usart_sync_read+0x4a>
     e4a:	1c10      	adds	r0, r2, #0
     e4c:	bf18      	it	ne
     e4e:	2001      	movne	r0, #1
     e50:	f44f 7286 	mov.w	r2, #268	; 0x10c
     e54:	490d      	ldr	r1, [pc, #52]	; (e8c <usart_sync_read+0x50>)
     e56:	4b0e      	ldr	r3, [pc, #56]	; (e90 <usart_sync_read+0x54>)
     e58:	4798      	blx	r3
     e5a:	3f01      	subs	r7, #1
	uint32_t                      offset = 0;
     e5c:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
     e5e:	3408      	adds	r4, #8
     e60:	4d0c      	ldr	r5, [pc, #48]	; (e94 <usart_sync_read+0x58>)
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
     e62:	f8df 9034 	ldr.w	r9, [pc, #52]	; e98 <usart_sync_read+0x5c>
		while (!_usart_sync_is_byte_received(&descr->device))
     e66:	4620      	mov	r0, r4
     e68:	47a8      	blx	r5
     e6a:	2800      	cmp	r0, #0
     e6c:	d0fb      	beq.n	e66 <usart_sync_read+0x2a>
		buf[offset] = _usart_sync_read_byte(&descr->device);
     e6e:	4620      	mov	r0, r4
     e70:	47c8      	blx	r9
     e72:	f807 0f01 	strb.w	r0, [r7, #1]!
	} while (++offset < length);
     e76:	3601      	adds	r6, #1
     e78:	4546      	cmp	r6, r8
     e7a:	d3f4      	bcc.n	e66 <usart_sync_read+0x2a>

	return (int32_t)offset;
}
     e7c:	4630      	mov	r0, r6
     e7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(io_descr && buf && length);
     e82:	2000      	movs	r0, #0
     e84:	e7e4      	b.n	e50 <usart_sync_read+0x14>
     e86:	2000      	movs	r0, #0
     e88:	e7e2      	b.n	e50 <usart_sync_read+0x14>
     e8a:	bf00      	nop
     e8c:	000021ac 	.word	0x000021ac
     e90:	00000f11 	.word	0x00000f11
     e94:	0000184b 	.word	0x0000184b
     e98:	0000182f 	.word	0x0000182f

00000e9c <usart_sync_init>:
{
     e9c:	b538      	push	{r3, r4, r5, lr}
     e9e:	460d      	mov	r5, r1
	ASSERT(descr && hw);
     ea0:	4604      	mov	r4, r0
     ea2:	b198      	cbz	r0, ecc <usart_sync_init+0x30>
     ea4:	1c08      	adds	r0, r1, #0
     ea6:	bf18      	it	ne
     ea8:	2001      	movne	r0, #1
     eaa:	2234      	movs	r2, #52	; 0x34
     eac:	4908      	ldr	r1, [pc, #32]	; (ed0 <usart_sync_init+0x34>)
     eae:	4b09      	ldr	r3, [pc, #36]	; (ed4 <usart_sync_init+0x38>)
     eb0:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
     eb2:	4629      	mov	r1, r5
     eb4:	f104 0008 	add.w	r0, r4, #8
     eb8:	4b07      	ldr	r3, [pc, #28]	; (ed8 <usart_sync_init+0x3c>)
     eba:	4798      	blx	r3
	if (init_status) {
     ebc:	4603      	mov	r3, r0
     ebe:	b918      	cbnz	r0, ec8 <usart_sync_init+0x2c>
	descr->io.read  = usart_sync_read;
     ec0:	4a06      	ldr	r2, [pc, #24]	; (edc <usart_sync_init+0x40>)
     ec2:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_sync_write;
     ec4:	4a06      	ldr	r2, [pc, #24]	; (ee0 <usart_sync_init+0x44>)
     ec6:	6022      	str	r2, [r4, #0]
}
     ec8:	4618      	mov	r0, r3
     eca:	bd38      	pop	{r3, r4, r5, pc}
     ecc:	2000      	movs	r0, #0
     ece:	e7ec      	b.n	eaa <usart_sync_init+0xe>
     ed0:	000021ac 	.word	0x000021ac
     ed4:	00000f11 	.word	0x00000f11
     ed8:	000017e9 	.word	0x000017e9
     edc:	00000e3d 	.word	0x00000e3d
     ee0:	00000dc9 	.word	0x00000dc9

00000ee4 <usart_sync_enable>:
{
     ee4:	b510      	push	{r4, lr}
	ASSERT(descr);
     ee6:	4604      	mov	r4, r0
     ee8:	2253      	movs	r2, #83	; 0x53
     eea:	4906      	ldr	r1, [pc, #24]	; (f04 <usart_sync_enable+0x20>)
     eec:	3000      	adds	r0, #0
     eee:	bf18      	it	ne
     ef0:	2001      	movne	r0, #1
     ef2:	4b05      	ldr	r3, [pc, #20]	; (f08 <usart_sync_enable+0x24>)
     ef4:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
     ef6:	f104 0008 	add.w	r0, r4, #8
     efa:	4b04      	ldr	r3, [pc, #16]	; (f0c <usart_sync_enable+0x28>)
     efc:	4798      	blx	r3
}
     efe:	2000      	movs	r0, #0
     f00:	bd10      	pop	{r4, pc}
     f02:	bf00      	nop
     f04:	000021ac 	.word	0x000021ac
     f08:	00000f11 	.word	0x00000f11
     f0c:	00001815 	.word	0x00001815

00000f10 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     f10:	b900      	cbnz	r0, f14 <assert+0x4>
		__asm("BKPT #0");
     f12:	be00      	bkpt	0x0000
     f14:	4770      	bx	lr

00000f16 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
     f16:	6803      	ldr	r3, [r0, #0]
     f18:	b14b      	cbz	r3, f2e <is_list_element+0x18>
		if (it == element) {
     f1a:	428b      	cmp	r3, r1
     f1c:	d009      	beq.n	f32 <is_list_element+0x1c>
	for (it = list->head; it; it = it->next) {
     f1e:	681b      	ldr	r3, [r3, #0]
     f20:	b11b      	cbz	r3, f2a <is_list_element+0x14>
		if (it == element) {
     f22:	4299      	cmp	r1, r3
     f24:	d1fb      	bne.n	f1e <is_list_element+0x8>
			return true;
     f26:	2001      	movs	r0, #1
		}
	}

	return false;
}
     f28:	4770      	bx	lr
	return false;
     f2a:	2000      	movs	r0, #0
     f2c:	4770      	bx	lr
     f2e:	2000      	movs	r0, #0
     f30:	4770      	bx	lr
			return true;
     f32:	2001      	movs	r0, #1
     f34:	4770      	bx	lr
	...

00000f38 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
     f38:	b538      	push	{r3, r4, r5, lr}
     f3a:	4604      	mov	r4, r0
     f3c:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
     f3e:	4b06      	ldr	r3, [pc, #24]	; (f58 <list_insert_as_head+0x20>)
     f40:	4798      	blx	r3
     f42:	f080 0001 	eor.w	r0, r0, #1
     f46:	2239      	movs	r2, #57	; 0x39
     f48:	4904      	ldr	r1, [pc, #16]	; (f5c <list_insert_as_head+0x24>)
     f4a:	b2c0      	uxtb	r0, r0
     f4c:	4b04      	ldr	r3, [pc, #16]	; (f60 <list_insert_as_head+0x28>)
     f4e:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
     f50:	6823      	ldr	r3, [r4, #0]
     f52:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
     f54:	6025      	str	r5, [r4, #0]
     f56:	bd38      	pop	{r3, r4, r5, pc}
     f58:	00000f17 	.word	0x00000f17
     f5c:	000021c8 	.word	0x000021c8
     f60:	00000f11 	.word	0x00000f11

00000f64 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
     f64:	6803      	ldr	r3, [r0, #0]
     f66:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
     f68:	6001      	str	r1, [r0, #0]
     f6a:	4770      	bx	lr

00000f6c <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
     f6c:	6803      	ldr	r3, [r0, #0]
     f6e:	b10b      	cbz	r3, f74 <list_remove_head+0x8>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
     f70:	681a      	ldr	r2, [r3, #0]
     f72:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
     f74:	4618      	mov	r0, r3
     f76:	4770      	bx	lr

00000f78 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
     f78:	b570      	push	{r4, r5, r6, lr}
     f7a:	460e      	mov	r6, r1
     f7c:	4615      	mov	r5, r2
	ASSERT(rb && buf && size);
     f7e:	4604      	mov	r4, r0
     f80:	b178      	cbz	r0, fa2 <ringbuffer_init+0x2a>
     f82:	b181      	cbz	r1, fa6 <ringbuffer_init+0x2e>
     f84:	b1a2      	cbz	r2, fb0 <ringbuffer_init+0x38>
     f86:	2001      	movs	r0, #1
     f88:	2228      	movs	r2, #40	; 0x28
     f8a:	490d      	ldr	r1, [pc, #52]	; (fc0 <ringbuffer_init+0x48>)
     f8c:	4b0d      	ldr	r3, [pc, #52]	; (fc4 <ringbuffer_init+0x4c>)
     f8e:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
     f90:	1e6b      	subs	r3, r5, #1
     f92:	421d      	tst	r5, r3
     f94:	d109      	bne.n	faa <ringbuffer_init+0x32>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
     f96:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
     f98:	2000      	movs	r0, #0
     f9a:	60a0      	str	r0, [r4, #8]
	rb->write_index = rb->read_index;
     f9c:	60e0      	str	r0, [r4, #12]
	rb->buf         = (uint8_t *)buf;
     f9e:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
     fa0:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
     fa2:	2000      	movs	r0, #0
     fa4:	e7f0      	b.n	f88 <ringbuffer_init+0x10>
     fa6:	2000      	movs	r0, #0
     fa8:	e7ee      	b.n	f88 <ringbuffer_init+0x10>
		return ERR_INVALID_ARG;
     faa:	f06f 000c 	mvn.w	r0, #12
     fae:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
     fb0:	2228      	movs	r2, #40	; 0x28
     fb2:	4903      	ldr	r1, [pc, #12]	; (fc0 <ringbuffer_init+0x48>)
     fb4:	2000      	movs	r0, #0
     fb6:	4b03      	ldr	r3, [pc, #12]	; (fc4 <ringbuffer_init+0x4c>)
     fb8:	4798      	blx	r3
	if ((size & (size - 1)) != 0) {
     fba:	1e6b      	subs	r3, r5, #1
     fbc:	e7eb      	b.n	f96 <ringbuffer_init+0x1e>
     fbe:	bf00      	nop
     fc0:	000021e8 	.word	0x000021e8
     fc4:	00000f11 	.word	0x00000f11

00000fc8 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
     fc8:	b538      	push	{r3, r4, r5, lr}
     fca:	460d      	mov	r5, r1
	ASSERT(rb);
     fcc:	4604      	mov	r4, r0
     fce:	2251      	movs	r2, #81	; 0x51
     fd0:	490b      	ldr	r1, [pc, #44]	; (1000 <ringbuffer_put+0x38>)
     fd2:	3000      	adds	r0, #0
     fd4:	bf18      	it	ne
     fd6:	2001      	movne	r0, #1
     fd8:	4b0a      	ldr	r3, [pc, #40]	; (1004 <ringbuffer_put+0x3c>)
     fda:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
     fdc:	68e3      	ldr	r3, [r4, #12]
     fde:	6862      	ldr	r2, [r4, #4]
     fe0:	4013      	ands	r3, r2
     fe2:	6822      	ldr	r2, [r4, #0]
     fe4:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
     fe6:	68e3      	ldr	r3, [r4, #12]
     fe8:	6861      	ldr	r1, [r4, #4]
     fea:	68a2      	ldr	r2, [r4, #8]
     fec:	1a9a      	subs	r2, r3, r2
     fee:	428a      	cmp	r2, r1
		rb->read_index = rb->write_index - rb->size;
     ff0:	bf84      	itt	hi
     ff2:	1a59      	subhi	r1, r3, r1
     ff4:	60a1      	strhi	r1, [r4, #8]
	}

	rb->write_index++;
     ff6:	3301      	adds	r3, #1
     ff8:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
     ffa:	2000      	movs	r0, #0
     ffc:	bd38      	pop	{r3, r4, r5, pc}
     ffe:	bf00      	nop
    1000:	000021e8 	.word	0x000021e8
    1004:	00000f11 	.word	0x00000f11

00001008 <_adc_get_irq_num>:
/**
 * \brief Retrieve ordinal number of the given adc hardware instance
 */
static uint8_t _adc_get_hardware_index(const void *const hw)
{
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    1008:	6940      	ldr	r0, [r0, #20]
    100a:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    100e:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
    1012:	0a80      	lsrs	r0, r0, #10
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _adc_get_irq_num(const struct _adc_async_device *const device)
{

	return ADC0_0_IRQn + (_adc_get_hardware_index(device->hw) << 1);
    1014:	0040      	lsls	r0, r0, #1
    1016:	3076      	adds	r0, #118	; 0x76
}
    1018:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    101c:	4770      	bx	lr
	...

00001020 <_adc_init>:
	};
}

static inline bool hri_adc_is_syncing(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
	return ((Adc *)hw)->SYNCBUSY.reg & reg;
    1020:	6b03      	ldr	r3, [r0, #48]	; 0x30
 * \param[in] i The number of hardware instance
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{

	if (!hri_adc_is_syncing(hw, ADC_SYNCBUSY_SWRST)) {
    1022:	f013 0f01 	tst.w	r3, #1
    1026:	d11b      	bne.n	1060 <_adc_init+0x40>
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1028:	6b03      	ldr	r3, [r0, #48]	; 0x30
    102a:	f013 0f03 	tst.w	r3, #3
    102e:	d1fb      	bne.n	1028 <_adc_init+0x8>

static inline hri_adc_ctrla_reg_t hri_adc_get_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t mask)
{
	uint16_t tmp;
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	tmp = ((Adc *)hw)->CTRLA.reg;
    1030:	8803      	ldrh	r3, [r0, #0]
		if (hri_adc_get_CTRLA_reg(hw, ADC_CTRLA_ENABLE)) {
    1032:	f013 0f02 	tst.w	r3, #2
    1036:	d00d      	beq.n	1054 <_adc_init+0x34>
	((Adc *)hw)->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
    1038:	8803      	ldrh	r3, [r0, #0]
    103a:	f023 0302 	bic.w	r3, r3, #2
    103e:	041b      	lsls	r3, r3, #16
    1040:	0c1b      	lsrs	r3, r3, #16
    1042:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1044:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1046:	f013 0f03 	tst.w	r3, #3
    104a:	d1fb      	bne.n	1044 <_adc_init+0x24>
    104c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    104e:	f013 0f02 	tst.w	r3, #2
    1052:	d1fb      	bne.n	104c <_adc_init+0x2c>
}

static inline void hri_adc_write_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg = data;
    1054:	2301      	movs	r3, #1
    1056:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1058:	6b03      	ldr	r3, [r0, #48]	; 0x30
    105a:	f013 0f03 	tst.w	r3, #3
    105e:	d1fb      	bne.n	1058 <_adc_init+0x38>
    1060:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1062:	f013 0f01 	tst.w	r3, #1
    1066:	d1fb      	bne.n	1060 <_adc_init+0x40>
		}
		hri_adc_write_CTRLA_reg(hw, ADC_CTRLA_SWRST);
	}
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);

	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
    1068:	2316      	movs	r3, #22
    106a:	4a37      	ldr	r2, [pc, #220]	; (1148 <_adc_init+0x128>)
    106c:	fb03 2301 	mla	r3, r3, r1, r2
    1070:	889b      	ldrh	r3, [r3, #4]
}

static inline void hri_adc_write_CTRLB_reg(const void *const hw, hri_adc_ctrlb_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLB.reg = data;
    1072:	80c3      	strh	r3, [r0, #6]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1074:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1076:	f3c3 030b 	ubfx	r3, r3, #0, #12
    107a:	2b00      	cmp	r3, #0
    107c:	d1fa      	bne.n	1074 <_adc_init+0x54>
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
    107e:	2316      	movs	r3, #22
    1080:	4a31      	ldr	r2, [pc, #196]	; (1148 <_adc_init+0x128>)
    1082:	fb03 2301 	mla	r3, r3, r1, r2
    1086:	799b      	ldrb	r3, [r3, #6]
}

static inline void hri_adc_write_REFCTRL_reg(const void *const hw, hri_adc_refctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->REFCTRL.reg = data;
    1088:	7203      	strb	r3, [r0, #8]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    108a:	6b03      	ldr	r3, [r0, #48]	; 0x30
    108c:	f3c3 030b 	ubfx	r3, r3, #0, #12
    1090:	2b00      	cmp	r3, #0
    1092:	d1fa      	bne.n	108a <_adc_init+0x6a>
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
    1094:	2316      	movs	r3, #22
    1096:	4a2c      	ldr	r2, [pc, #176]	; (1148 <_adc_init+0x128>)
    1098:	fb03 2301 	mla	r3, r3, r1, r2
    109c:	79da      	ldrb	r2, [r3, #7]
	((Adc *)hw)->EVCTRL.reg = data;
    109e:	7082      	strb	r2, [r0, #2]
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
    10a0:	891b      	ldrh	r3, [r3, #8]
	((Adc *)hw)->INPUTCTRL.reg = data;
    10a2:	8083      	strh	r3, [r0, #4]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    10a4:	6b03      	ldr	r3, [r0, #48]	; 0x30
    10a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
    10aa:	2b00      	cmp	r3, #0
    10ac:	d1fa      	bne.n	10a4 <_adc_init+0x84>
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
    10ae:	2316      	movs	r3, #22
    10b0:	4a25      	ldr	r2, [pc, #148]	; (1148 <_adc_init+0x128>)
    10b2:	fb03 2301 	mla	r3, r3, r1, r2
    10b6:	7a9b      	ldrb	r3, [r3, #10]
}

static inline void hri_adc_write_AVGCTRL_reg(const void *const hw, hri_adc_avgctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->AVGCTRL.reg = data;
    10b8:	7283      	strb	r3, [r0, #10]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    10ba:	6b03      	ldr	r3, [r0, #48]	; 0x30
    10bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
    10c0:	2b00      	cmp	r3, #0
    10c2:	d1fa      	bne.n	10ba <_adc_init+0x9a>
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
    10c4:	2316      	movs	r3, #22
    10c6:	4a20      	ldr	r2, [pc, #128]	; (1148 <_adc_init+0x128>)
    10c8:	fb03 2301 	mla	r3, r3, r1, r2
    10cc:	7adb      	ldrb	r3, [r3, #11]
}

static inline void hri_adc_write_SAMPCTRL_reg(const void *const hw, hri_adc_sampctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SAMPCTRL.reg = data;
    10ce:	72c3      	strb	r3, [r0, #11]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    10d0:	6b03      	ldr	r3, [r0, #48]	; 0x30
    10d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
    10d6:	2b00      	cmp	r3, #0
    10d8:	d1fa      	bne.n	10d0 <_adc_init+0xb0>
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
    10da:	2316      	movs	r3, #22
    10dc:	4a1a      	ldr	r2, [pc, #104]	; (1148 <_adc_init+0x128>)
    10de:	fb03 2301 	mla	r3, r3, r1, r2
    10e2:	899b      	ldrh	r3, [r3, #12]
}

static inline void hri_adc_write_WINLT_reg(const void *const hw, hri_adc_winlt_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINLT.reg = data;
    10e4:	8183      	strh	r3, [r0, #12]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    10e6:	6b03      	ldr	r3, [r0, #48]	; 0x30
    10e8:	f013 0f80 	tst.w	r3, #128	; 0x80
    10ec:	d1fb      	bne.n	10e6 <_adc_init+0xc6>
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
    10ee:	2316      	movs	r3, #22
    10f0:	4a15      	ldr	r2, [pc, #84]	; (1148 <_adc_init+0x128>)
    10f2:	fb03 2301 	mla	r3, r3, r1, r2
    10f6:	89db      	ldrh	r3, [r3, #14]
}

static inline void hri_adc_write_WINUT_reg(const void *const hw, hri_adc_winut_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINUT.reg = data;
    10f8:	81c3      	strh	r3, [r0, #14]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    10fa:	6b03      	ldr	r3, [r0, #48]	; 0x30
    10fc:	f413 7f80 	tst.w	r3, #256	; 0x100
    1100:	d1fb      	bne.n	10fa <_adc_init+0xda>
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
    1102:	2316      	movs	r3, #22
    1104:	4a10      	ldr	r2, [pc, #64]	; (1148 <_adc_init+0x128>)
    1106:	fb03 2301 	mla	r3, r3, r1, r2
    110a:	8a1b      	ldrh	r3, [r3, #16]
}

static inline void hri_adc_write_GAINCORR_reg(const void *const hw, hri_adc_gaincorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->GAINCORR.reg = data;
    110c:	8203      	strh	r3, [r0, #16]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    110e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1110:	f413 7f00 	tst.w	r3, #512	; 0x200
    1114:	d1fb      	bne.n	110e <_adc_init+0xee>
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
    1116:	2316      	movs	r3, #22
    1118:	4a0b      	ldr	r2, [pc, #44]	; (1148 <_adc_init+0x128>)
    111a:	fb03 2301 	mla	r3, r3, r1, r2
    111e:	8a5b      	ldrh	r3, [r3, #18]
}

static inline void hri_adc_write_OFFSETCORR_reg(const void *const hw, hri_adc_offsetcorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->OFFSETCORR.reg = data;
    1120:	8243      	strh	r3, [r0, #18]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1122:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1124:	f413 6f80 	tst.w	r3, #1024	; 0x400
    1128:	d1fb      	bne.n	1122 <_adc_init+0x102>
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
    112a:	2216      	movs	r2, #22
    112c:	4b06      	ldr	r3, [pc, #24]	; (1148 <_adc_init+0x128>)
    112e:	fb02 3101 	mla	r1, r2, r1, r3
    1132:	7d0b      	ldrb	r3, [r1, #20]
	((Adc *)hw)->DBGCTRL.reg = data;
    1134:	70c3      	strb	r3, [r0, #3]
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
    1136:	884b      	ldrh	r3, [r1, #2]
	((Adc *)hw)->CTRLA.reg = data;
    1138:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    113a:	6b03      	ldr	r3, [r0, #48]	; 0x30
    113c:	f013 0f03 	tst.w	r3, #3
    1140:	d1fb      	bne.n	113a <_adc_init+0x11a>

	return ERR_NONE;
}
    1142:	2000      	movs	r0, #0
    1144:	4770      	bx	lr
    1146:	bf00      	nop
    1148:	0000220c 	.word	0x0000220c

0000114c <_adc_interrupt_handler>:
 * \internal ADC interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _adc_interrupt_handler(struct _adc_async_device *device)
{
    114c:	b508      	push	{r3, lr}
	void *const hw      = device->hw;
    114e:	6942      	ldr	r2, [r0, #20]
	return ((Adc *)hw)->INTFLAG.reg;
    1150:	f892 102e 	ldrb.w	r1, [r2, #46]	; 0x2e
	return ((Adc *)hw)->INTENSET.reg;
    1154:	f892 302d 	ldrb.w	r3, [r2, #45]	; 0x2d
	uint8_t     intflag = hri_adc_read_INTFLAG_reg(hw);
	intflag &= hri_adc_read_INTEN_reg(hw);
    1158:	400b      	ands	r3, r1
	if (intflag & ADC_INTFLAG_RESRDY) {
    115a:	f013 0f01 	tst.w	r3, #1
    115e:	d106      	bne.n	116e <_adc_interrupt_handler+0x22>
		hri_adc_clear_interrupt_RESRDY_bit(hw);
		device->adc_async_ch_cb.convert_done(device, 0, hri_adc_read_RESULT_reg(hw));
	} else if (intflag & ADC_INTFLAG_OVERRUN) {
    1160:	f013 0f02 	tst.w	r3, #2
    1164:	d10d      	bne.n	1182 <_adc_interrupt_handler+0x36>
		hri_adc_clear_interrupt_OVERRUN_bit(hw);
		device->adc_async_cb.error_cb(device, 0);
	} else if (intflag & ADC_INTFLAG_WINMON) {
    1166:	f013 0f04 	tst.w	r3, #4
    116a:	d111      	bne.n	1190 <_adc_interrupt_handler+0x44>
    116c:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    116e:	2301      	movs	r3, #1
    1170:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
	return ((Adc *)hw)->RESULT.reg;
    1174:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
		device->adc_async_ch_cb.convert_done(device, 0, hri_adc_read_RESULT_reg(hw));
    1178:	6883      	ldr	r3, [r0, #8]
    117a:	b292      	uxth	r2, r2
    117c:	2100      	movs	r1, #0
    117e:	4798      	blx	r3
    1180:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    1182:	2302      	movs	r3, #2
    1184:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
		device->adc_async_cb.error_cb(device, 0);
    1188:	6843      	ldr	r3, [r0, #4]
    118a:	2100      	movs	r1, #0
    118c:	4798      	blx	r3
    118e:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_WINMON;
    1190:	2304      	movs	r3, #4
    1192:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
		hri_adc_clear_interrupt_WINMON_bit(hw);
		device->adc_async_cb.window_cb(device, 0);
    1196:	6803      	ldr	r3, [r0, #0]
    1198:	2100      	movs	r1, #0
    119a:	4798      	blx	r3
	}
}
    119c:	e7e6      	b.n	116c <_adc_interrupt_handler+0x20>
	...

000011a0 <_adc_get_regs>:
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    11a0:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    11a4:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
		if (_adcs[i].number == n) {
    11a8:	f3c0 2087 	ubfx	r0, r0, #10, #8
    11ac:	2801      	cmp	r0, #1
    11ae:	d007      	beq.n	11c0 <_adc_get_regs+0x20>
{
    11b0:	b508      	push	{r3, lr}
	ASSERT(false);
    11b2:	228a      	movs	r2, #138	; 0x8a
    11b4:	4903      	ldr	r1, [pc, #12]	; (11c4 <_adc_get_regs+0x24>)
    11b6:	2000      	movs	r0, #0
    11b8:	4b03      	ldr	r3, [pc, #12]	; (11c8 <_adc_get_regs+0x28>)
    11ba:	4798      	blx	r3
}
    11bc:	2000      	movs	r0, #0
    11be:	bd08      	pop	{r3, pc}
    11c0:	2000      	movs	r0, #0
    11c2:	4770      	bx	lr
    11c4:	00002224 	.word	0x00002224
    11c8:	00000f11 	.word	0x00000f11

000011cc <_adc_async_init>:
{
    11cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    11d0:	460c      	mov	r4, r1
	ASSERT(device);
    11d2:	4605      	mov	r5, r0
    11d4:	22e1      	movs	r2, #225	; 0xe1
    11d6:	4938      	ldr	r1, [pc, #224]	; (12b8 <_adc_async_init+0xec>)
    11d8:	3000      	adds	r0, #0
    11da:	bf18      	it	ne
    11dc:	2001      	movne	r0, #1
    11de:	4b37      	ldr	r3, [pc, #220]	; (12bc <_adc_async_init+0xf0>)
    11e0:	4798      	blx	r3
	init_status = _adc_init(hw, _adc_get_regs((uint32_t)hw));
    11e2:	4620      	mov	r0, r4
    11e4:	4b36      	ldr	r3, [pc, #216]	; (12c0 <_adc_async_init+0xf4>)
    11e6:	4798      	blx	r3
    11e8:	4601      	mov	r1, r0
    11ea:	4620      	mov	r0, r4
    11ec:	4b35      	ldr	r3, [pc, #212]	; (12c4 <_adc_async_init+0xf8>)
    11ee:	4798      	blx	r3
	if (init_status) {
    11f0:	4606      	mov	r6, r0
    11f2:	b110      	cbz	r0, 11fa <_adc_async_init+0x2e>
}
    11f4:	4630      	mov	r0, r6
    11f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	device->hw = hw;
    11fa:	616c      	str	r4, [r5, #20]
	if (hw == ADC1) {
    11fc:	4b32      	ldr	r3, [pc, #200]	; (12c8 <_adc_async_init+0xfc>)
    11fe:	429c      	cmp	r4, r3
		_adc1_dev = dev;
    1200:	bf04      	itt	eq
    1202:	4b32      	ldreq	r3, [pc, #200]	; (12cc <_adc_async_init+0x100>)
    1204:	601d      	streq	r5, [r3, #0]
	NVIC_DisableIRQ(_adc_get_irq_num(device) + 0);
    1206:	4628      	mov	r0, r5
    1208:	4f31      	ldr	r7, [pc, #196]	; (12d0 <_adc_async_init+0x104>)
    120a:	47b8      	blx	r7
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    120c:	0943      	lsrs	r3, r0, #5
    120e:	f000 001f 	and.w	r0, r0, #31
    1212:	2401      	movs	r4, #1
    1214:	fa04 f000 	lsl.w	r0, r4, r0
    1218:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 12d4 <_adc_async_init+0x108>
    121c:	3320      	adds	r3, #32
    121e:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    1222:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1226:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_adc_get_irq_num(device) + 0);
    122a:	4628      	mov	r0, r5
    122c:	47b8      	blx	r7
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    122e:	0943      	lsrs	r3, r0, #5
    1230:	f000 001f 	and.w	r0, r0, #31
    1234:	fa04 f000 	lsl.w	r0, r4, r0
    1238:	3360      	adds	r3, #96	; 0x60
    123a:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
	NVIC_EnableIRQ(_adc_get_irq_num(device) + 0);
    123e:	4628      	mov	r0, r5
    1240:	47b8      	blx	r7
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1242:	0943      	lsrs	r3, r0, #5
    1244:	f000 001f 	and.w	r0, r0, #31
    1248:	4084      	lsls	r4, r0
    124a:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
	NVIC_DisableIRQ(_adc_get_irq_num(device) + 1);
    124e:	4628      	mov	r0, r5
    1250:	47b8      	blx	r7
    1252:	3001      	adds	r0, #1
    1254:	b280      	uxth	r0, r0
    1256:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    1258:	2b00      	cmp	r3, #0
    125a:	dbcb      	blt.n	11f4 <_adc_async_init+0x28>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    125c:	095b      	lsrs	r3, r3, #5
    125e:	f000 001f 	and.w	r0, r0, #31
    1262:	2201      	movs	r2, #1
    1264:	fa02 f000 	lsl.w	r0, r2, r0
    1268:	3320      	adds	r3, #32
    126a:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    126e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1272:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_adc_get_irq_num(device) + 1);
    1276:	4628      	mov	r0, r5
    1278:	47b8      	blx	r7
    127a:	3001      	adds	r0, #1
    127c:	b280      	uxth	r0, r0
    127e:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    1280:	2b00      	cmp	r3, #0
    1282:	dbb7      	blt.n	11f4 <_adc_async_init+0x28>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1284:	095b      	lsrs	r3, r3, #5
    1286:	f000 001f 	and.w	r0, r0, #31
    128a:	2201      	movs	r2, #1
    128c:	fa02 f000 	lsl.w	r0, r2, r0
    1290:	3360      	adds	r3, #96	; 0x60
    1292:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
	NVIC_EnableIRQ(_adc_get_irq_num(device) + 1);
    1296:	4628      	mov	r0, r5
    1298:	47b8      	blx	r7
    129a:	3001      	adds	r0, #1
    129c:	b280      	uxth	r0, r0
    129e:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    12a0:	2b00      	cmp	r3, #0
    12a2:	dba7      	blt.n	11f4 <_adc_async_init+0x28>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    12a4:	095b      	lsrs	r3, r3, #5
    12a6:	f000 001f 	and.w	r0, r0, #31
    12aa:	2201      	movs	r2, #1
    12ac:	fa02 f000 	lsl.w	r0, r2, r0
    12b0:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
    12b4:	e79e      	b.n	11f4 <_adc_async_init+0x28>
    12b6:	bf00      	nop
    12b8:	00002224 	.word	0x00002224
    12bc:	00000f11 	.word	0x00000f11
    12c0:	000011a1 	.word	0x000011a1
    12c4:	00001021 	.word	0x00001021
    12c8:	43002000 	.word	0x43002000
    12cc:	20000060 	.word	0x20000060
    12d0:	00001009 	.word	0x00001009
    12d4:	e000e100 	.word	0xe000e100

000012d8 <_adc_async_get_data_size>:
	return hri_adc_read_CTRLB_RESSEL_bf(device->hw) == ADC_CTRLB_RESSEL_8BIT_Val ? 1 : 2;
    12d8:	6943      	ldr	r3, [r0, #20]
	tmp = ((Adc *)hw)->CTRLB.reg;
    12da:	88db      	ldrh	r3, [r3, #6]
    12dc:	f3c3 03c1 	ubfx	r3, r3, #3, #2
    12e0:	2b03      	cmp	r3, #3
}
    12e2:	bf0c      	ite	eq
    12e4:	2001      	moveq	r0, #1
    12e6:	2002      	movne	r0, #2
    12e8:	4770      	bx	lr
	...

000012ec <ADC1_0_Handler>:

/**
 * \brief DMAC interrupt handler
 */
void ADC1_0_Handler(void)
{
    12ec:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc1_dev);
    12ee:	4b02      	ldr	r3, [pc, #8]	; (12f8 <ADC1_0_Handler+0xc>)
    12f0:	6818      	ldr	r0, [r3, #0]
    12f2:	4b02      	ldr	r3, [pc, #8]	; (12fc <ADC1_0_Handler+0x10>)
    12f4:	4798      	blx	r3
    12f6:	bd08      	pop	{r3, pc}
    12f8:	20000060 	.word	0x20000060
    12fc:	0000114d 	.word	0x0000114d

00001300 <ADC1_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void ADC1_1_Handler(void)
{
    1300:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc1_dev);
    1302:	4b02      	ldr	r3, [pc, #8]	; (130c <ADC1_1_Handler+0xc>)
    1304:	6818      	ldr	r0, [r3, #0]
    1306:	4b02      	ldr	r3, [pc, #8]	; (1310 <ADC1_1_Handler+0x10>)
    1308:	4798      	blx	r3
    130a:	bd08      	pop	{r3, pc}
    130c:	20000060 	.word	0x20000060
    1310:	0000114d 	.word	0x0000114d

00001314 <_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1314:	0943      	lsrs	r3, r0, #5
    1316:	f000 001f 	and.w	r0, r0, #31
    131a:	2201      	movs	r2, #1
    131c:	fa02 f000 	lsl.w	r0, r2, r0
    1320:	3340      	adds	r3, #64	; 0x40
    1322:	4a02      	ldr	r2, [pc, #8]	; (132c <_irq_set+0x18>)
    1324:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    1328:	4770      	bx	lr
    132a:	bf00      	nop
    132c:	e000e100 	.word	0xe000e100

00001330 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    1330:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    1332:	4a0d      	ldr	r2, [pc, #52]	; (1368 <_init_chip+0x38>)
    1334:	8813      	ldrh	r3, [r2, #0]
    1336:	b29b      	uxth	r3, r3
    1338:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    133a:	4b0c      	ldr	r3, [pc, #48]	; (136c <_init_chip+0x3c>)
    133c:	4798      	blx	r3
	_oscctrl_init_sources();
    133e:	4b0c      	ldr	r3, [pc, #48]	; (1370 <_init_chip+0x40>)
    1340:	4798      	blx	r3
	_mclk_init();
    1342:	4b0c      	ldr	r3, [pc, #48]	; (1374 <_init_chip+0x44>)
    1344:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    1346:	2002      	movs	r0, #2
    1348:	4c0b      	ldr	r4, [pc, #44]	; (1378 <_init_chip+0x48>)
    134a:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
    134c:	4b0b      	ldr	r3, [pc, #44]	; (137c <_init_chip+0x4c>)
    134e:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    1350:	f640 70fd 	movw	r0, #4093	; 0xffd
    1354:	47a0      	blx	r4
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_DMAC;
    1356:	4a0a      	ldr	r2, [pc, #40]	; (1380 <_init_chip+0x50>)
    1358:	6913      	ldr	r3, [r2, #16]
    135a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    135e:	6113      	str	r3, [r2, #16]

#if CONF_DMAC_ENABLE
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
    1360:	4b08      	ldr	r3, [pc, #32]	; (1384 <_init_chip+0x54>)
    1362:	4798      	blx	r3
    1364:	bd10      	pop	{r4, pc}
    1366:	bf00      	nop
    1368:	41004000 	.word	0x41004000
    136c:	00001561 	.word	0x00001561
    1370:	00001579 	.word	0x00001579
    1374:	00001555 	.word	0x00001555
    1378:	00001515 	.word	0x00001515
    137c:	0000157d 	.word	0x0000157d
    1380:	40000800 	.word	0x40000800
    1384:	000013fd 	.word	0x000013fd

00001388 <_dmac_handler>:
}
/**
 * \internal DMAC interrupt handler
 */
static void _dmac_handler(void)
{
    1388:	b508      	push	{r3, lr}
}

static inline hri_dmac_intpend_reg_t hri_dmac_get_INTPEND_reg(const void *const hw, hri_dmac_intpend_reg_t mask)
{
	uint16_t tmp;
	tmp = ((Dmac *)hw)->INTPEND.reg;
    138a:	4a1a      	ldr	r2, [pc, #104]	; (13f4 <_dmac_handler+0x6c>)
    138c:	8c13      	ldrh	r3, [r2, #32]
	uint8_t               channel      = hri_dmac_get_INTPEND_reg(DMAC, DMAC_INTPEND_ID_Msk);
    138e:	f003 031f 	and.w	r3, r3, #31
	struct _dma_resource *tmp_resource = &_resources[channel];
    1392:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    1396:	4818      	ldr	r0, [pc, #96]	; (13f8 <_dmac_handler+0x70>)
    1398:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return ((DmacChannel *)hw)->CHSTATUS.reg;
}

static inline bool hri_dmac_get_CHINTFLAG_TERR_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TERR) >> DMAC_CHINTFLAG_TERR_Pos;
    139c:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    13a0:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e

	if (hri_dmac_get_CHINTFLAG_TERR_bit(DMAC, channel)) {
    13a4:	f012 0f01 	tst.w	r2, #1
    13a8:	d10a      	bne.n	13c0 <_dmac_handler+0x38>
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
}

static inline bool hri_dmac_get_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TCMPL) >> DMAC_CHINTFLAG_TCMPL_Pos;
    13aa:	011a      	lsls	r2, r3, #4
    13ac:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    13b0:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    13b4:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TERR_bit(DMAC, channel);
		tmp_resource->dma_cb.error(tmp_resource);
	} else if (hri_dmac_get_CHINTFLAG_TCMPL_bit(DMAC, channel)) {
    13b8:	f012 0f02 	tst.w	r2, #2
    13bc:	d10b      	bne.n	13d6 <_dmac_handler+0x4e>
    13be:	bd08      	pop	{r3, pc}
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
    13c0:	011a      	lsls	r2, r3, #4
    13c2:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    13c6:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    13ca:	2101      	movs	r1, #1
    13cc:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		tmp_resource->dma_cb.error(tmp_resource);
    13d0:	6843      	ldr	r3, [r0, #4]
    13d2:	4798      	blx	r3
    13d4:	bd08      	pop	{r3, pc}
}

static inline void hri_dmac_clear_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL;
    13d6:	011a      	lsls	r2, r3, #4
    13d8:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    13dc:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    13e0:	2102      	movs	r1, #2
    13e2:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TCMPL_bit(DMAC, channel);
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    13e6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    13ea:	4a03      	ldr	r2, [pc, #12]	; (13f8 <_dmac_handler+0x70>)
    13ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    13f0:	4798      	blx	r3
	}
}
    13f2:	e7e4      	b.n	13be <_dmac_handler+0x36>
    13f4:	4100a000 	.word	0x4100a000
    13f8:	20000064 	.word	0x20000064

000013fc <_dma_init>:
{
    13fc:	b470      	push	{r4, r5, r6}
	((Dmac *)hw)->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
    13fe:	4a31      	ldr	r2, [pc, #196]	; (14c4 <_dma_init+0xc8>)
    1400:	8813      	ldrh	r3, [r2, #0]
    1402:	f023 0302 	bic.w	r3, r3, #2
    1406:	041b      	lsls	r3, r3, #16
    1408:	0c1b      	lsrs	r3, r3, #16
    140a:	8013      	strh	r3, [r2, #0]
	((Dmac *)hw)->CRCCTRL.reg &= ~mask;
    140c:	8853      	ldrh	r3, [r2, #2]
    140e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
    1412:	041b      	lsls	r3, r3, #16
    1414:	0c1b      	lsrs	r3, r3, #16
    1416:	8053      	strh	r3, [r2, #2]
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_SWRST;
    1418:	8813      	ldrh	r3, [r2, #0]
    141a:	b29b      	uxth	r3, r3
    141c:	f043 0301 	orr.w	r3, r3, #1
    1420:	8013      	strh	r3, [r2, #0]
	tmp = ((Dmac *)hw)->CTRL.reg;
    1422:	8813      	ldrh	r3, [r2, #0]
	while (hri_dmac_get_CTRL_SWRST_bit(DMAC))
    1424:	f013 0f01 	tst.w	r3, #1
    1428:	d1fb      	bne.n	1422 <_dma_init+0x26>
	((Dmac *)hw)->CTRL.reg = data;
    142a:	4b26      	ldr	r3, [pc, #152]	; (14c4 <_dma_init+0xc8>)
    142c:	f44f 6270 	mov.w	r2, #3840	; 0xf00
    1430:	801a      	strh	r2, [r3, #0]
	tmp = ((Dmac *)hw)->DBGCTRL.reg;
    1432:	7b5a      	ldrb	r2, [r3, #13]
	tmp &= ~DMAC_DBGCTRL_DBGRUN;
    1434:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Dmac *)hw)->DBGCTRL.reg = tmp;
    1438:	735a      	strb	r2, [r3, #13]
	((Dmac *)hw)->PRICTRL0.reg = data;
    143a:	2100      	movs	r1, #0
    143c:	6159      	str	r1, [r3, #20]
	hri_dmac_write_BASEADDR_reg(DMAC, (uint32_t)_descriptor_section);
    143e:	4a22      	ldr	r2, [pc, #136]	; (14c8 <_dma_init+0xcc>)
	((Dmac *)hw)->BASEADDR.reg = data;
    1440:	635a      	str	r2, [r3, #52]	; 0x34
	hri_dmac_write_WRBADDR_reg(DMAC, (uint32_t)_write_back_section);
    1442:	4a22      	ldr	r2, [pc, #136]	; (14cc <_dma_init+0xd0>)
	((Dmac *)hw)->WRBADDR.reg = data;
    1444:	639a      	str	r2, [r3, #56]	; 0x38
    1446:	4b22      	ldr	r3, [pc, #136]	; (14d0 <_dma_init+0xd4>)
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    1448:	4c1f      	ldr	r4, [pc, #124]	; (14c8 <_dma_init+0xcc>)
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
    144a:	460e      	mov	r6, r1
		hri_dmac_write_CHCTRLA_reg(DMAC, i, _cfgs[i].ctrla);
    144c:	681d      	ldr	r5, [r3, #0]
    144e:	0108      	lsls	r0, r1, #4
    1450:	f100 4282 	add.w	r2, r0, #1090519040	; 0x41000000
    1454:	f502 4220 	add.w	r2, r2, #40960	; 0xa000

static inline void hri_dmac_write_CHCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                              hri_dmac_chctrla_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg = data;
    1458:	6415      	str	r5, [r2, #64]	; 0x40
		hri_dmac_write_CHPRILVL_reg(DMAC, i, _cfgs[i].prilvl);
    145a:	791d      	ldrb	r5, [r3, #4]

static inline void hri_dmac_write_CHPRILVL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chprilvl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHPRILVL.reg = data;
    145c:	f882 5045 	strb.w	r5, [r2, #69]	; 0x45
		hri_dmac_write_CHEVCTRL_reg(DMAC, i, _cfgs[i].evctrl);
    1460:	795d      	ldrb	r5, [r3, #5]

static inline void hri_dmac_write_CHEVCTRL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chevctrl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHEVCTRL.reg = data;
    1462:	f882 5046 	strb.w	r5, [r2, #70]	; 0x46
		hri_dmacdescriptor_write_BTCTRL_reg(&_descriptor_section[i], _cfgs[i].btctrl);
    1466:	88dd      	ldrh	r5, [r3, #6]
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    1468:	1822      	adds	r2, r4, r0
    146a:	5225      	strh	r5, [r4, r0]
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
    146c:	60d6      	str	r6, [r2, #12]
    146e:	3101      	adds	r1, #1
    1470:	3308      	adds	r3, #8
	for (i = 0; i < DMAC_CH_NUM; i++) {
    1472:	2920      	cmp	r1, #32
    1474:	d1ea      	bne.n	144c <_dma_init+0x50>
    1476:	231f      	movs	r3, #31
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1478:	2001      	movs	r0, #1
    147a:	4916      	ldr	r1, [pc, #88]	; (14d4 <_dma_init+0xd8>)
		NVIC_DisableIRQ(DMAC_0_IRQn + i);
    147c:	b29a      	uxth	r2, r3
  if ((int32_t)(IRQn) >= 0)
    147e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    1482:	d00b      	beq.n	149c <_dma_init+0xa0>
    1484:	3301      	adds	r3, #1
	for (i = 0; i < 5; i++) {
    1486:	2b24      	cmp	r3, #36	; 0x24
    1488:	d1f8      	bne.n	147c <_dma_init+0x80>
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_DMAENABLE;
    148a:	4a0e      	ldr	r2, [pc, #56]	; (14c4 <_dma_init+0xc8>)
    148c:	8813      	ldrh	r3, [r2, #0]
    148e:	b29b      	uxth	r3, r3
    1490:	f043 0302 	orr.w	r3, r3, #2
    1494:	8013      	strh	r3, [r2, #0]
}
    1496:	2000      	movs	r0, #0
    1498:	bc70      	pop	{r4, r5, r6}
    149a:	4770      	bx	lr
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    149c:	095c      	lsrs	r4, r3, #5
    149e:	f002 021f 	and.w	r2, r2, #31
    14a2:	fa00 f202 	lsl.w	r2, r0, r2
    14a6:	f104 0520 	add.w	r5, r4, #32
    14aa:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    14ae:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    14b2:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    14b6:	f104 0560 	add.w	r5, r4, #96	; 0x60
    14ba:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    14be:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
    14c2:	e7df      	b.n	1484 <_dma_init+0x88>
    14c4:	4100a000 	.word	0x4100a000
    14c8:	200002e0 	.word	0x200002e0
    14cc:	200004e0 	.word	0x200004e0
    14d0:	0000223c 	.word	0x0000223c
    14d4:	e000e100 	.word	0xe000e100

000014d8 <DMAC_0_Handler>:
/**
 * \brief DMAC interrupt handler
 */
void DMAC_0_Handler(void)
{
    14d8:	b508      	push	{r3, lr}
	_dmac_handler();
    14da:	4b01      	ldr	r3, [pc, #4]	; (14e0 <DMAC_0_Handler+0x8>)
    14dc:	4798      	blx	r3
    14de:	bd08      	pop	{r3, pc}
    14e0:	00001389 	.word	0x00001389

000014e4 <DMAC_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_1_Handler(void)
{
    14e4:	b508      	push	{r3, lr}
	_dmac_handler();
    14e6:	4b01      	ldr	r3, [pc, #4]	; (14ec <DMAC_1_Handler+0x8>)
    14e8:	4798      	blx	r3
    14ea:	bd08      	pop	{r3, pc}
    14ec:	00001389 	.word	0x00001389

000014f0 <DMAC_2_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_2_Handler(void)
{
    14f0:	b508      	push	{r3, lr}
	_dmac_handler();
    14f2:	4b01      	ldr	r3, [pc, #4]	; (14f8 <DMAC_2_Handler+0x8>)
    14f4:	4798      	blx	r3
    14f6:	bd08      	pop	{r3, pc}
    14f8:	00001389 	.word	0x00001389

000014fc <DMAC_3_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_3_Handler(void)
{
    14fc:	b508      	push	{r3, lr}
	_dmac_handler();
    14fe:	4b01      	ldr	r3, [pc, #4]	; (1504 <DMAC_3_Handler+0x8>)
    1500:	4798      	blx	r3
    1502:	bd08      	pop	{r3, pc}
    1504:	00001389 	.word	0x00001389

00001508 <DMAC_4_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_4_Handler(void)
{
    1508:	b508      	push	{r3, lr}
	_dmac_handler();
    150a:	4b01      	ldr	r3, [pc, #4]	; (1510 <DMAC_4_Handler+0x8>)
    150c:	4798      	blx	r3
    150e:	bd08      	pop	{r3, pc}
    1510:	00001389 	.word	0x00001389

00001514 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    1514:	f010 0f01 	tst.w	r0, #1
    1518:	d008      	beq.n	152c <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    151a:	4a0b      	ldr	r2, [pc, #44]	; (1548 <_gclk_init_generators_by_fref+0x34>)
    151c:	4b0b      	ldr	r3, [pc, #44]	; (154c <_gclk_init_generators_by_fref+0x38>)
    151e:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1520:	4619      	mov	r1, r3
    1522:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    1526:	684b      	ldr	r3, [r1, #4]
    1528:	4213      	tst	r3, r2
    152a:	d1fc      	bne.n	1526 <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    152c:	f010 0f02 	tst.w	r0, #2
    1530:	d008      	beq.n	1544 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1532:	4a07      	ldr	r2, [pc, #28]	; (1550 <_gclk_init_generators_by_fref+0x3c>)
    1534:	4b05      	ldr	r3, [pc, #20]	; (154c <_gclk_init_generators_by_fref+0x38>)
    1536:	625a      	str	r2, [r3, #36]	; 0x24
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1538:	4619      	mov	r1, r3
    153a:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    153e:	684b      	ldr	r3, [r1, #4]
    1540:	4213      	tst	r3, r2
    1542:	d1fc      	bne.n	153e <_gclk_init_generators_by_fref+0x2a>
    1544:	4770      	bx	lr
    1546:	bf00      	nop
    1548:	00011106 	.word	0x00011106
    154c:	40001c00 	.word	0x40001c00
    1550:	00010905 	.word	0x00010905

00001554 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    1554:	2201      	movs	r2, #1
    1556:	4b01      	ldr	r3, [pc, #4]	; (155c <_mclk_init+0x8>)
    1558:	715a      	strb	r2, [r3, #5]
    155a:	4770      	bx	lr
    155c:	40000800 	.word	0x40000800

00001560 <_osc32kctrl_init_sources>:
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    1560:	4b04      	ldr	r3, [pc, #16]	; (1574 <_osc32kctrl_init_sources+0x14>)
    1562:	f242 028e 	movw	r2, #8334	; 0x208e
    1566:	829a      	strh	r2, [r3, #20]
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    1568:	2200      	movs	r2, #0
    156a:	759a      	strb	r2, [r3, #22]
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    156c:	75da      	strb	r2, [r3, #23]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    156e:	2201      	movs	r2, #1
    1570:	741a      	strb	r2, [r3, #16]
    1572:	4770      	bx	lr
    1574:	40001400 	.word	0x40001400

00001578 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    1578:	4770      	bx	lr
	...

0000157c <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    157c:	4a36      	ldr	r2, [pc, #216]	; (1658 <_oscctrl_init_referenced_generators+0xdc>)
    157e:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    1580:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    1584:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    1588:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    158a:	4611      	mov	r1, r2
    158c:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    1590:	684b      	ldr	r3, [r1, #4]
    1592:	4213      	tst	r3, r2
    1594:	d1fc      	bne.n	1590 <_oscctrl_init_referenced_generators+0x14>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    1596:	4a30      	ldr	r2, [pc, #192]	; (1658 <_oscctrl_init_referenced_generators+0xdc>)
    1598:	6853      	ldr	r3, [r2, #4]
{
	void *hw = (void *)OSCCTRL;

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    159a:	f013 0f04 	tst.w	r3, #4
    159e:	d1fb      	bne.n	1598 <_oscctrl_init_referenced_generators+0x1c>
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    15a0:	4b2e      	ldr	r3, [pc, #184]	; (165c <_oscctrl_init_referenced_generators+0xe0>)
    15a2:	2200      	movs	r2, #0
    15a4:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    15a6:	4a2e      	ldr	r2, [pc, #184]	; (1660 <_oscctrl_init_referenced_generators+0xe4>)
    15a8:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    15aa:	461a      	mov	r2, r3
    15ac:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    15b0:	f013 0f10 	tst.w	r3, #16
    15b4:	d1fa      	bne.n	15ac <_oscctrl_init_referenced_generators+0x30>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    15b6:	2200      	movs	r2, #0
    15b8:	4b28      	ldr	r3, [pc, #160]	; (165c <_oscctrl_init_referenced_generators+0xe0>)
    15ba:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    15be:	461a      	mov	r2, r3
    15c0:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    15c4:	f013 0f04 	tst.w	r3, #4
    15c8:	d1fa      	bne.n	15c0 <_oscctrl_init_referenced_generators+0x44>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    15ca:	2202      	movs	r2, #2
    15cc:	4b23      	ldr	r3, [pc, #140]	; (165c <_oscctrl_init_referenced_generators+0xe0>)
    15ce:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    15d0:	461a      	mov	r2, r3
    15d2:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    15d6:	f013 0f02 	tst.w	r3, #2
    15da:	d1fa      	bne.n	15d2 <_oscctrl_init_referenced_generators+0x56>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    15dc:	4b1f      	ldr	r3, [pc, #124]	; (165c <_oscctrl_init_referenced_generators+0xe0>)
    15de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    15e0:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    15e2:	461a      	mov	r2, r3
    15e4:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    15e8:	f013 0f08 	tst.w	r3, #8
    15ec:	d1fa      	bne.n	15e4 <_oscctrl_init_referenced_generators+0x68>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    15ee:	2280      	movs	r2, #128	; 0x80
    15f0:	4b1a      	ldr	r3, [pc, #104]	; (165c <_oscctrl_init_referenced_generators+0xe0>)
    15f2:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    15f6:	461a      	mov	r2, r3
    15f8:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    15fc:	f013 0f04 	tst.w	r3, #4
    1600:	d1fa      	bne.n	15f8 <_oscctrl_init_referenced_generators+0x7c>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    1602:	4b16      	ldr	r3, [pc, #88]	; (165c <_oscctrl_init_referenced_generators+0xe0>)
    1604:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    1608:	f013 0f01 	tst.w	r3, #1
    160c:	d01d      	beq.n	164a <_oscctrl_init_referenced_generators+0xce>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    160e:	4a13      	ldr	r2, [pc, #76]	; (165c <_oscctrl_init_referenced_generators+0xe0>)
    1610:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    1612:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    1616:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    161a:	d1f9      	bne.n	1610 <_oscctrl_init_referenced_generators+0x94>
	return ((Gclk *)hw)->SYNCBUSY.reg;
    161c:	4a0e      	ldr	r2, [pc, #56]	; (1658 <_oscctrl_init_referenced_generators+0xdc>)
    161e:	6853      	ldr	r3, [r2, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    1620:	2b00      	cmp	r3, #0
    1622:	d1fc      	bne.n	161e <_oscctrl_init_referenced_generators+0xa2>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    1624:	4a0c      	ldr	r2, [pc, #48]	; (1658 <_oscctrl_init_referenced_generators+0xdc>)
    1626:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    1628:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    162c:	f043 0306 	orr.w	r3, r3, #6
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    1630:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1632:	4611      	mov	r1, r2
    1634:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    1638:	684b      	ldr	r3, [r1, #4]
    163a:	4213      	tst	r3, r2
    163c:	d1fc      	bne.n	1638 <_oscctrl_init_referenced_generators+0xbc>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    163e:	4a06      	ldr	r2, [pc, #24]	; (1658 <_oscctrl_init_referenced_generators+0xdc>)
    1640:	6853      	ldr	r3, [r2, #4]
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    1642:	f013 0f04 	tst.w	r3, #4
    1646:	d1fb      	bne.n	1640 <_oscctrl_init_referenced_generators+0xc4>
		;
#endif
	(void)hw;
}
    1648:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    164a:	4a04      	ldr	r2, [pc, #16]	; (165c <_oscctrl_init_referenced_generators+0xe0>)
    164c:	6913      	ldr	r3, [r2, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    164e:	f413 7f80 	tst.w	r3, #256	; 0x100
    1652:	d0fb      	beq.n	164c <_oscctrl_init_referenced_generators+0xd0>
    1654:	e7e2      	b.n	161c <_oscctrl_init_referenced_generators+0xa0>
    1656:	bf00      	nop
    1658:	40001c00 	.word	0x40001c00
    165c:	40001000 	.word	0x40001000
    1660:	04010000 	.word	0x04010000

00001664 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    1664:	b500      	push	{lr}
    1666:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    1668:	4b0d      	ldr	r3, [pc, #52]	; (16a0 <RAMECC_Handler+0x3c>)
    166a:	789b      	ldrb	r3, [r3, #2]
    166c:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    166e:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    1670:	9b01      	ldr	r3, [sp, #4]
    1672:	f013 0f02 	tst.w	r3, #2
    1676:	d006      	beq.n	1686 <RAMECC_Handler+0x22>
    1678:	4b0a      	ldr	r3, [pc, #40]	; (16a4 <RAMECC_Handler+0x40>)
    167a:	681b      	ldr	r3, [r3, #0]
    167c:	b11b      	cbz	r3, 1686 <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    167e:	4a08      	ldr	r2, [pc, #32]	; (16a0 <RAMECC_Handler+0x3c>)
    1680:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    1682:	4798      	blx	r3
    1684:	e009      	b.n	169a <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    1686:	9b01      	ldr	r3, [sp, #4]
    1688:	f013 0f01 	tst.w	r3, #1
    168c:	d005      	beq.n	169a <RAMECC_Handler+0x36>
    168e:	4b05      	ldr	r3, [pc, #20]	; (16a4 <RAMECC_Handler+0x40>)
    1690:	685b      	ldr	r3, [r3, #4]
    1692:	b113      	cbz	r3, 169a <RAMECC_Handler+0x36>
    1694:	4a02      	ldr	r2, [pc, #8]	; (16a0 <RAMECC_Handler+0x3c>)
    1696:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    1698:	4798      	blx	r3
	} else {
		return;
	}
}
    169a:	b003      	add	sp, #12
    169c:	f85d fb04 	ldr.w	pc, [sp], #4
    16a0:	41020000 	.word	0x41020000
    16a4:	200006e0 	.word	0x200006e0

000016a8 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    16a8:	b470      	push	{r4, r5, r6}
    16aa:	b089      	sub	sp, #36	; 0x24
    16ac:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    16ae:	466c      	mov	r4, sp
    16b0:	4d0d      	ldr	r5, [pc, #52]	; (16e8 <_sercom_get_hardware_index+0x40>)
    16b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    16b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    16b6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    16ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    16be:	9b00      	ldr	r3, [sp, #0]
    16c0:	42b3      	cmp	r3, r6
    16c2:	d00d      	beq.n	16e0 <_sercom_get_hardware_index+0x38>
    16c4:	4631      	mov	r1, r6
    16c6:	ab01      	add	r3, sp, #4
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    16c8:	2001      	movs	r0, #1
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    16ca:	f853 2b04 	ldr.w	r2, [r3], #4
    16ce:	428a      	cmp	r2, r1
    16d0:	d007      	beq.n	16e2 <_sercom_get_hardware_index+0x3a>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    16d2:	3001      	adds	r0, #1
    16d4:	2808      	cmp	r0, #8
    16d6:	d1f8      	bne.n	16ca <_sercom_get_hardware_index+0x22>
			return i;
		}
	}
	return 0;
    16d8:	2000      	movs	r0, #0
}
    16da:	b009      	add	sp, #36	; 0x24
    16dc:	bc70      	pop	{r4, r5, r6}
    16de:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    16e0:	2000      	movs	r0, #0
			return i;
    16e2:	b2c0      	uxtb	r0, r0
    16e4:	e7f9      	b.n	16da <_sercom_get_hardware_index+0x32>
    16e6:	bf00      	nop
    16e8:	0000233c 	.word	0x0000233c

000016ec <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    16ec:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    16ee:	4b03      	ldr	r3, [pc, #12]	; (16fc <_sercom_get_irq_num+0x10>)
    16f0:	4798      	blx	r3
    16f2:	0080      	lsls	r0, r0, #2
    16f4:	302e      	adds	r0, #46	; 0x2e
}
    16f6:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    16fa:	bd08      	pop	{r3, pc}
    16fc:	000016a9 	.word	0x000016a9

00001700 <_spi_handler>:
/**
 *  \brief IRQ handler used
 *  \param[in, out] p Pointer to SPI device instance.
 */
static void _spi_handler(struct _spi_async_dev *dev)
{
    1700:	b508      	push	{r3, lr}
	void *                      hw = dev->prvt;
    1702:	6802      	ldr	r2, [r0, #0]
	return tmp;
}

static inline hri_sercomspi_intflag_reg_t hri_sercomspi_read_INTFLAG_reg(const void *const hw)
{
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    1704:	7e11      	ldrb	r1, [r2, #24]
	return tmp;
}

static inline hri_sercomspi_intenset_reg_t hri_sercomspi_read_INTEN_reg(const void *const hw)
{
	return ((Sercom *)hw)->SPI.INTENSET.reg;
    1706:	7d93      	ldrb	r3, [r2, #22]
	hri_sercomspi_intflag_reg_t st;

	st = hri_sercomspi_read_INTFLAG_reg(hw);
	st &= hri_sercomspi_read_INTEN_reg(hw);
    1708:	400b      	ands	r3, r1

	if (st & SERCOM_SPI_INTFLAG_DRE) {
    170a:	f013 0f01 	tst.w	r3, #1
    170e:	d109      	bne.n	1724 <_spi_handler+0x24>
		dev->callbacks.tx(dev);
	} else if (st & SERCOM_SPI_INTFLAG_RXC) {
    1710:	f013 0f04 	tst.w	r3, #4
    1714:	d109      	bne.n	172a <_spi_handler+0x2a>
		dev->callbacks.rx(dev);
	} else if (st & SERCOM_SPI_INTFLAG_TXC) {
    1716:	f013 0f02 	tst.w	r3, #2
    171a:	d109      	bne.n	1730 <_spi_handler+0x30>
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC);
		dev->callbacks.complete(dev);
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
    171c:	f013 0f80 	tst.w	r3, #128	; 0x80
    1720:	d10b      	bne.n	173a <_spi_handler+0x3a>
    1722:	bd08      	pop	{r3, pc}
		dev->callbacks.tx(dev);
    1724:	6883      	ldr	r3, [r0, #8]
    1726:	4798      	blx	r3
    1728:	bd08      	pop	{r3, pc}
		dev->callbacks.rx(dev);
    172a:	68c3      	ldr	r3, [r0, #12]
    172c:	4798      	blx	r3
    172e:	bd08      	pop	{r3, pc}
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    1730:	2302      	movs	r3, #2
    1732:	7613      	strb	r3, [r2, #24]
		dev->callbacks.complete(dev);
    1734:	6903      	ldr	r3, [r0, #16]
    1736:	4798      	blx	r3
    1738:	bd08      	pop	{r3, pc}
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    173a:	2304      	movs	r3, #4
    173c:	8353      	strh	r3, [r2, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    173e:	2380      	movs	r3, #128	; 0x80
    1740:	7613      	strb	r3, [r2, #24]
		hri_sercomspi_clear_STATUS_reg(hw, SERCOM_SPI_STATUS_BUFOVF);
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
		dev->callbacks.err(dev, ERR_OVERFLOW);
    1742:	6943      	ldr	r3, [r0, #20]
    1744:	f06f 0112 	mvn.w	r1, #18
    1748:	4798      	blx	r3
	}
}
    174a:	e7ea      	b.n	1722 <_spi_handler+0x22>

0000174c <_usart_init>:
{
    174c:	b510      	push	{r4, lr}
    174e:	4604      	mov	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    1750:	4b20      	ldr	r3, [pc, #128]	; (17d4 <_usart_init+0x88>)
    1752:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
    1754:	b128      	cbz	r0, 1762 <_usart_init+0x16>
	ASSERT(false);
    1756:	f240 2249 	movw	r2, #585	; 0x249
    175a:	491f      	ldr	r1, [pc, #124]	; (17d8 <_usart_init+0x8c>)
    175c:	2000      	movs	r0, #0
    175e:	4b1f      	ldr	r3, [pc, #124]	; (17dc <_usart_init+0x90>)
    1760:	4798      	blx	r3
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    1762:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    1764:	f013 0f01 	tst.w	r3, #1
    1768:	d119      	bne.n	179e <_usart_init+0x52>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    176a:	69e3      	ldr	r3, [r4, #28]
    176c:	f013 0f03 	tst.w	r3, #3
    1770:	d1fb      	bne.n	176a <_usart_init+0x1e>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    1772:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    1774:	f013 0f02 	tst.w	r3, #2
    1778:	d00b      	beq.n	1792 <_usart_init+0x46>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    177a:	6823      	ldr	r3, [r4, #0]
    177c:	f023 0302 	bic.w	r3, r3, #2
    1780:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1782:	69e3      	ldr	r3, [r4, #28]
    1784:	f013 0f03 	tst.w	r3, #3
    1788:	d1fb      	bne.n	1782 <_usart_init+0x36>
    178a:	69e3      	ldr	r3, [r4, #28]
    178c:	f013 0f02 	tst.w	r3, #2
    1790:	d1fb      	bne.n	178a <_usart_init+0x3e>
	((Sercom *)hw)->USART.CTRLA.reg = data;
    1792:	2305      	movs	r3, #5
    1794:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1796:	69e3      	ldr	r3, [r4, #28]
    1798:	f013 0f03 	tst.w	r3, #3
    179c:	d1fb      	bne.n	1796 <_usart_init+0x4a>
    179e:	69e3      	ldr	r3, [r4, #28]
    17a0:	f013 0f01 	tst.w	r3, #1
    17a4:	d1fb      	bne.n	179e <_usart_init+0x52>
	((Sercom *)hw)->USART.CTRLA.reg = data;
    17a6:	4b0e      	ldr	r3, [pc, #56]	; (17e0 <_usart_init+0x94>)
    17a8:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    17aa:	69e3      	ldr	r3, [r4, #28]
    17ac:	f013 0f03 	tst.w	r3, #3
    17b0:	d1fb      	bne.n	17aa <_usart_init+0x5e>
	((Sercom *)hw)->USART.CTRLB.reg = data;
    17b2:	f44f 3340 	mov.w	r3, #196608	; 0x30000
    17b6:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    17b8:	69e3      	ldr	r3, [r4, #28]
    17ba:	f013 0f1f 	tst.w	r3, #31
    17be:	d1fb      	bne.n	17b8 <_usart_init+0x6c>
	((Sercom *)hw)->USART.CTRLC.reg = data;
    17c0:	4b08      	ldr	r3, [pc, #32]	; (17e4 <_usart_init+0x98>)
    17c2:	60a3      	str	r3, [r4, #8]
	((Sercom *)hw)->USART.BAUD.reg = data;
    17c4:	f64f 43b9 	movw	r3, #64697	; 0xfcb9
    17c8:	81a3      	strh	r3, [r4, #12]
	((Sercom *)hw)->USART.RXPL.reg = data;
    17ca:	2000      	movs	r0, #0
    17cc:	73a0      	strb	r0, [r4, #14]
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    17ce:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
}
    17d2:	bd10      	pop	{r4, pc}
    17d4:	000016a9 	.word	0x000016a9
    17d8:	00002374 	.word	0x00002374
    17dc:	00000f11 	.word	0x00000f11
    17e0:	40100004 	.word	0x40100004
    17e4:	00700002 	.word	0x00700002

000017e8 <_usart_sync_init>:
{
    17e8:	b538      	push	{r3, r4, r5, lr}
    17ea:	460c      	mov	r4, r1
	ASSERT(device);
    17ec:	4605      	mov	r5, r0
    17ee:	22bd      	movs	r2, #189	; 0xbd
    17f0:	4905      	ldr	r1, [pc, #20]	; (1808 <_usart_sync_init+0x20>)
    17f2:	3000      	adds	r0, #0
    17f4:	bf18      	it	ne
    17f6:	2001      	movne	r0, #1
    17f8:	4b04      	ldr	r3, [pc, #16]	; (180c <_usart_sync_init+0x24>)
    17fa:	4798      	blx	r3
	device->hw = hw;
    17fc:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
    17fe:	4620      	mov	r0, r4
    1800:	4b03      	ldr	r3, [pc, #12]	; (1810 <_usart_sync_init+0x28>)
    1802:	4798      	blx	r3
}
    1804:	bd38      	pop	{r3, r4, r5, pc}
    1806:	bf00      	nop
    1808:	00002374 	.word	0x00002374
    180c:	00000f11 	.word	0x00000f11
    1810:	0000174d 	.word	0x0000174d

00001814 <_usart_sync_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    1814:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1816:	6813      	ldr	r3, [r2, #0]
    1818:	f043 0302 	orr.w	r3, r3, #2
    181c:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    181e:	69d3      	ldr	r3, [r2, #28]
    1820:	f013 0f03 	tst.w	r3, #3
    1824:	d1fb      	bne.n	181e <_usart_sync_enable+0xa>
}
    1826:	4770      	bx	lr

00001828 <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    1828:	6803      	ldr	r3, [r0, #0]
	((Sercom *)hw)->USART.DATA.reg = data;
    182a:	6299      	str	r1, [r3, #40]	; 0x28
    182c:	4770      	bx	lr

0000182e <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
    182e:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
    1830:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    1832:	b2c0      	uxtb	r0, r0
    1834:	4770      	bx	lr

00001836 <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    1836:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    1838:	7e18      	ldrb	r0, [r3, #24]
}
    183a:	f000 0001 	and.w	r0, r0, #1
    183e:	4770      	bx	lr

00001840 <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
    1840:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    1842:	7e18      	ldrb	r0, [r3, #24]
}
    1844:	f3c0 0040 	ubfx	r0, r0, #1, #1
    1848:	4770      	bx	lr

0000184a <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    184a:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    184c:	7e18      	ldrb	r0, [r3, #24]
}
    184e:	f3c0 0080 	ubfx	r0, r0, #2, #1
    1852:	4770      	bx	lr

00001854 <SERCOM7_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_0_Handler(void)
{
    1854:	b508      	push	{r3, lr}
	_spi_handler(_sercom7_dev);
    1856:	4b02      	ldr	r3, [pc, #8]	; (1860 <SERCOM7_0_Handler+0xc>)
    1858:	6818      	ldr	r0, [r3, #0]
    185a:	4b02      	ldr	r3, [pc, #8]	; (1864 <SERCOM7_0_Handler+0x10>)
    185c:	4798      	blx	r3
    185e:	bd08      	pop	{r3, pc}
    1860:	200001e4 	.word	0x200001e4
    1864:	00001701 	.word	0x00001701

00001868 <SERCOM7_1_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_1_Handler(void)
{
    1868:	b508      	push	{r3, lr}
	_spi_handler(_sercom7_dev);
    186a:	4b02      	ldr	r3, [pc, #8]	; (1874 <SERCOM7_1_Handler+0xc>)
    186c:	6818      	ldr	r0, [r3, #0]
    186e:	4b02      	ldr	r3, [pc, #8]	; (1878 <SERCOM7_1_Handler+0x10>)
    1870:	4798      	blx	r3
    1872:	bd08      	pop	{r3, pc}
    1874:	200001e4 	.word	0x200001e4
    1878:	00001701 	.word	0x00001701

0000187c <SERCOM7_2_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_2_Handler(void)
{
    187c:	b508      	push	{r3, lr}
	_spi_handler(_sercom7_dev);
    187e:	4b02      	ldr	r3, [pc, #8]	; (1888 <SERCOM7_2_Handler+0xc>)
    1880:	6818      	ldr	r0, [r3, #0]
    1882:	4b02      	ldr	r3, [pc, #8]	; (188c <SERCOM7_2_Handler+0x10>)
    1884:	4798      	blx	r3
    1886:	bd08      	pop	{r3, pc}
    1888:	200001e4 	.word	0x200001e4
    188c:	00001701 	.word	0x00001701

00001890 <SERCOM7_3_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM7_3_Handler(void)
{
    1890:	b508      	push	{r3, lr}
	_spi_handler(_sercom7_dev);
    1892:	4b02      	ldr	r3, [pc, #8]	; (189c <SERCOM7_3_Handler+0xc>)
    1894:	6818      	ldr	r0, [r3, #0]
    1896:	4b02      	ldr	r3, [pc, #8]	; (18a0 <SERCOM7_3_Handler+0x10>)
    1898:	4798      	blx	r3
    189a:	bd08      	pop	{r3, pc}
    189c:	200001e4 	.word	0x200001e4
    18a0:	00001701 	.word	0x00001701

000018a4 <_spi_m_sync_init>:
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    18a4:	b538      	push	{r3, r4, r5, lr}
    18a6:	4605      	mov	r5, r0
    18a8:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    18aa:	4608      	mov	r0, r1
    18ac:	4b36      	ldr	r3, [pc, #216]	; (1988 <_spi_m_sync_init+0xe4>)
    18ae:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    18b0:	2807      	cmp	r0, #7
    18b2:	d00c      	beq.n	18ce <_spi_m_sync_init+0x2a>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    18b4:	2d00      	cmp	r5, #0
    18b6:	d055      	beq.n	1964 <_spi_m_sync_init+0xc0>
    18b8:	f640 1273 	movw	r2, #2419	; 0x973
    18bc:	4933      	ldr	r1, [pc, #204]	; (198c <_spi_m_sync_init+0xe8>)
    18be:	1c20      	adds	r0, r4, #0
    18c0:	bf18      	it	ne
    18c2:	2001      	movne	r0, #1
    18c4:	4b32      	ldr	r3, [pc, #200]	; (1990 <_spi_m_sync_init+0xec>)
    18c6:	4798      	blx	r3

	if (regs == NULL) {
		return ERR_INVALID_ARG;
    18c8:	f06f 000c 	mvn.w	r0, #12
    18cc:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(dev && hw);
    18ce:	2d00      	cmp	r5, #0
    18d0:	d151      	bne.n	1976 <_spi_m_sync_init+0xd2>
    18d2:	f640 1273 	movw	r2, #2419	; 0x973
    18d6:	492d      	ldr	r1, [pc, #180]	; (198c <_spi_m_sync_init+0xe8>)
    18d8:	2000      	movs	r0, #0
    18da:	4b2d      	ldr	r3, [pc, #180]	; (1990 <_spi_m_sync_init+0xec>)
    18dc:	4798      	blx	r3
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    18de:	69e3      	ldr	r3, [r4, #28]
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    18e0:	f013 0f01 	tst.w	r3, #1
    18e4:	d119      	bne.n	191a <_spi_m_sync_init+0x76>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    18e6:	69e3      	ldr	r3, [r4, #28]
    18e8:	f013 0f03 	tst.w	r3, #3
    18ec:	d1fb      	bne.n	18e6 <_spi_m_sync_init+0x42>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    18ee:	6823      	ldr	r3, [r4, #0]
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    18f0:	f013 0f02 	tst.w	r3, #2
    18f4:	d00b      	beq.n	190e <_spi_m_sync_init+0x6a>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    18f6:	6823      	ldr	r3, [r4, #0]
    18f8:	f023 0302 	bic.w	r3, r3, #2
    18fc:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    18fe:	69e3      	ldr	r3, [r4, #28]
    1900:	f013 0f03 	tst.w	r3, #3
    1904:	d1fb      	bne.n	18fe <_spi_m_sync_init+0x5a>
    1906:	69e3      	ldr	r3, [r4, #28]
    1908:	f013 0f02 	tst.w	r3, #2
    190c:	d1fb      	bne.n	1906 <_spi_m_sync_init+0x62>
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    190e:	230d      	movs	r3, #13
    1910:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1912:	69e3      	ldr	r3, [r4, #28]
    1914:	f013 0f03 	tst.w	r3, #3
    1918:	d1fb      	bne.n	1912 <_spi_m_sync_init+0x6e>
    191a:	69e3      	ldr	r3, [r4, #28]
    191c:	f013 0f01 	tst.w	r3, #1
    1920:	d1fb      	bne.n	191a <_spi_m_sync_init+0x76>
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    1922:	602c      	str	r4, [r5, #0]
	ASSERT(hw && regs);
    1924:	f640 1206 	movw	r2, #2310	; 0x906
    1928:	4918      	ldr	r1, [pc, #96]	; (198c <_spi_m_sync_init+0xe8>)
    192a:	1c20      	adds	r0, r4, #0
    192c:	bf18      	it	ne
    192e:	2001      	movne	r0, #1
    1930:	4b17      	ldr	r3, [pc, #92]	; (1990 <_spi_m_sync_init+0xec>)
    1932:	4798      	blx	r3
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    1934:	4b17      	ldr	r3, [pc, #92]	; (1994 <_spi_m_sync_init+0xf0>)
    1936:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1938:	69e3      	ldr	r3, [r4, #28]
    193a:	f013 0f03 	tst.w	r3, #3
    193e:	d1fb      	bne.n	1938 <_spi_m_sync_init+0x94>
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    1940:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    1944:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1946:	69e3      	ldr	r3, [r4, #28]
    1948:	f013 0f17 	tst.w	r3, #23
    194c:	d1fb      	bne.n	1946 <_spi_m_sync_init+0xa2>
	((Sercom *)hw)->SPI.BAUD.reg = data;
    194e:	2377      	movs	r3, #119	; 0x77
    1950:	7323      	strb	r3, [r4, #12]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    1952:	2000      	movs	r0, #0
    1954:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    1958:	2301      	movs	r3, #1
    195a:	712b      	strb	r3, [r5, #4]

	dev->dummy_byte = regs->dummy_byte;
    195c:	f240 13ff 	movw	r3, #511	; 0x1ff
    1960:	80eb      	strh	r3, [r5, #6]

	return ERR_NONE;
    1962:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(dev && hw);
    1964:	f640 1273 	movw	r2, #2419	; 0x973
    1968:	4908      	ldr	r1, [pc, #32]	; (198c <_spi_m_sync_init+0xe8>)
    196a:	2000      	movs	r0, #0
    196c:	4b08      	ldr	r3, [pc, #32]	; (1990 <_spi_m_sync_init+0xec>)
    196e:	4798      	blx	r3
		return ERR_INVALID_ARG;
    1970:	f06f 000c 	mvn.w	r0, #12
    1974:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(dev && hw);
    1976:	f640 1273 	movw	r2, #2419	; 0x973
    197a:	4904      	ldr	r1, [pc, #16]	; (198c <_spi_m_sync_init+0xe8>)
    197c:	1c20      	adds	r0, r4, #0
    197e:	bf18      	it	ne
    1980:	2001      	movne	r0, #1
    1982:	4b03      	ldr	r3, [pc, #12]	; (1990 <_spi_m_sync_init+0xec>)
    1984:	4798      	blx	r3
    1986:	e7aa      	b.n	18de <_spi_m_sync_init+0x3a>
    1988:	000016a9 	.word	0x000016a9
    198c:	00002374 	.word	0x00002374
    1990:	00000f11 	.word	0x00000f11
    1994:	0020000c 	.word	0x0020000c

00001998 <_spi_m_async_init>:
{
	return _spi_m_sync_init(dev, hw);
}

int32_t _spi_m_async_init(struct _spi_async_dev *dev, void *const hw)
{
    1998:	b538      	push	{r3, r4, r5, lr}
    199a:	4604      	mov	r4, r0
    199c:	460d      	mov	r5, r1
	struct _spi_async_dev *spid = dev;
	/* Do hardware initialize. */
	int32_t rc = _spi_m_sync_init((struct _spi_m_sync_dev *)dev, hw);
    199e:	4b15      	ldr	r3, [pc, #84]	; (19f4 <_spi_m_async_init+0x5c>)
    19a0:	4798      	blx	r3

	if (rc < 0) {
    19a2:	2800      	cmp	r0, #0
    19a4:	db25      	blt.n	19f2 <_spi_m_async_init+0x5a>
	if (hw == SERCOM7) {
    19a6:	4b14      	ldr	r3, [pc, #80]	; (19f8 <_spi_m_async_init+0x60>)
    19a8:	429d      	cmp	r5, r3
		_sercom7_dev = (struct _spi_async_dev *)dev;
    19aa:	bf04      	itt	eq
    19ac:	4b13      	ldreq	r3, [pc, #76]	; (19fc <_spi_m_async_init+0x64>)
    19ae:	601c      	streq	r4, [r3, #0]
		return rc;
	}

	_sercom_init_irq_param(hw, (void *)dev);
	/* Initialize callbacks: must use them */
	spid->callbacks.complete = NULL;
    19b0:	2300      	movs	r3, #0
    19b2:	6123      	str	r3, [r4, #16]
	spid->callbacks.rx       = NULL;
    19b4:	60e3      	str	r3, [r4, #12]
	spid->callbacks.tx       = NULL;
    19b6:	60a3      	str	r3, [r4, #8]
	uint8_t irq              = _sercom_get_irq_num(hw);
    19b8:	4628      	mov	r0, r5
    19ba:	4b11      	ldr	r3, [pc, #68]	; (1a00 <_spi_m_async_init+0x68>)
    19bc:	4798      	blx	r3
    19be:	1d01      	adds	r1, r0, #4
    19c0:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    19c2:	2401      	movs	r4, #1
    19c4:	f000 021f 	and.w	r2, r0, #31
    19c8:	fa04 f202 	lsl.w	r2, r4, r2
    19cc:	0943      	lsrs	r3, r0, #5
    19ce:	009b      	lsls	r3, r3, #2
    19d0:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    19d4:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    19d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    19dc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    19e0:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    19e4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	for (uint32_t i = 0; i < 4; i++) {
		NVIC_DisableIRQ((IRQn_Type)irq);
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
		irq++;
    19e8:	3001      	adds	r0, #1
    19ea:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    19ec:	4281      	cmp	r1, r0
    19ee:	d1e9      	bne.n	19c4 <_spi_m_async_init+0x2c>
	}

	return ERR_NONE;
    19f0:	2000      	movs	r0, #0
}
    19f2:	bd38      	pop	{r3, r4, r5, pc}
    19f4:	000018a5 	.word	0x000018a5
    19f8:	43000c00 	.word	0x43000c00
    19fc:	200001e4 	.word	0x200001e4
    1a00:	000016ed 	.word	0x000016ed

00001a04 <_spi_m_async_enable_tx>:

	return rc;
}

int32_t _spi_m_async_enable_tx(struct _spi_async_dev *dev, bool state)
{
    1a04:	b538      	push	{r3, r4, r5, lr}
    1a06:	460d      	mov	r5, r1
	void *hw = dev->prvt;
    1a08:	6804      	ldr	r4, [r0, #0]

	ASSERT(dev && hw);
    1a0a:	b160      	cbz	r0, 1a26 <_spi_m_async_enable_tx+0x22>
    1a0c:	1c20      	adds	r0, r4, #0
    1a0e:	bf18      	it	ne
    1a10:	2001      	movne	r0, #1
    1a12:	f640 3203 	movw	r2, #2819	; 0xb03
    1a16:	4906      	ldr	r1, [pc, #24]	; (1a30 <_spi_m_async_enable_tx+0x2c>)
    1a18:	4b06      	ldr	r3, [pc, #24]	; (1a34 <_spi_m_async_enable_tx+0x30>)
    1a1a:	4798      	blx	r3

	if (state) {
    1a1c:	b92d      	cbnz	r5, 1a2a <_spi_m_async_enable_tx+0x26>
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_DRE;
    1a1e:	2301      	movs	r3, #1
    1a20:	7523      	strb	r3, [r4, #20]
	} else {
		hri_sercomspi_clear_INTEN_DRE_bit(hw);
	}

	return ERR_NONE;
}
    1a22:	2000      	movs	r0, #0
    1a24:	bd38      	pop	{r3, r4, r5, pc}
    1a26:	2000      	movs	r0, #0
    1a28:	e7f3      	b.n	1a12 <_spi_m_async_enable_tx+0xe>
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
    1a2a:	2301      	movs	r3, #1
    1a2c:	75a3      	strb	r3, [r4, #22]
    1a2e:	e7f8      	b.n	1a22 <_spi_m_async_enable_tx+0x1e>
    1a30:	00002374 	.word	0x00002374
    1a34:	00000f11 	.word	0x00000f11

00001a38 <_spi_m_async_enable_rx>:
{
	return _spi_m_async_enable_tx(dev, state);
}

int32_t _spi_m_async_enable_rx(struct _spi_async_dev *dev, bool state)
{
    1a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1a3a:	460f      	mov	r7, r1
	void *hw = dev->prvt;
    1a3c:	6804      	ldr	r4, [r0, #0]

	ASSERT(dev);
    1a3e:	4e0c      	ldr	r6, [pc, #48]	; (1a70 <_spi_m_async_enable_rx+0x38>)
    1a40:	f640 3217 	movw	r2, #2839	; 0xb17
    1a44:	4631      	mov	r1, r6
    1a46:	3000      	adds	r0, #0
    1a48:	bf18      	it	ne
    1a4a:	2001      	movne	r0, #1
    1a4c:	4d09      	ldr	r5, [pc, #36]	; (1a74 <_spi_m_async_enable_rx+0x3c>)
    1a4e:	47a8      	blx	r5
	ASSERT(hw);
    1a50:	f640 3218 	movw	r2, #2840	; 0xb18
    1a54:	4631      	mov	r1, r6
    1a56:	1c20      	adds	r0, r4, #0
    1a58:	bf18      	it	ne
    1a5a:	2001      	movne	r0, #1
    1a5c:	47a8      	blx	r5

	if (state) {
    1a5e:	b91f      	cbnz	r7, 1a68 <_spi_m_async_enable_rx+0x30>
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_RXC;
    1a60:	2304      	movs	r3, #4
    1a62:	7523      	strb	r3, [r4, #20]
	} else {
		hri_sercomspi_clear_INTEN_RXC_bit(hw);
	}

	return ERR_NONE;
}
    1a64:	2000      	movs	r0, #0
    1a66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
    1a68:	2304      	movs	r3, #4
    1a6a:	75a3      	strb	r3, [r4, #22]
    1a6c:	e7fa      	b.n	1a64 <_spi_m_async_enable_rx+0x2c>
    1a6e:	bf00      	nop
    1a70:	00002374 	.word	0x00002374
    1a74:	00000f11 	.word	0x00000f11

00001a78 <_spi_m_async_enable_tx_complete>:
{
	return _spi_m_async_enable_rx(dev, state);
}

int32_t _spi_m_async_enable_tx_complete(struct _spi_async_dev *dev, bool state)
{
    1a78:	b538      	push	{r3, r4, r5, lr}
    1a7a:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
    1a7c:	4604      	mov	r4, r0
    1a7e:	b170      	cbz	r0, 1a9e <_spi_m_async_enable_tx_complete+0x26>
    1a80:	6800      	ldr	r0, [r0, #0]
    1a82:	3000      	adds	r0, #0
    1a84:	bf18      	it	ne
    1a86:	2001      	movne	r0, #1
    1a88:	f640 322a 	movw	r2, #2858	; 0xb2a
    1a8c:	4907      	ldr	r1, [pc, #28]	; (1aac <_spi_m_async_enable_tx_complete+0x34>)
    1a8e:	4b08      	ldr	r3, [pc, #32]	; (1ab0 <_spi_m_async_enable_tx_complete+0x38>)
    1a90:	4798      	blx	r3

	if (state) {
    1a92:	b935      	cbnz	r5, 1aa2 <_spi_m_async_enable_tx_complete+0x2a>
		hri_sercomspi_set_INTEN_TXC_bit(dev->prvt);
	} else {
		hri_sercomspi_clear_INTEN_TXC_bit(dev->prvt);
    1a94:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_TXC;
    1a96:	2202      	movs	r2, #2
    1a98:	751a      	strb	r2, [r3, #20]
	}

	return ERR_NONE;
}
    1a9a:	2000      	movs	r0, #0
    1a9c:	bd38      	pop	{r3, r4, r5, pc}
    1a9e:	2000      	movs	r0, #0
    1aa0:	e7f2      	b.n	1a88 <_spi_m_async_enable_tx_complete+0x10>
		hri_sercomspi_set_INTEN_TXC_bit(dev->prvt);
    1aa2:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
    1aa4:	2202      	movs	r2, #2
    1aa6:	759a      	strb	r2, [r3, #22]
    1aa8:	e7f7      	b.n	1a9a <_spi_m_async_enable_tx_complete+0x22>
    1aaa:	bf00      	nop
    1aac:	00002374 	.word	0x00002374
    1ab0:	00000f11 	.word	0x00000f11

00001ab4 <_spi_m_async_write_one>:
{
	return _spi_m_async_enable_tx_complete(dev, state);
}

int32_t _spi_m_async_write_one(struct _spi_async_dev *dev, uint16_t data)
{
    1ab4:	b538      	push	{r3, r4, r5, lr}
    1ab6:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
    1ab8:	4604      	mov	r4, r0
    1aba:	b160      	cbz	r0, 1ad6 <_spi_m_async_write_one+0x22>
    1abc:	6800      	ldr	r0, [r0, #0]
    1abe:	3000      	adds	r0, #0
    1ac0:	bf18      	it	ne
    1ac2:	2001      	movne	r0, #1
    1ac4:	f640 323c 	movw	r2, #2876	; 0xb3c
    1ac8:	4904      	ldr	r1, [pc, #16]	; (1adc <_spi_m_async_write_one+0x28>)
    1aca:	4b05      	ldr	r3, [pc, #20]	; (1ae0 <_spi_m_async_write_one+0x2c>)
    1acc:	4798      	blx	r3

	hri_sercomspi_write_DATA_reg(dev->prvt, data);
    1ace:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.DATA.reg = data;
    1ad0:	629d      	str	r5, [r3, #40]	; 0x28

	return ERR_NONE;
}
    1ad2:	2000      	movs	r0, #0
    1ad4:	bd38      	pop	{r3, r4, r5, pc}
    1ad6:	2000      	movs	r0, #0
    1ad8:	e7f4      	b.n	1ac4 <_spi_m_async_write_one+0x10>
    1ada:	bf00      	nop
    1adc:	00002374 	.word	0x00002374
    1ae0:	00000f11 	.word	0x00000f11

00001ae4 <_spi_m_async_read_one>:

	return ERR_NONE;
}

uint16_t _spi_m_async_read_one(struct _spi_async_dev *dev)
{
    1ae4:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    1ae6:	4604      	mov	r4, r0
    1ae8:	b160      	cbz	r0, 1b04 <_spi_m_async_read_one+0x20>
    1aea:	6800      	ldr	r0, [r0, #0]
    1aec:	3000      	adds	r0, #0
    1aee:	bf18      	it	ne
    1af0:	2001      	movne	r0, #1
    1af2:	f640 3257 	movw	r2, #2903	; 0xb57
    1af6:	4904      	ldr	r1, [pc, #16]	; (1b08 <_spi_m_async_read_one+0x24>)
    1af8:	4b04      	ldr	r3, [pc, #16]	; (1b0c <_spi_m_async_read_one+0x28>)
    1afa:	4798      	blx	r3

	return hri_sercomspi_read_DATA_reg(dev->prvt);
    1afc:	6823      	ldr	r3, [r4, #0]
	return ((Sercom *)hw)->SPI.DATA.reg;
    1afe:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    1b00:	b280      	uxth	r0, r0
    1b02:	bd10      	pop	{r4, pc}
    1b04:	2000      	movs	r0, #0
    1b06:	e7f4      	b.n	1af2 <_spi_m_async_read_one+0xe>
    1b08:	00002374 	.word	0x00002374
    1b0c:	00000f11 	.word	0x00000f11

00001b10 <_spi_m_async_register_callback>:
	return hri_sercomspi_read_DATA_reg(dev->prvt);
}

int32_t _spi_m_async_register_callback(struct _spi_async_dev *dev, const enum _spi_async_dev_cb_type cb_type,
                                       const FUNC_PTR func)
{
    1b10:	b570      	push	{r4, r5, r6, lr}
    1b12:	460d      	mov	r5, r1
    1b14:	4616      	mov	r6, r2
	typedef void (*func_t)(void);
	struct _spi_async_dev *spid = dev;

	ASSERT(dev && (cb_type < SPI_DEV_CB_N));
    1b16:	4604      	mov	r4, r0
    1b18:	b168      	cbz	r0, 1b36 <_spi_m_async_register_callback+0x26>
    1b1a:	2903      	cmp	r1, #3
    1b1c:	bf8c      	ite	hi
    1b1e:	2000      	movhi	r0, #0
    1b20:	2001      	movls	r0, #1
    1b22:	f44f 6237 	mov.w	r2, #2928	; 0xb70
    1b26:	4905      	ldr	r1, [pc, #20]	; (1b3c <_spi_m_async_register_callback+0x2c>)
    1b28:	4b05      	ldr	r3, [pc, #20]	; (1b40 <_spi_m_async_register_callback+0x30>)
    1b2a:	4798      	blx	r3

	func_t *p_ls  = (func_t *)&spid->callbacks;
	p_ls[cb_type] = (func_t)func;
    1b2c:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    1b30:	60a6      	str	r6, [r4, #8]

	return ERR_NONE;
}
    1b32:	2000      	movs	r0, #0
    1b34:	bd70      	pop	{r4, r5, r6, pc}
    1b36:	2000      	movs	r0, #0
    1b38:	e7f3      	b.n	1b22 <_spi_m_async_register_callback+0x12>
    1b3a:	bf00      	nop
    1b3c:	00002374 	.word	0x00002374
    1b40:	00000f11 	.word	0x00000f11

00001b44 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    1b44:	b570      	push	{r4, r5, r6, lr}
    1b46:	b088      	sub	sp, #32
    1b48:	4606      	mov	r6, r0
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    1b4a:	466c      	mov	r4, sp
    1b4c:	4d17      	ldr	r5, [pc, #92]	; (1bac <get_tc_index+0x68>)
    1b4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1b50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1b52:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    1b56:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    1b5a:	9b00      	ldr	r3, [sp, #0]
    1b5c:	42b3      	cmp	r3, r6
    1b5e:	d01e      	beq.n	1b9e <get_tc_index+0x5a>
    1b60:	4630      	mov	r0, r6
    1b62:	aa01      	add	r2, sp, #4
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    1b64:	2301      	movs	r3, #1
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    1b66:	f852 1b04 	ldr.w	r1, [r2], #4
    1b6a:	4281      	cmp	r1, r0
    1b6c:	d018      	beq.n	1ba0 <get_tc_index+0x5c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    1b6e:	3301      	adds	r3, #1
    1b70:	2b08      	cmp	r3, #8
    1b72:	d1f8      	bne.n	1b66 <get_tc_index+0x22>
			return i;
		}
	}
	return 0;
    1b74:	2300      	movs	r3, #0
		if (_tcs[i].number == index) {
    1b76:	4a0e      	ldr	r2, [pc, #56]	; (1bb0 <get_tc_index+0x6c>)
    1b78:	7812      	ldrb	r2, [r2, #0]
    1b7a:	429a      	cmp	r2, r3
    1b7c:	d012      	beq.n	1ba4 <get_tc_index+0x60>
    1b7e:	4a0c      	ldr	r2, [pc, #48]	; (1bb0 <get_tc_index+0x6c>)
    1b80:	7d12      	ldrb	r2, [r2, #20]
    1b82:	429a      	cmp	r2, r3
    1b84:	bf08      	it	eq
    1b86:	2001      	moveq	r0, #1
    1b88:	d00d      	beq.n	1ba6 <get_tc_index+0x62>
	ASSERT(false);
    1b8a:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
    1b8e:	4909      	ldr	r1, [pc, #36]	; (1bb4 <get_tc_index+0x70>)
    1b90:	2000      	movs	r0, #0
    1b92:	4b09      	ldr	r3, [pc, #36]	; (1bb8 <get_tc_index+0x74>)
    1b94:	4798      	blx	r3
	return -1;
    1b96:	f04f 30ff 	mov.w	r0, #4294967295
}
    1b9a:	b008      	add	sp, #32
    1b9c:	bd70      	pop	{r4, r5, r6, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    1b9e:	2300      	movs	r3, #0
			return i;
    1ba0:	b2db      	uxtb	r3, r3
    1ba2:	e7e8      	b.n	1b76 <get_tc_index+0x32>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    1ba4:	2000      	movs	r0, #0
			return i;
    1ba6:	b240      	sxtb	r0, r0
    1ba8:	e7f7      	b.n	1b9a <get_tc_index+0x56>
    1baa:	bf00      	nop
    1bac:	00002390 	.word	0x00002390
    1bb0:	20000000 	.word	0x20000000
    1bb4:	000023b0 	.word	0x000023b0
    1bb8:	00000f11 	.word	0x00000f11

00001bbc <_timer_init>:
{
    1bbc:	b570      	push	{r4, r5, r6, lr}
    1bbe:	4606      	mov	r6, r0
    1bc0:	460c      	mov	r4, r1
	int8_t i = get_tc_index(hw);
    1bc2:	4608      	mov	r0, r1
    1bc4:	4b69      	ldr	r3, [pc, #420]	; (1d6c <_timer_init+0x1b0>)
    1bc6:	4798      	blx	r3
    1bc8:	4605      	mov	r5, r0
	device->hw = hw;
    1bca:	60f4      	str	r4, [r6, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    1bcc:	228f      	movs	r2, #143	; 0x8f
    1bce:	4968      	ldr	r1, [pc, #416]	; (1d70 <_timer_init+0x1b4>)
    1bd0:	2001      	movs	r0, #1
    1bd2:	4b68      	ldr	r3, [pc, #416]	; (1d74 <_timer_init+0x1b8>)
    1bd4:	4798      	blx	r3
	};
}

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    1bd6:	6923      	ldr	r3, [r4, #16]
	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    1bd8:	f013 0f01 	tst.w	r3, #1
    1bdc:	d119      	bne.n	1c12 <_timer_init+0x56>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1bde:	6923      	ldr	r3, [r4, #16]
    1be0:	f013 0f03 	tst.w	r3, #3
    1be4:	d1fb      	bne.n	1bde <_timer_init+0x22>

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    1be6:	6823      	ldr	r3, [r4, #0]
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    1be8:	f013 0f02 	tst.w	r3, #2
    1bec:	d00b      	beq.n	1c06 <_timer_init+0x4a>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    1bee:	6823      	ldr	r3, [r4, #0]
    1bf0:	f023 0302 	bic.w	r3, r3, #2
    1bf4:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1bf6:	6923      	ldr	r3, [r4, #16]
    1bf8:	f013 0f03 	tst.w	r3, #3
    1bfc:	d1fb      	bne.n	1bf6 <_timer_init+0x3a>
    1bfe:	6923      	ldr	r3, [r4, #16]
    1c00:	f013 0f02 	tst.w	r3, #2
    1c04:	d1fb      	bne.n	1bfe <_timer_init+0x42>
}

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1c06:	2301      	movs	r3, #1
    1c08:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1c0a:	6923      	ldr	r3, [r4, #16]
    1c0c:	f013 0f03 	tst.w	r3, #3
    1c10:	d1fb      	bne.n	1c0a <_timer_init+0x4e>
    1c12:	6923      	ldr	r3, [r4, #16]
    1c14:	f013 0f01 	tst.w	r3, #1
    1c18:	d1fb      	bne.n	1c12 <_timer_init+0x56>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    1c1a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    1c1e:	4a56      	ldr	r2, [pc, #344]	; (1d78 <_timer_init+0x1bc>)
    1c20:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1c24:	685a      	ldr	r2, [r3, #4]
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1c26:	6022      	str	r2, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1c28:	6923      	ldr	r3, [r4, #16]
    1c2a:	f013 0f03 	tst.w	r3, #3
    1c2e:	d1fb      	bne.n	1c28 <_timer_init+0x6c>
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    1c30:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    1c34:	4950      	ldr	r1, [pc, #320]	; (1d78 <_timer_init+0x1bc>)
    1c36:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    1c3a:	7a99      	ldrb	r1, [r3, #10]
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    1c3c:	73e1      	strb	r1, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    1c3e:	891b      	ldrh	r3, [r3, #8]
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    1c40:	80e3      	strh	r3, [r4, #6]
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    1c42:	2301      	movs	r3, #1
    1c44:	7323      	strb	r3, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    1c46:	f002 020c 	and.w	r2, r2, #12
    1c4a:	2a08      	cmp	r2, #8
    1c4c:	d050      	beq.n	1cf0 <_timer_init+0x134>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    1c4e:	2a00      	cmp	r2, #0
    1c50:	d165      	bne.n	1d1e <_timer_init+0x162>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    1c52:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    1c56:	4a48      	ldr	r2, [pc, #288]	; (1d78 <_timer_init+0x1bc>)
    1c58:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1c5c:	899b      	ldrh	r3, [r3, #12]
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    1c5e:	83a3      	strh	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1c60:	6923      	ldr	r3, [r4, #16]
    1c62:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    1c66:	d1fb      	bne.n	1c60 <_timer_init+0xa4>
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    1c68:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    1c6c:	4a42      	ldr	r2, [pc, #264]	; (1d78 <_timer_init+0x1bc>)
    1c6e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1c72:	8a1b      	ldrh	r3, [r3, #16]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    1c74:	83e3      	strh	r3, [r4, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1c76:	6923      	ldr	r3, [r4, #16]
    1c78:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    1c7c:	d1fb      	bne.n	1c76 <_timer_init+0xba>
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    1c7e:	2301      	movs	r3, #1
    1c80:	7263      	strb	r3, [r4, #9]
	if (hw == TC1) {
    1c82:	4b3e      	ldr	r3, [pc, #248]	; (1d7c <_timer_init+0x1c0>)
    1c84:	429c      	cmp	r4, r3
    1c86:	d06e      	beq.n	1d66 <_timer_init+0x1aa>
	if (hw == TC4) {
    1c88:	4b3d      	ldr	r3, [pc, #244]	; (1d80 <_timer_init+0x1c4>)
    1c8a:	429c      	cmp	r4, r3
		_tc4_dev = (struct _pwm_device *)dev;
    1c8c:	bf04      	itt	eq
    1c8e:	4b3d      	ldreq	r3, [pc, #244]	; (1d84 <_timer_init+0x1c8>)
    1c90:	605e      	streq	r6, [r3, #4]
	NVIC_DisableIRQ(_tcs[i].irq);
    1c92:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    1c96:	4a38      	ldr	r2, [pc, #224]	; (1d78 <_timer_init+0x1bc>)
    1c98:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1c9c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    1ca0:	2b00      	cmp	r3, #0
    1ca2:	db23      	blt.n	1cec <_timer_init+0x130>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1ca4:	095a      	lsrs	r2, r3, #5
    1ca6:	f003 031f 	and.w	r3, r3, #31
    1caa:	2101      	movs	r1, #1
    1cac:	fa01 f303 	lsl.w	r3, r1, r3
    1cb0:	3220      	adds	r2, #32
    1cb2:	4935      	ldr	r1, [pc, #212]	; (1d88 <_timer_init+0x1cc>)
    1cb4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    1cb8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1cbc:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    1cc0:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    1cc4:	4b2c      	ldr	r3, [pc, #176]	; (1d78 <_timer_init+0x1bc>)
    1cc6:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    1cca:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
  if ((int32_t)(IRQn) >= 0)
    1cce:	2b00      	cmp	r3, #0
    1cd0:	db0c      	blt.n	1cec <_timer_init+0x130>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1cd2:	0959      	lsrs	r1, r3, #5
    1cd4:	f003 031f 	and.w	r3, r3, #31
    1cd8:	2201      	movs	r2, #1
    1cda:	fa02 f303 	lsl.w	r3, r2, r3
    1cde:	4a2a      	ldr	r2, [pc, #168]	; (1d88 <_timer_init+0x1cc>)
    1ce0:	f101 0060 	add.w	r0, r1, #96	; 0x60
    1ce4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1ce8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    1cec:	2000      	movs	r0, #0
    1cee:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    1cf0:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    1cf4:	4a20      	ldr	r2, [pc, #128]	; (1d78 <_timer_init+0x1bc>)
    1cf6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1cfa:	68db      	ldr	r3, [r3, #12]
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    1cfc:	61e3      	str	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1cfe:	6923      	ldr	r3, [r4, #16]
    1d00:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    1d04:	d1fb      	bne.n	1cfe <_timer_init+0x142>
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    1d06:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    1d0a:	4a1b      	ldr	r2, [pc, #108]	; (1d78 <_timer_init+0x1bc>)
    1d0c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1d10:	691b      	ldr	r3, [r3, #16]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    1d12:	6223      	str	r3, [r4, #32]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1d14:	6923      	ldr	r3, [r4, #16]
    1d16:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    1d1a:	d1fb      	bne.n	1d14 <_timer_init+0x158>
    1d1c:	e7af      	b.n	1c7e <_timer_init+0xc2>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    1d1e:	2a04      	cmp	r2, #4
    1d20:	d1ad      	bne.n	1c7e <_timer_init+0xc2>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    1d22:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    1d26:	4a14      	ldr	r2, [pc, #80]	; (1d78 <_timer_init+0x1bc>)
    1d28:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1d2c:	7b1b      	ldrb	r3, [r3, #12]
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    1d2e:	7723      	strb	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1d30:	6923      	ldr	r3, [r4, #16]
    1d32:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    1d36:	d1fb      	bne.n	1d30 <_timer_init+0x174>
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    1d38:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    1d3c:	4a0e      	ldr	r2, [pc, #56]	; (1d78 <_timer_init+0x1bc>)
    1d3e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1d42:	7c1b      	ldrb	r3, [r3, #16]
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    1d44:	7763      	strb	r3, [r4, #29]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1d46:	6923      	ldr	r3, [r4, #16]
    1d48:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    1d4c:	d1fb      	bne.n	1d46 <_timer_init+0x18a>
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    1d4e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    1d52:	4a09      	ldr	r2, [pc, #36]	; (1d78 <_timer_init+0x1bc>)
    1d54:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1d58:	7adb      	ldrb	r3, [r3, #11]
	((Tc *)hw)->COUNT8.PER.reg = data;
    1d5a:	76e3      	strb	r3, [r4, #27]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1d5c:	6923      	ldr	r3, [r4, #16]
    1d5e:	f013 0f20 	tst.w	r3, #32
    1d62:	d1fb      	bne.n	1d5c <_timer_init+0x1a0>
    1d64:	e78b      	b.n	1c7e <_timer_init+0xc2>
		_tc1_dev = (struct _timer_device *)dev;
    1d66:	4b07      	ldr	r3, [pc, #28]	; (1d84 <_timer_init+0x1c8>)
    1d68:	601e      	str	r6, [r3, #0]
    1d6a:	e792      	b.n	1c92 <_timer_init+0xd6>
    1d6c:	00001b45 	.word	0x00001b45
    1d70:	000023b0 	.word	0x000023b0
    1d74:	00000f11 	.word	0x00000f11
    1d78:	20000000 	.word	0x20000000
    1d7c:	40003c00 	.word	0x40003c00
    1d80:	42001400 	.word	0x42001400
    1d84:	200001e8 	.word	0x200001e8
    1d88:	e000e100 	.word	0xe000e100

00001d8c <_pwm_init>:
{
    1d8c:	b538      	push	{r3, r4, r5, lr}
    1d8e:	4605      	mov	r5, r0
    1d90:	460c      	mov	r4, r1
	int8_t i   = get_tc_index(hw);
    1d92:	4608      	mov	r0, r1
    1d94:	4b57      	ldr	r3, [pc, #348]	; (1ef4 <_pwm_init+0x168>)
    1d96:	4798      	blx	r3
	device->hw = hw;
    1d98:	612c      	str	r4, [r5, #16]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    1d9a:	6923      	ldr	r3, [r4, #16]
	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    1d9c:	f013 0f01 	tst.w	r3, #1
    1da0:	d119      	bne.n	1dd6 <_pwm_init+0x4a>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1da2:	6923      	ldr	r3, [r4, #16]
    1da4:	f013 0f03 	tst.w	r3, #3
    1da8:	d1fb      	bne.n	1da2 <_pwm_init+0x16>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    1daa:	6823      	ldr	r3, [r4, #0]
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    1dac:	f013 0f02 	tst.w	r3, #2
    1db0:	d00b      	beq.n	1dca <_pwm_init+0x3e>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    1db2:	6823      	ldr	r3, [r4, #0]
    1db4:	f023 0302 	bic.w	r3, r3, #2
    1db8:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1dba:	6923      	ldr	r3, [r4, #16]
    1dbc:	f013 0f03 	tst.w	r3, #3
    1dc0:	d1fb      	bne.n	1dba <_pwm_init+0x2e>
    1dc2:	6923      	ldr	r3, [r4, #16]
    1dc4:	f013 0f02 	tst.w	r3, #2
    1dc8:	d1fb      	bne.n	1dc2 <_pwm_init+0x36>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1dca:	2301      	movs	r3, #1
    1dcc:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1dce:	6923      	ldr	r3, [r4, #16]
    1dd0:	f013 0f03 	tst.w	r3, #3
    1dd4:	d1fb      	bne.n	1dce <_pwm_init+0x42>
    1dd6:	6923      	ldr	r3, [r4, #16]
    1dd8:	f013 0f01 	tst.w	r3, #1
    1ddc:	d1fb      	bne.n	1dd6 <_pwm_init+0x4a>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    1dde:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    1de2:	4a45      	ldr	r2, [pc, #276]	; (1ef8 <_pwm_init+0x16c>)
    1de4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1de8:	685a      	ldr	r2, [r3, #4]
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1dea:	6022      	str	r2, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1dec:	6923      	ldr	r3, [r4, #16]
    1dee:	f013 0f03 	tst.w	r3, #3
    1df2:	d1fb      	bne.n	1dec <_pwm_init+0x60>
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    1df4:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    1df8:	493f      	ldr	r1, [pc, #252]	; (1ef8 <_pwm_init+0x16c>)
    1dfa:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    1dfe:	7a99      	ldrb	r1, [r3, #10]
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    1e00:	73e1      	strb	r1, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    1e02:	891b      	ldrh	r3, [r3, #8]
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    1e04:	80e3      	strh	r3, [r4, #6]
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    1e06:	2303      	movs	r3, #3
    1e08:	7323      	strb	r3, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    1e0a:	f002 020c 	and.w	r2, r2, #12
    1e0e:	2a08      	cmp	r2, #8
    1e10:	d04e      	beq.n	1eb0 <_pwm_init+0x124>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    1e12:	2a00      	cmp	r2, #0
    1e14:	d166      	bne.n	1ee4 <_pwm_init+0x158>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    1e16:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    1e1a:	4a37      	ldr	r2, [pc, #220]	; (1ef8 <_pwm_init+0x16c>)
    1e1c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1e20:	899b      	ldrh	r3, [r3, #12]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    1e22:	83a3      	strh	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1e24:	6923      	ldr	r3, [r4, #16]
    1e26:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    1e2a:	d1fb      	bne.n	1e24 <_pwm_init+0x98>
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    1e2c:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    1e30:	4a31      	ldr	r2, [pc, #196]	; (1ef8 <_pwm_init+0x16c>)
    1e32:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1e36:	8a1b      	ldrh	r3, [r3, #16]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    1e38:	83e3      	strh	r3, [r4, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1e3a:	6923      	ldr	r3, [r4, #16]
    1e3c:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    1e40:	d1fb      	bne.n	1e3a <_pwm_init+0xae>
	if (hw == TC1) {
    1e42:	4b2e      	ldr	r3, [pc, #184]	; (1efc <_pwm_init+0x170>)
    1e44:	429c      	cmp	r4, r3
    1e46:	d04a      	beq.n	1ede <_pwm_init+0x152>
	if (hw == TC4) {
    1e48:	4b2d      	ldr	r3, [pc, #180]	; (1f00 <_pwm_init+0x174>)
    1e4a:	429c      	cmp	r4, r3
		_tc4_dev = (struct _pwm_device *)dev;
    1e4c:	bf04      	itt	eq
    1e4e:	4b2d      	ldreq	r3, [pc, #180]	; (1f04 <_pwm_init+0x178>)
    1e50:	605d      	streq	r5, [r3, #4]
	NVIC_DisableIRQ(_tcs[i].irq);
    1e52:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    1e56:	4a28      	ldr	r2, [pc, #160]	; (1ef8 <_pwm_init+0x16c>)
    1e58:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1e5c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    1e60:	2b00      	cmp	r3, #0
    1e62:	db42      	blt.n	1eea <_pwm_init+0x15e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1e64:	095a      	lsrs	r2, r3, #5
    1e66:	f003 031f 	and.w	r3, r3, #31
    1e6a:	2101      	movs	r1, #1
    1e6c:	fa01 f303 	lsl.w	r3, r1, r3
    1e70:	3220      	adds	r2, #32
    1e72:	4925      	ldr	r1, [pc, #148]	; (1f08 <_pwm_init+0x17c>)
    1e74:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    1e78:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1e7c:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    1e80:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    1e84:	4b1c      	ldr	r3, [pc, #112]	; (1ef8 <_pwm_init+0x16c>)
    1e86:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1e8a:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
  if ((int32_t)(IRQn) >= 0)
    1e8e:	2b00      	cmp	r3, #0
    1e90:	db2d      	blt.n	1eee <_pwm_init+0x162>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1e92:	0959      	lsrs	r1, r3, #5
    1e94:	f003 031f 	and.w	r3, r3, #31
    1e98:	2201      	movs	r2, #1
    1e9a:	fa02 f303 	lsl.w	r3, r2, r3
    1e9e:	4a1a      	ldr	r2, [pc, #104]	; (1f08 <_pwm_init+0x17c>)
    1ea0:	f101 0060 	add.w	r0, r1, #96	; 0x60
    1ea4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1ea8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return 0;
    1eac:	2000      	movs	r0, #0
    1eae:	bd38      	pop	{r3, r4, r5, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    1eb0:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    1eb4:	4a10      	ldr	r2, [pc, #64]	; (1ef8 <_pwm_init+0x16c>)
    1eb6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1eba:	68db      	ldr	r3, [r3, #12]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    1ebc:	61e3      	str	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1ebe:	6923      	ldr	r3, [r4, #16]
    1ec0:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    1ec4:	d1fb      	bne.n	1ebe <_pwm_init+0x132>
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    1ec6:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    1eca:	4a0b      	ldr	r2, [pc, #44]	; (1ef8 <_pwm_init+0x16c>)
    1ecc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1ed0:	691b      	ldr	r3, [r3, #16]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    1ed2:	6223      	str	r3, [r4, #32]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1ed4:	6923      	ldr	r3, [r4, #16]
    1ed6:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    1eda:	d1fb      	bne.n	1ed4 <_pwm_init+0x148>
    1edc:	e7b1      	b.n	1e42 <_pwm_init+0xb6>
		_tc1_dev = (struct _timer_device *)dev;
    1ede:	4b09      	ldr	r3, [pc, #36]	; (1f04 <_pwm_init+0x178>)
    1ee0:	601d      	str	r5, [r3, #0]
    1ee2:	e7b6      	b.n	1e52 <_pwm_init+0xc6>
		return -1;
    1ee4:	f04f 30ff 	mov.w	r0, #4294967295
    1ee8:	bd38      	pop	{r3, r4, r5, pc}
	return 0;
    1eea:	2000      	movs	r0, #0
    1eec:	bd38      	pop	{r3, r4, r5, pc}
    1eee:	2000      	movs	r0, #0
}
    1ef0:	bd38      	pop	{r3, r4, r5, pc}
    1ef2:	bf00      	nop
    1ef4:	00001b45 	.word	0x00001b45
    1ef8:	20000000 	.word	0x20000000
    1efc:	40003c00 	.word	0x40003c00
    1f00:	42001400 	.word	0x42001400
    1f04:	200001e8 	.word	0x200001e8
    1f08:	e000e100 	.word	0xe000e100

00001f0c <_timer_start>:
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    1f0c:	68c2      	ldr	r2, [r0, #12]
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    1f0e:	6813      	ldr	r3, [r2, #0]
    1f10:	f043 0302 	orr.w	r3, r3, #2
    1f14:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1f16:	6913      	ldr	r3, [r2, #16]
    1f18:	f013 0f03 	tst.w	r3, #3
    1f1c:	d1fb      	bne.n	1f16 <_timer_start+0xa>
}
    1f1e:	4770      	bx	lr

00001f20 <_pwm_enable>:
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    1f20:	6902      	ldr	r2, [r0, #16]
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    1f22:	6813      	ldr	r3, [r2, #0]
    1f24:	f043 0302 	orr.w	r3, r3, #2
    1f28:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1f2a:	6913      	ldr	r3, [r2, #16]
    1f2c:	f013 0f03 	tst.w	r3, #3
    1f30:	d1fb      	bne.n	1f2a <_pwm_enable+0xa>
}
    1f32:	4770      	bx	lr

00001f34 <_pwm_disable>:
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    1f34:	6902      	ldr	r2, [r0, #16]
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    1f36:	6813      	ldr	r3, [r2, #0]
    1f38:	f023 0302 	bic.w	r3, r3, #2
    1f3c:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1f3e:	6913      	ldr	r3, [r2, #16]
    1f40:	f013 0f03 	tst.w	r3, #3
    1f44:	d1fb      	bne.n	1f3e <_pwm_disable+0xa>
}
    1f46:	4770      	bx	lr

00001f48 <_pwm_set_param>:
{
    1f48:	b570      	push	{r4, r5, r6, lr}
    1f4a:	460e      	mov	r6, r1
    1f4c:	4615      	mov	r5, r2
	void *const hw = device->hw;
    1f4e:	6904      	ldr	r4, [r0, #16]
	int8_t      i  = get_tc_index(hw);
    1f50:	4620      	mov	r0, r4
    1f52:	4b13      	ldr	r3, [pc, #76]	; (1fa0 <_pwm_set_param+0x58>)
    1f54:	4798      	blx	r3
	_tcs[i].cc0 = period;
    1f56:	4b13      	ldr	r3, [pc, #76]	; (1fa4 <_pwm_set_param+0x5c>)
    1f58:	0082      	lsls	r2, r0, #2
    1f5a:	1811      	adds	r1, r2, r0
    1f5c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    1f60:	60ce      	str	r6, [r1, #12]
	_tcs[i].cc1 = duty_cycle;
    1f62:	610d      	str	r5, [r1, #16]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    1f64:	684b      	ldr	r3, [r1, #4]
    1f66:	f003 030c 	and.w	r3, r3, #12
    1f6a:	2b08      	cmp	r3, #8
    1f6c:	d00c      	beq.n	1f88 <_pwm_set_param+0x40>
		hri_tccount16_write_CC_reg(hw, 0, _tcs[i].cc0);
    1f6e:	b2b6      	uxth	r6, r6
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    1f70:	83a6      	strh	r6, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1f72:	6923      	ldr	r3, [r4, #16]
    1f74:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    1f78:	d1fb      	bne.n	1f72 <_pwm_set_param+0x2a>
		hri_tccount16_write_CC_reg(hw, 1, _tcs[i].cc1);
    1f7a:	b2ad      	uxth	r5, r5
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    1f7c:	83e5      	strh	r5, [r4, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1f7e:	6923      	ldr	r3, [r4, #16]
    1f80:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    1f84:	d1fb      	bne.n	1f7e <_pwm_set_param+0x36>
    1f86:	bd70      	pop	{r4, r5, r6, pc}
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    1f88:	61e6      	str	r6, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1f8a:	6923      	ldr	r3, [r4, #16]
    1f8c:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    1f90:	d1fb      	bne.n	1f8a <_pwm_set_param+0x42>
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    1f92:	6225      	str	r5, [r4, #32]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1f94:	6923      	ldr	r3, [r4, #16]
    1f96:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    1f9a:	d1fb      	bne.n	1f94 <_pwm_set_param+0x4c>
    1f9c:	bd70      	pop	{r4, r5, r6, pc}
    1f9e:	bf00      	nop
    1fa0:	00001b45 	.word	0x00001b45
    1fa4:	20000000 	.word	0x20000000

00001fa8 <_timer_is_started>:
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    1fa8:	68c2      	ldr	r2, [r0, #12]
    1faa:	6913      	ldr	r3, [r2, #16]
    1fac:	f013 0f03 	tst.w	r3, #3
    1fb0:	d1fb      	bne.n	1faa <_timer_is_started+0x2>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    1fb2:	6810      	ldr	r0, [r2, #0]
}
    1fb4:	f3c0 0040 	ubfx	r0, r0, #1, #1
    1fb8:	4770      	bx	lr

00001fba <_pwm_is_enabled>:
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    1fba:	6902      	ldr	r2, [r0, #16]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1fbc:	6913      	ldr	r3, [r2, #16]
    1fbe:	f013 0f03 	tst.w	r3, #3
    1fc2:	d1fb      	bne.n	1fbc <_pwm_is_enabled+0x2>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    1fc4:	6810      	ldr	r0, [r2, #0]
}
    1fc6:	f3c0 0040 	ubfx	r0, r0, #1, #1
    1fca:	4770      	bx	lr

00001fcc <_tc_get_timer>:
}
    1fcc:	2000      	movs	r0, #0
    1fce:	4770      	bx	lr

00001fd0 <_tc_get_pwm>:
}
    1fd0:	2000      	movs	r0, #0
    1fd2:	4770      	bx	lr

00001fd4 <_timer_set_irq>:
{
    1fd4:	b510      	push	{r4, lr}
	int8_t      i  = get_tc_index(hw);
    1fd6:	68c0      	ldr	r0, [r0, #12]
    1fd8:	4b08      	ldr	r3, [pc, #32]	; (1ffc <_timer_set_irq+0x28>)
    1fda:	4798      	blx	r3
    1fdc:	4604      	mov	r4, r0
	ASSERT(ARRAY_SIZE(_tcs));
    1fde:	f240 129d 	movw	r2, #413	; 0x19d
    1fe2:	4907      	ldr	r1, [pc, #28]	; (2000 <_timer_set_irq+0x2c>)
    1fe4:	2001      	movs	r0, #1
    1fe6:	4b07      	ldr	r3, [pc, #28]	; (2004 <_timer_set_irq+0x30>)
    1fe8:	4798      	blx	r3
	_irq_set(_tcs[i].irq);
    1fea:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    1fee:	4b06      	ldr	r3, [pc, #24]	; (2008 <_timer_set_irq+0x34>)
    1ff0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    1ff4:	78a0      	ldrb	r0, [r4, #2]
    1ff6:	4b05      	ldr	r3, [pc, #20]	; (200c <_timer_set_irq+0x38>)
    1ff8:	4798      	blx	r3
    1ffa:	bd10      	pop	{r4, pc}
    1ffc:	00001b45 	.word	0x00001b45
    2000:	000023b0 	.word	0x000023b0
    2004:	00000f11 	.word	0x00000f11
    2008:	20000000 	.word	0x20000000
    200c:	00001315 	.word	0x00001315

00002010 <TC1_Handler>:
{
    2010:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc1_dev);
    2012:	4b06      	ldr	r3, [pc, #24]	; (202c <TC1_Handler+0x1c>)
    2014:	6818      	ldr	r0, [r3, #0]
	void *const hw = device->hw;
    2016:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    2018:	7a9a      	ldrb	r2, [r3, #10]
	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    201a:	f012 0f01 	tst.w	r2, #1
    201e:	d100      	bne.n	2022 <TC1_Handler+0x12>
    2020:	bd08      	pop	{r3, pc}
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    2022:	2201      	movs	r2, #1
    2024:	729a      	strb	r2, [r3, #10]
		device->timer_cb.period_expired(device);
    2026:	6803      	ldr	r3, [r0, #0]
    2028:	4798      	blx	r3
}
    202a:	e7f9      	b.n	2020 <TC1_Handler+0x10>
    202c:	200001e8 	.word	0x200001e8

00002030 <TC4_Handler>:
{
    2030:	b538      	push	{r3, r4, r5, lr}
	tc_pwm_interrupt_handler(_tc4_dev);
    2032:	4b0c      	ldr	r3, [pc, #48]	; (2064 <TC4_Handler+0x34>)
    2034:	685d      	ldr	r5, [r3, #4]
	void *const hw = device->hw;
    2036:	692c      	ldr	r4, [r5, #16]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    2038:	7aa3      	ldrb	r3, [r4, #10]
	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    203a:	f013 0f01 	tst.w	r3, #1
    203e:	d005      	beq.n	204c <TC4_Handler+0x1c>
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    2040:	2301      	movs	r3, #1
    2042:	72a3      	strb	r3, [r4, #10]
		if (NULL != device->callback.pwm_period_cb) {
    2044:	682b      	ldr	r3, [r5, #0]
    2046:	b10b      	cbz	r3, 204c <TC4_Handler+0x1c>
			device->callback.pwm_period_cb(device);
    2048:	4628      	mov	r0, r5
    204a:	4798      	blx	r3
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    204c:	7a63      	ldrb	r3, [r4, #9]
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    204e:	f013 0f02 	tst.w	r3, #2
    2052:	d005      	beq.n	2060 <TC4_Handler+0x30>
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    2054:	2302      	movs	r3, #2
    2056:	72a3      	strb	r3, [r4, #10]
		if (NULL != device->callback.pwm_error_cb) {
    2058:	686b      	ldr	r3, [r5, #4]
    205a:	b10b      	cbz	r3, 2060 <TC4_Handler+0x30>
			device->callback.pwm_error_cb(device);
    205c:	4628      	mov	r0, r5
    205e:	4798      	blx	r3
    2060:	bd38      	pop	{r3, r4, r5, pc}
    2062:	bf00      	nop
    2064:	200001e8 	.word	0x200001e8

00002068 <TIMER_0_task1_cb.67408>:
	pwm_enable(&PWM_0); //output on PB13 (D19) ADC on A11
	
	/*Set up timer to turn LED off*/
	static struct timer_task TIMER_0_task1;
	
	void TIMER_0_task1_cb(const struct timer_task *const timer_task){
    2068:	b508      	push	{r3, lr}
		pwm_disable(&PWM_0);	
    206a:	4802      	ldr	r0, [pc, #8]	; (2074 <TIMER_0_task1_cb.67408+0xc>)
    206c:	4b02      	ldr	r3, [pc, #8]	; (2078 <TIMER_0_task1_cb.67408+0x10>)
    206e:	4798      	blx	r3
    2070:	bd08      	pop	{r3, pc}
    2072:	bf00      	nop
    2074:	20000204 	.word	0x20000204
    2078:	00000921 	.word	0x00000921

0000207c <main>:
{
    207c:	b508      	push	{r3, lr}
	atmel_start_init();
    207e:	4b12      	ldr	r3, [pc, #72]	; (20c8 <main+0x4c>)
    2080:	4798      	blx	r3
	pwm_set_parameters(&PWM_0, 1000, 200); 
    2082:	4c12      	ldr	r4, [pc, #72]	; (20cc <main+0x50>)
    2084:	22c8      	movs	r2, #200	; 0xc8
    2086:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    208a:	4620      	mov	r0, r4
    208c:	4b10      	ldr	r3, [pc, #64]	; (20d0 <main+0x54>)
    208e:	4798      	blx	r3
	pwm_enable(&PWM_0); //output on PB13 (D19) ADC on A11
    2090:	4620      	mov	r0, r4
    2092:	4b10      	ldr	r3, [pc, #64]	; (20d4 <main+0x58>)
    2094:	4798      	blx	r3
	} //callback function - inside put what you want to do when timer ends

	TIMER_0_task1.interval = 1000; //This is probably 1*1000ms = 1s, need to check.
    2096:	4910      	ldr	r1, [pc, #64]	; (20d8 <main+0x5c>)
    2098:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    209c:	608b      	str	r3, [r1, #8]
	TIMER_0_task1.cb=TIMER_0_task1_cb;
    209e:	4b0f      	ldr	r3, [pc, #60]	; (20dc <main+0x60>)
    20a0:	60cb      	str	r3, [r1, #12]
	TIMER_0_task1.mode=TIMER_TASK_ONE_SHOT;
    20a2:	2300      	movs	r3, #0
    20a4:	740b      	strb	r3, [r1, #16]
	
	/*Add task and start timer to turn off PWM*/
	timer_add_task(&TIMER_0, &TIMER_0_task1);
    20a6:	4c0e      	ldr	r4, [pc, #56]	; (20e0 <main+0x64>)
    20a8:	4620      	mov	r0, r4
    20aa:	4b0e      	ldr	r3, [pc, #56]	; (20e4 <main+0x68>)
    20ac:	4798      	blx	r3
	timer_start(&TIMER_0);
    20ae:	4620      	mov	r0, r4
    20b0:	4b0d      	ldr	r3, [pc, #52]	; (20e8 <main+0x6c>)
    20b2:	4798      	blx	r3
	
	//Setup UART COMS
	usart_sync_enable(&USART_0);
    20b4:	4c0d      	ldr	r4, [pc, #52]	; (20ec <main+0x70>)
    20b6:	4620      	mov	r0, r4
    20b8:	4b0d      	ldr	r3, [pc, #52]	; (20f0 <main+0x74>)
    20ba:	4798      	blx	r3
	USART_0.io.write(&USART_0.io, (uint8_t*)"Hello World", 12);
    20bc:	6823      	ldr	r3, [r4, #0]
    20be:	220c      	movs	r2, #12
    20c0:	490c      	ldr	r1, [pc, #48]	; (20f4 <main+0x78>)
    20c2:	4620      	mov	r0, r4
    20c4:	4798      	blx	r3
    20c6:	e7fe      	b.n	20c6 <main+0x4a>
    20c8:	000002d1 	.word	0x000002d1
    20cc:	20000204 	.word	0x20000204
    20d0:	0000095d 	.word	0x0000095d
    20d4:	000008e5 	.word	0x000008e5
    20d8:	200001f0 	.word	0x200001f0
    20dc:	00002069 	.word	0x00002069
    20e0:	200002b8 	.word	0x200002b8
    20e4:	00000d21 	.word	0x00000d21
    20e8:	00000ce5 	.word	0x00000ce5
    20ec:	200002ac 	.word	0x200002ac
    20f0:	00000ee5 	.word	0x00000ee5
    20f4:	000023c4 	.word	0x000023c4

000020f8 <__libc_init_array>:
    20f8:	b570      	push	{r4, r5, r6, lr}
    20fa:	4e0d      	ldr	r6, [pc, #52]	; (2130 <__libc_init_array+0x38>)
    20fc:	4c0d      	ldr	r4, [pc, #52]	; (2134 <__libc_init_array+0x3c>)
    20fe:	1ba4      	subs	r4, r4, r6
    2100:	10a4      	asrs	r4, r4, #2
    2102:	2500      	movs	r5, #0
    2104:	42a5      	cmp	r5, r4
    2106:	d109      	bne.n	211c <__libc_init_array+0x24>
    2108:	4e0b      	ldr	r6, [pc, #44]	; (2138 <__libc_init_array+0x40>)
    210a:	4c0c      	ldr	r4, [pc, #48]	; (213c <__libc_init_array+0x44>)
    210c:	f000 f960 	bl	23d0 <_init>
    2110:	1ba4      	subs	r4, r4, r6
    2112:	10a4      	asrs	r4, r4, #2
    2114:	2500      	movs	r5, #0
    2116:	42a5      	cmp	r5, r4
    2118:	d105      	bne.n	2126 <__libc_init_array+0x2e>
    211a:	bd70      	pop	{r4, r5, r6, pc}
    211c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    2120:	4798      	blx	r3
    2122:	3501      	adds	r5, #1
    2124:	e7ee      	b.n	2104 <__libc_init_array+0xc>
    2126:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    212a:	4798      	blx	r3
    212c:	3501      	adds	r5, #1
    212e:	e7f2      	b.n	2116 <__libc_init_array+0x1e>
    2130:	000023dc 	.word	0x000023dc
    2134:	000023dc 	.word	0x000023dc
    2138:	000023dc 	.word	0x000023dc
    213c:	000023e0 	.word	0x000023e0
    2140:	682f2e2e 	.word	0x682f2e2e
    2144:	732f6c61 	.word	0x732f6c61
    2148:	682f6372 	.word	0x682f6372
    214c:	615f6c61 	.word	0x615f6c61
    2150:	615f6364 	.word	0x615f6364
    2154:	636e7973 	.word	0x636e7973
    2158:	0000632e 	.word	0x0000632e
    215c:	682f2e2e 	.word	0x682f2e2e
    2160:	732f6c61 	.word	0x732f6c61
    2164:	682f6372 	.word	0x682f6372
    2168:	705f6c61 	.word	0x705f6c61
    216c:	632e6d77 	.word	0x632e6d77
    2170:	00000000 	.word	0x00000000
    2174:	682f2e2e 	.word	0x682f2e2e
    2178:	732f6c61 	.word	0x732f6c61
    217c:	682f6372 	.word	0x682f6372
    2180:	735f6c61 	.word	0x735f6c61
    2184:	6d5f6970 	.word	0x6d5f6970
    2188:	7973615f 	.word	0x7973615f
    218c:	632e636e 	.word	0x632e636e
    2190:	00000000 	.word	0x00000000
    2194:	682f2e2e 	.word	0x682f2e2e
    2198:	732f6c61 	.word	0x732f6c61
    219c:	682f6372 	.word	0x682f6372
    21a0:	745f6c61 	.word	0x745f6c61
    21a4:	72656d69 	.word	0x72656d69
    21a8:	0000632e 	.word	0x0000632e
    21ac:	682f2e2e 	.word	0x682f2e2e
    21b0:	732f6c61 	.word	0x732f6c61
    21b4:	682f6372 	.word	0x682f6372
    21b8:	755f6c61 	.word	0x755f6c61
    21bc:	74726173 	.word	0x74726173
    21c0:	6e79735f 	.word	0x6e79735f
    21c4:	00632e63 	.word	0x00632e63
    21c8:	682f2e2e 	.word	0x682f2e2e
    21cc:	752f6c61 	.word	0x752f6c61
    21d0:	736c6974 	.word	0x736c6974
    21d4:	6372732f 	.word	0x6372732f
    21d8:	6974752f 	.word	0x6974752f
    21dc:	6c5f736c 	.word	0x6c5f736c
    21e0:	2e747369 	.word	0x2e747369
    21e4:	00000063 	.word	0x00000063
    21e8:	682f2e2e 	.word	0x682f2e2e
    21ec:	752f6c61 	.word	0x752f6c61
    21f0:	736c6974 	.word	0x736c6974
    21f4:	6372732f 	.word	0x6372732f
    21f8:	6974752f 	.word	0x6974752f
    21fc:	725f736c 	.word	0x725f736c
    2200:	62676e69 	.word	0x62676e69
    2204:	65666675 	.word	0x65666675
    2208:	00632e72 	.word	0x00632e72

0000220c <_adcs>:
    220c:	00000001 00000000 00000000 00000000     ................
	...
    2224:	682f2e2e 612f6c70 682f6364 615f6c70     ../hpl/adc/hpl_a
    2234:	632e6364 00000000                       dc.c....

0000223c <_cfgs>:
    223c:	00304400 00000000 00000000 00000000     .D0.............
	...
    233c:	40003000 40003400 41012000 41014000     .0.@.4.@. .A.@.A
    234c:	43000000 43000400 43000800 43000c00     ...C...C...C...C

0000235c <_i2cms>:
	...
    2374:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    2384:	65735f6c 6d6f6372 0000632e 40003800     l_sercom.c...8.@
    2394:	40003c00 4101a000 4101c000 42001400     .<.@...A...A...B
    23a4:	42001800 43001400 43001800 682f2e2e     ...B...C...C../h
    23b4:	742f6c70 70682f63 63745f6c 0000632e     pl/tc/hpl_tc.c..
    23c4:	6c6c6548 6f57206f 00646c72              Hello World.

000023d0 <_init>:
    23d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    23d2:	bf00      	nop
    23d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    23d6:	bc08      	pop	{r3}
    23d8:	469e      	mov	lr, r3
    23da:	4770      	bx	lr

000023dc <__init_array_start>:
    23dc:	00000289 	.word	0x00000289

000023e0 <_fini>:
    23e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    23e2:	bf00      	nop
    23e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    23e6:	bc08      	pop	{r3}
    23e8:	469e      	mov	lr, r3
    23ea:	4770      	bx	lr

000023ec <__fini_array_start>:
    23ec:	00000265 	.word	0x00000265
